
// Generated from GQLParser.g4 by ANTLR 4.13.1


#include "GQLParserVisitor.h"

#include "GQLParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct GQLParserStaticData final {
  GQLParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  GQLParserStaticData(const GQLParserStaticData&) = delete;
  GQLParserStaticData(GQLParserStaticData&&) = delete;
  GQLParserStaticData& operator=(const GQLParserStaticData&) = delete;
  GQLParserStaticData& operator=(GQLParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag gqlparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
GQLParserStaticData *gqlparserParserStaticData = nullptr;

void gqlparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (gqlparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(gqlparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<GQLParserStaticData>(
    std::vector<std::string>{
      "root", "gqlProgram", "programActivity", "sessionActivity", "sessionActivityCommand", 
      "transactionActivity", "endTransactionCommand", "sessionSetCommand", 
      "sessionSetSchemaClause", "sessionSetGraphClause", "sessionSetTimeZoneClause", 
      "setTimeZoneValue", "sessionSetParameterClause", "sessionSetGraphParameterClause", 
      "sessionSetBindingTableParameterClause", "sessionSetValueParameterClause", 
      "sessionSetParameterName", "sessionResetCommand", "sessionResetArguments", 
      "sessionCloseCommand", "startTransactionCommand", "transactionCharacteristics", 
      "transactionMode", "transactionAccessMode", "implementationDefinedAccessMode", 
      "rollbackCommand", "commitCommand", "nestedProcedureSpecification", 
      "procedureSpecification", "catalogModifyingProcedureSpecification", 
      "nestedDataModifyingProcedureSpecification", "dataModifyingProcedureSpecification", 
      "nestedQuerySpecification", "querySpecification", "unsignedNumericLiteral", 
      "integerLiteral", "floatLiteral", "unbrokenSingleQuotedCharacterSequence", 
      "unbrokenDoubleQuotedCharacterSequence", "unbrokenAccentQuotedCharacterSequence", 
      "singleQuotedCharacterSequence", "doubleQuotedCharacterSequence", 
      "accentQuotedCharacterSequence", "unbrokenCharacterStringLiteral", 
      "nullLiteral", "temporalLiteral", "sqlDatetimeLiteral", "dateLiteral", 
      "timeLiteral", "datetimeLiteral", "durationLiteral", "sqlIntervalLiteral", 
      "sqlIntervalType", "identifier", "delimitedIdentifier", "objectName", 
      "objectNameOrBindingVariable", "directoryName", "schemaName", "graphName", 
      "delimitedGraphName", "graphTypeName", "elementTypeName", "bindingTableName", 
      "delimitedBindingTableName", "procedureName", "labelName", "functionName", 
      "propertyName", "fieldName", "parameterName", "variable", "graphVariable", 
      "graphPatternVariable", "pathOrSubpathVariable", "elementVariable", 
      "pathVariable", "subpathVariable", "bindingTableVariable", "valueVariable", 
      "bindingVariable", "predefinedTypeLiteral", "booleanLiteral", "characterStringLiteral", 
      "byteStringLiteral", "procedureBody", "bindingVariableDefinitionBlock", 
      "bindingVariableDefinition", "statementBlock", "statement", "nextStatement", 
      "graphVariableDefinition", "optTypedGraphInitializer", "graphInitializer", 
      "bindingTableVariableDefinition", "optTypedBindingTableInitializer", 
      "bindingTableInitializer", "valueVariableDefinition", "optTypedValueInitializer", 
      "graphExpression", "currentGraph", "nestedGraphQuerySpecification", 
      "bindingTableExpression", "nestedBindingTableQuerySpecification", 
      "objectExpressionPrimary", "linearCatalogModifyingStatement", "simpleCatalogModifyingStatement", 
      "primitiveCatalogModifyingStatement", "createSchemaStatement", "dropSchemaStatement", 
      "createGraphStatement", "openGraphType", "ofGraphType", "graphTypeLikeGraph", 
      "graphSource", "dropGraphStatement", "createGraphTypeStatement", "graphTypeSource", 
      "copyOfGraphType", "dropGraphTypeStatement", "callCatalogModifyingProcedureStatement", 
      "linearDataModifyingStatement", "focusedLinearDataModifyingStatement", 
      "focusedLinearDataModifyingStatementBody", "focusedNestedDataModifyingProcedureSpecification", 
      "ambientLinearDataModifyingStatement", "ambientLinearDataModifyingStatementBody", 
      "simpleLinearDataAccessingStatement", "simpleDataAccessingStatement", 
      "simpleDataModifyingStatement", "primitiveDataModifyingStatement", 
      "insertStatement", "setStatement", "setItemList", "setItem", "setPropertyItem", 
      "setAllPropertiesItem", "setLabelItem", "labelSetSpecification", "removeStatement", 
      "removeItemList", "removeItem", "removePropertyItem", "removeLabelItem", 
      "deleteStatement", "deleteItemList", "deleteItem", "callDataModifyingProcedureStatement", 
      "compositeQueryStatement", "compositeQueryExpression", "queryConjunction", 
      "setOperator", "compositeQueryPrimary", "linearQueryStatement", "focusedLinearQueryStatement", 
      "focusedLinearQueryStatementPart", "focusedLinearQueryAndPrimitiveResultStatementPart", 
      "focusedPrimitiveResultStatement", "focusedNestedQuerySpecification", 
      "ambientLinearQueryStatement", "simpleLinearQueryStatement", "simpleQueryStatement", 
      "primitiveQueryStatement", "matchStatement", "simpleMatchStatement", 
      "optionalMatchStatement", "optionalOperand", "matchStatementBlock", 
      "callQueryStatement", "filterStatement", "letStatement", "letVariableDefinitionList", 
      "letVariableDefinition", "forStatement", "forItem", "forItemAlias", 
      "forOrdinalityOrOffset", "orderByAndPageStatement", "primitiveResultStatement", 
      "returnStatement", "returnStatementBody", "returnItemList", "returnItem", 
      "returnItemAlias", "selectStatement", "selectItemList", "selectItem", 
      "selectItemAlias", "havingClause", "selectStatementBody", "selectGraphMatchList", 
      "selectGraphMatch", "selectQuerySpecification", "callProcedureStatement", 
      "procedureCall", "inlineProcedureCall", "variableScopeClause", "bindingVariableReferenceList", 
      "namedProcedureCall", "procedureArgumentList", "procedureArgument", 
      "useGraphClause", "atSchemaClause", "bindingVariableReference", "elementVariableReference", 
      "pathVariableReference", "parameter", "graphPatternBindingTable", 
      "graphPatternYieldClause", "graphPatternYieldItemList", "graphPatternYieldItem", 
      "graphPattern", "matchMode", "repeatableElementsMatchMode", "differentEdgesMatchMode", 
      "elementBindingsOrElements", "edgeBindingsOrEdges", "pathPatternList", 
      "pathPattern", "pathVariableDeclaration", "keepClause", "graphPatternWhereClause", 
      "pathPatternPrefix", "pathModePrefix", "pathMode", "pathSearchPrefix", 
      "allPathSearch", "pathOrPaths", "anyPathSearch", "numberOfPaths", 
      "shortestPathSearch", "allShortestPathSearch", "anyShortestPathSearch", 
      "countedShortestPathSearch", "countedShortestGroupSearch", "numberOfGroups", 
      "pathPatternExpression", "pathMultisetAlternation", "pathPatternUnion", 
      "pathTerm", "pathFactor", "quantifiedPathPrimary", "questionedPathPrimary", 
      "pathPrimary", "elementPattern", "nodePattern", "elementPatternFiller", 
      "elementVariableDeclaration", "isLabelExpression", "isOrColon", "elementPatternPredicate", 
      "elementPatternWhereClause", "elementPropertySpecification", "propertyKeyValuePairList", 
      "propertyKeyValuePair", "edgePattern", "fullEdgePattern", "fullEdgePointingLeft", 
      "fullEdgeUndirected", "fullEdgePointingRight", "fullEdgeLeftOrUndirected", 
      "fullEdgeUndirectedOrRight", "fullEdgeLeftOrRight", "fullEdgeAnyDirection", 
      "abbreviatedEdgePattern", "parenthesizedPathPatternExpression", "subpathVariableDeclaration", 
      "parenthesizedPathPatternWhereClause", "insertGraphPattern", "insertPathPatternList", 
      "insertPathPattern", "insertNodePattern", "insertEdgePattern", "insertEdgePointingLeft", 
      "insertEdgePointingRight", "insertEdgeUndirected", "insertElementPatternFiller", 
      "labelAndPropertySetSpecification", "labelExpression", "labelTerm", 
      "labelFactor", "labelPrimary", "wildcardLabel", "parenthesizedLabelExpression", 
      "graphPatternQuantifier", "fixedQuantifier", "generalQuantifier", 
      "lowerBound", "upperBound", "simplifiedPathPatternExpression", "simplifiedDefaultingLeft", 
      "simplifiedDefaultingUndirected", "simplifiedDefaultingRight", "simplifiedDefaultingLeftOrUndirected", 
      "simplifiedDefaultingUndirectedOrRight", "simplifiedDefaultingLeftOrRight", 
      "simplifiedDefaultingAnyDirection", "simplifiedContents", "simplifiedPathUnion", 
      "simplifiedMultisetAlternation", "simplifiedTerm", "simplifiedFactorLow", 
      "simplifiedFactorHigh", "simplifiedQuantified", "simplifiedQuestioned", 
      "simplifiedTertiary", "simplifiedDirectionOverride", "simplifiedOverrideLeft", 
      "simplifiedOverrideUndirected", "simplifiedOverrideRight", "simplifiedOverrideLeftOrUndirected", 
      "simplifiedOverrideUndirectedOrRight", "simplifiedOverrideLeftOrRight", 
      "simplifiedOverrideAnyDirection", "simplifiedSecondary", "simplifiedNegation", 
      "simplifiedPrimary", "whereClause", "yieldClause", "yieldItemList", 
      "yieldItem", "yieldItemName", "yieldItemAlias", "groupByClause", "groupingElementList", 
      "groupingElement", "emptyGroupingSet", "orderByClause", "aggregateFunction", 
      "generalSetFunctionType", "setQuantifier", "binarySetFunctionType", 
      "sortSpecificationList", "sortSpecification", "sortKey", "orderingSpecification", 
      "nullOrdering", "limitClause", "offsetClause", "offsetSynonym", "nestedGraphTypeSpecification", 
      "graphTypeSpecificationBody", "elementTypeDefinitionList", "elementTypeDefinition", 
      "nodeTypeDefinition", "nodeTypePattern", "nodeTypePhrase", "nodeTypeName", 
      "nodeTypeFiller", "nodeTypeLabelSetDefinition", "nodeTypePropertyTypeSetDefinition", 
      "edgeTypeDefinition", "edgeTypePattern", "edgeTypePhrase", "edgeTypeName", 
      "edgeTypeFiller", "edgeTypeLabelSetDefinition", "edgeTypePropertyTypeSetDefinition", 
      "fullEdgeTypePattern", "fullEdgeTypePatternPointingRight", "fullEdgeTypePatternPointingLeft", 
      "fullEdgeTypePatternUndirected", "arcTypePointingRight", "arcTypePointingLeft", 
      "arcTypeUndirected", "arcTypeFiller", "abbreviatedEdgeTypePattern", 
      "abbreviatedEdgeTypePatternPointingRight", "abbreviatedEdgeTypePatternPointingLeft", 
      "abbreviatedEdgeTypePatternUndirected", "nodeTypeReference", "sourceNodeTypeReference", 
      "destinationNodeTypeReference", "edgeKind", "endpointDefinition", 
      "endpointPairDefinition", "endpointPairDefinitionPointingRight", "endpointPairDefinitionPointingLeft", 
      "endpointPairDefinitionUndirected", "connectorPointingRight", "connectorUndirected", 
      "sourceNodeTypeName", "destinationNodeTypeName", "labelSetDefinition", 
      "propertyTypeSetDefinition", "propertyTypeDefinitionList", "propertyTypeDefinition", 
      "propertyValueType", "bindingTableType", "valueType", "typed", "predefinedType", 
      "booleanType", "characterStringType", "byteStringType", "minLength", 
      "maxLength", "fixedLength", "numericType", "exactNumericType", "binaryExactNumericType", 
      "signedBinaryExactNumericType", "unsignedBinaryExactNumericType", 
      "verboseBinaryExactNumericType", "decimalExactNumericType", "precision", 
      "scale", "approximateNumericType", "temporalType", "temporalInstantType", 
      "temporalDurationType", "datetimeType", "localdatetimeType", "dateType", 
      "timeType", "localtimeType", "durationType", "referenceValueType", 
      "graphReferenceValueType", "closedGraphReferenceValueType", "openGraphReferenceValueType", 
      "bindingTableReferenceValueType", "nodeReferenceValueType", "closedNodeReferenceValueType", 
      "openNodeReferenceValueType", "edgeReferenceValueType", "closedEdgeReferenceValueType", 
      "openEdgeReferenceValueType", "listValueTypeName", "listValueTypeNameSynonym", 
      "fieldTypesSpecification", "fieldTypeList", "pathValueType", "notNull", 
      "fieldType", "schemaReference", "absoluteCatalogSchemaReference", 
      "catalogSchemaParentAndName", "relativeCatalogSchemaReference", "predefinedSchemaReference", 
      "absoluteDirectoryPath", "relativeDirectoryPath", "simpleDirectoryPath", 
      "graphReference", "catalogGraphParentAndName", "homeGraph", "graphTypeReference", 
      "catalogGraphTypeParentAndName", "bindingTableReference", "catalogBindingTableParentAndName", 
      "procedureReference", "catalogProcedureParentAndName", "catalogObjectParentReference", 
      "referenceParameter", "externalObjectReference", "comparisonPredicateCond", 
      "compOp", "nullPredicateCond", "normalizedPredicateCond", "directedPredicateCond", 
      "labeledPredicateCond", "sourceDestinationPredicateCond", "unsignedValueSpecification", 
      "unsignedIntegerSpecification", "parameterValueSpecification", "predefinedParameter", 
      "expression", "expressionPredicate", "expressionAtom", "truthValue", 
      "unaryOperator", "functionCall", "numericFunction", "functionParameter", 
      "propertyReference", "oneArgNumericFunctionName", "twoArgNumericFunctionName", 
      "stringFunction", "listFunction", "caseFunction", "simpleWhenClause", 
      "searchedWhenClause", "elseClause", "whenOperand", "castFunction", 
      "elementIdFunction", "datetimeValueFunction", "dateFunction", "timeFunction", 
      "localTimeFunction", "datetimeFunction", "localDatetimeFunction", 
      "dateFunctionParameters", "timeFunctionParameters", "datetimeFunctionParameters", 
      "dateString", "timeString", "datetimeString", "durationFunction", 
      "durationFunctionParameters", "durationString", "generalFunction", 
      "collectionValueConstructor", "trimSpecification", "normalForm", "listValueConstructor", 
      "recordValueConstructor", "field", "pathValueConstructor", "unsignedLiteral", 
      "generalLiteral", "listLiteral", "recordLiteral", "recordFieldLiteral", 
      "keyword"
    },
    std::vector<std::string>{
      "", "'&'", "'*'", "'^'", "':'", "','", "'$'", "'='", "'!'", "'>'", 
      "'{'", "'['", "'('", "'<'", "'-'", "'%'", "'.'", "'+'", "'\\u003F'", 
      "'\\'", "'}'", "']'", "')'", "';'", "'/'", "'~'", "'_'", "'|'", "'ABS'", 
      "'ACOS'", "'ACYCLIC'", "'ALL'", "'ALL_DIFFERENT'", "'AND'", "'ANY'", 
      "'ARRAY'", "'AS'", "'ASC'", "'ASCENDING'", "'ASIN'", "'AT'", "'ATAN'", 
      "'AVG'", "'BIG'", "'BIGINT'", "'BINARY'", "'BINDING'", "'BINDINGS'", 
      "'BOOL'", "'BOOLEAN'", "'BOTH'", "'BTRIM'", "'BY'", "'BYTE_LENGTH'", 
      "'BYTES'", "'CALL'", "'CASE'", "'CAST'", "'CEIL'", "'CEILING'", "'CHAR_LENGTH'", 
      "'CHARACTER_LENGTH'", "'CHARACTERISTICS'", "'CLOSE'", "'COALESCE'", 
      "'COLLECT'", "'COMMIT'", "'CONNECTING'", "'COPY'", "'COS'", "'COSH'", 
      "'COT'", "'COUNT'", "'CREATE'", "'CURRENT_DATE'", "'CURRENT_GRAPH'", 
      "'CURRENT_PROPERTY_GRAPH'", "'CURRENT_SCHEMA'", "'CURRENT_TIME'", 
      "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DATE'", "'DATETIME'", "'DEC'", 
      "'DECIMAL'", "'DEGREES'", "'DELETE'", "'DESC'", "'DESCENDING'", "'DESTINATION'", 
      "'DETACH'", "'DIFFERENT'", "'DIRECTED'", "'DISTINCT'", "'DOUBLE'", 
      "'DROP'", "'DURATION'", "'DURATION_BETWEEN'", "'ELEMENT'", "'ELEMENT_ID'", 
      "'ELEMENTS'", "'ELSE'", "'END'", "'EXCEPT'", "'EXISTS'", "'EXP'", 
      "'FALSE'", "'FILTER'", "'FINISH'", "'FIRST'", "'FLOAT'", "'FLOAT128'", 
      "'FLOAT16'", "'FLOAT256'", "'FLOAT32'", "'FLOAT64'", "'FLOOR'", "'FOR'", 
      "'FROM'", "'GRAPH'", "'GROUP'", "'GROUPS'", "'HAVING'", "'HOME_GRAPH'", 
      "'HOME_PROPERTY_GRAPH'", "'HOME_SCHEMA'", "'I_DONT_KNOW_1'", "'I_DONT_KNOW_2'", 
      "'I_DONT_KNOW_3'", "'I_DONT_KNOW_4'", "'I_DONT_KNOW_5'", "'IF'", "'IN'", 
      "'INSERT'", "'INT'", "'INT8'", "'INT16'", "'INT32'", "'INT64'", "'INT128'", 
      "'INT256'", "'INTEGER'", "'INTEGER8'", "'INTEGER16'", "'INTEGER32'", 
      "'INTEGER64'", "'INTEGER128'", "'INTEGER256'", "'INTERSECT'", "'IS'", 
      "'KEEP'", "'LABEL'", "'LABELED'", "'LABELS'", "'LAST'", "'LEADING'", 
      "'LEFT'", "'LET'", "'LIKE'", "'LIMIT'", "'LIST'", "'LN'", "'LOCAL'", 
      "'LOCAL_DATETIME'", "'LOCAL_TIME'", "'LOCAL_TIMESTAMP'", "'LOG'", 
      "'LOG10'", "'LOWER'", "'LTRIM'", "'MATCH'", "'MAX'", "'MIN'", "'MOD'", 
      "'NEXT'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", "'NO'", "'NODETACH'", 
      "'NORMALIZE'", "'NORMALIZED'", "'NOT'", "'NULL'", "'NULLIF'", "'NULLS'", 
      "'OCTET_LENGTH'", "'OF'", "'OFFSET'", "'SKIP'", "'ONLY'", "'OPEN'", 
      "'OPTIONAL'", "'OR'", "'ORDER'", "'ORDINALITY'", "'OTHERWISE'", "'PARAMETER'", 
      "'PARAMETERS'", "'PATH'", "'PATH_LENGTH'", "'PATHS'", "'PERCENTILE_CONT'", 
      "'PERCENTILE_DISC'", "'POWER'", "'PRECISION'", "'PROJECT'", "'PROPERTY'", 
      "'PROPERTY_EXISTS'", "'RADIANS'", "'READ'", "'REAL'", "'RECORD'", 
      "'REMOVE'", "'REPEATABLE'", "'REPLACE'", "'RESET'", "'RETURN'", "'ROLLBACK'", 
      "'RTRIM'", "'RIGHT'", "'SAME'", "'SCHEMA'", "'SELECT'", "'SESSION'", 
      "'SET'", "'SHORTEST'", "'SIGNED'", "'SIMPLE'", "'SIN'", "'SINH'", 
      "'SMALL'", "'SMALLINT'", "'SOURCE'", "'SQRT'", "'START'", "'STDDEV_POP'", 
      "'STDDEV_SAMP'", "'STRING'", "'SUM'", "'TABLE'", "'TAN'", "'TANH'", 
      "'TEMP'", "'THEN'", "'TIME'", "'TIMESTAMP'", "'TIMEZONE'", "'TO'", 
      "'TRAIL'", "'TRAILING'", "'TRANSACTION'", "'TRIM'", "'TRUE'", "'TYPE'", 
      "'TYPED'", "'UBIGINT'", "'UINT'", "'UINT128'", "'UINT16'", "'UINT256'", 
      "'UINT32'", "'UINT64'", "'UINT8'", "'UNDIRECTED'", "'UNION'", "'UNKNOWN'", 
      "'UNSIGNED'", "'UPPER'", "'USE'", "'USMALLINT'", "'VALUE'", "'VARBINARY'", 
      "'VARCHAR'", "'VARIABLE'", "'WALK'", "'WHEN'", "'WHERE'", "'WITH'", 
      "'WITHOUT'", "'WRITE'", "'XOR'", "'YIELD'", "'ZONE'", "'ZONED'", "'ZONED_DATETIME'", 
      "'ZONED_TIME'", "", "", "", "", "", "", "", "", "'I_DONT_KNOW_12'", 
      "", "", "'|+|'", "'||'", "'::'", "'..'", "'>='", "'<->'", "'<-/'", 
      "'<~/'", "'<='", "'-/'", "'<>'", "'->'", "'/->'", "'/~>'", "'~>'", 
      "'~/'", "'//'", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "'''", "'\"'", "'`'", 
      "", "", "", "", "", "", "", "'\\u202A'", "", "", "", "'I_DONT_KNOW_15'", 
      "", "'/*'", "'*/'", "'I_DONT_KNOW_16'", "", "", "", "", "", "'I_DONT_KNOW_18'", 
      "", "'I_DONT_KNOW_20'"
    },
    std::vector<std::string>{
      "", "AMPERSAND", "ASTERISK", "CIRCUMFLEX", "COLON", "COMMA", "DOLLAR_SIGN", 
      "EQUALS_OPERATOR", "EXCLAMATION_MARK", "RIGHT_ANGLE_BRACKET", "LEFT_BRACE", 
      "LEFT_BRACKET", "LEFT_PAREN", "LEFT_ANGLE_BRACKET", "MINUS_SIGN", 
      "PERCENT", "PERIOD", "PLUS_SIGN", "QUESTION_MARK", "REVERSE_SOLIDUS", 
      "RIGHT_BRACE", "RIGHT_BRACKET", "RIGHT_PAREN", "SEMICOLON", "SOLIDUS", 
      "TILDE", "UNDERSCORE", "VERTICAL_BAR", "ABS", "ACOS", "ACYCLIC", "ALL", 
      "ALL_DIFFERENT", "AND", "ANY", "ARRAY", "AS", "ASC", "ASCENDING", 
      "ASIN", "AT", "ATAN", "AVG", "BIG", "BIGINT", "BINARY", "BINDING", 
      "BINDINGS", "BOOL", "BOOLEAN", "BOTH", "BTRIM", "BY", "BYTE_LENGTH", 
      "BYTES", "CALL", "CASE", "CAST", "CEIL", "CEILING", "CHAR_LENGTH", 
      "CHARACTER_LENGTH", "CHARACTERISTICS", "CLOSE", "COALESCE", "COLLECT", 
      "COMMIT", "CONNECTING", "COPY", "COS", "COSH", "COT", "COUNT", "CREATE", 
      "CURRENT_DATE", "CURRENT_GRAPH", "CURRENT_PROPERTY_GRAPH", "CURRENT_SCHEMA", 
      "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "DATE", "DATETIME", 
      "DEC", "DECIMAL", "DEGREES", "DELETE", "DESC", "DESCENDING", "DESTINATION", 
      "DETACH", "DIFFERENT", "DIRECTED", "DISTINCT", "DOUBLE", "DROP", "DURATION", 
      "DURATION_BETWEEN", "ELEMENT", "ELEMENT_ID", "ELEMENTS", "ELSE", "END", 
      "EXCEPT", "EXISTS", "EXP", "K_FALSE", "FILTER", "FINISH", "FIRST", 
      "FLOAT", "FLOAT128", "FLOAT16", "FLOAT256", "FLOAT32", "FLOAT64", 
      "FLOOR", "FOR", "FROM", "GRAPH", "GROUP", "GROUPS", "HAVING", "HOME_GRAPH", 
      "HOME_PROPERTY_GRAPH", "HOME_SCHEMA", "I_DONT_KNOW_1", "I_DONT_KNOW_2", 
      "I_DONT_KNOW_3", "I_DONT_KNOW_4", "I_DONT_KNOW_5", "IF", "IN", "INSERT", 
      "INT", "INT8", "INT16", "INT32", "INT64", "INT128", "INT256", "INTEGER", 
      "INTEGER8", "INTEGER16", "INTEGER32", "INTEGER64", "INTEGER128", "INTEGER256", 
      "INTERSECT", "IS", "KEEP", "LABEL", "LABELED", "LABELS", "LAST", "LEADING", 
      "LEFT", "LET", "LIKE", "LIMIT", "LIST", "LN", "LOCAL", "LOCAL_DATETIME", 
      "LOCAL_TIME", "LOCAL_TIMESTAMP", "LOG", "LOG10", "LOWER", "LTRIM", 
      "MATCH", "MAX", "MIN", "MOD", "NEXT", "NFC", "NFD", "NFKC", "NFKD", 
      "NO", "NODETACH", "NORMALIZE", "NORMALIZED", "NOT", "NULL", "NULLIF", 
      "NULLS", "OCTET_LENGTH", "OF", "OFFSET", "SKIP_", "ONLY", "OPEN", 
      "OPTIONAL", "OR", "ORDER", "ORDINALITY", "OTHERWISE", "PARAMETER", 
      "PARAMETERS", "PATH", "PATH_LENGTH", "PATHS", "PERCENTILE_CONT", "PERCENTILE_DISC", 
      "POWER", "PRECISION", "PROJECT", "PROPERTY", "PROPERTY_EXISTS", "RADIANS", 
      "READ", "REAL", "RECORD", "REMOVE", "REPEATABLE", "REPLACE", "RESET", 
      "RETURN", "ROLLBACK", "RTRIM", "RIGHT", "SAME", "SCHEMA", "SELECT", 
      "SESSION", "SET", "SHORTEST", "SIGNED", "SIMPLE", "SIN", "SINH", "SMALL", 
      "SMALLINT", "SOURCE", "SQRT", "START", "STDDEV_POP", "STDDEV_SAMP", 
      "STRING", "SUM", "TABLE", "TAN", "TANH", "TEMP", "THEN", "TIME", "TIMESTAMP", 
      "TIMEZONE", "TO", "TRAIL", "TRAILING", "TRANSACTION", "TRIM", "K_TRUE", 
      "TYPE", "TYPED", "UBIGINT", "UINT", "UINT128", "UINT16", "UINT256", 
      "UINT32", "UINT64", "UINT8", "UNDIRECTED", "UNION", "UNKNOWN", "UNSIGNED", 
      "UPPER", "USE", "USMALLINT", "VALUE", "VARBINARY", "VARCHAR", "VARIABLE", 
      "WALK", "WHEN", "WHERE", "WITH", "WITHOUT", "WRITE", "XOR", "YIELD", 
      "ZONE", "ZONED", "ZONED_DATETIME", "ZONED_TIME", "INTERVAL_DAY", "INTERVAL_WEEK", 
      "INTERVAL_MONTH", "INTERVAL_YEAR", "EDGE_SYNONYM", "EDGES_SYNONYM", 
      "NODE_SYNONYM", "KEY_WORD", "RESERVED_WORD", "PRE_RESERVED_WORD", 
      "NON_RESERVED_WORD", "MULTISET_ALTERNATION_OPERATOR", "CONCATENATION_OPERATOR", 
      "DOUBLE_COLON", "DOUBLE_PERIOD", "GREATER_THAN_OR_EQUALS_OPERATOR", 
      "LEFT_MINUS_RIGHT", "LEFT_MINUS_SLASH", "LEFT_TILDE_SLASH", "LESS_THAN_OR_EQUALS_OPERATOR", 
      "MINUS_SLASH", "NOT_EQUALS_OPERATOR", "RIGHT_ARROW", "SLASH_MINUS_RIGHT", 
      "SLASH_TILDE_RIGHT", "TILDE_RIGHT_ARROW", "TILDE_SLASH", "DOUBLE_SOLIDUS", 
      "ESCAPED_CHARACTER", "ESCAPED_REVERSE_SOLIDUS", "ESCAPED_QUOTE", "ESCAPED_DOUBLE_QUOTE", 
      "ESCAPED_GRAVE_ACCENT", "ESCAPED_TAB", "ESCAPED_BACKSPACE", "ESCAPED_NEWLINE", 
      "ESCAPED_CARRIAGE_RETURN", "ESCAPED_FORM_FEED", "UNICODE_ESCAPE_VALUE", 
      "UNICODE_4_DIGIT_ESCAPE_VALUE", "UNICODE_6_DIGIT_ESCAPE_VALUE", "UNSIGNED_DECIMAL_INTEGER", 
      "UNSIGNED_HEXADECIMAL_INTEGER", "UNSIGNED_OCTAL_INTEGER", "UNSIGNED_BINARY_INTEGER", 
      "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION", "UNSIGNED_DECIMAL_IN_COMMON_NOTATION", 
      "FOUR_DIGIT", "DOUBLE_DIGIT", "SINGLE_QUOTED_STRING_LITERAL", "DOUBLE_QUOTED_STRING_LITERAL", 
      "ACCENT_QUOTED_STRING_LITERAL", "BYTE_STRING_LITERAL", "QUOTE", "DOUBLE_QUOTE", 
      "GRAVE_ACCENT", "REGULAR_IDENTIFIER", "IDENTIFIER_START", "IDENTIFIER_EXTEND", 
      "SP", "SEPARATOR", "WHITESPACE", "Comment", "BIDIRECTIONAL_CONTROL_CHARACTER", 
      "COMMENT", "SIMPLE_COMMENT", "SIMPLE_COMMENT_INTRODUCER", "SIMPLE_COMMENT_CHARACTER", 
      "BRACKETED_COMMENT", "BRACKETED_COMMENT_INTRODUCER", "BRACKETED_COMMENT_TERMINATOR", 
      "BRACKETED_COMMENT_CONTENTS", "GQL_TERMINAL_CHARACTER", "GQL_LANGUAGE_CHARACTER", 
      "SIMPLE_LATIN_LETTER", "SIMPLE_LATIN_LOWER_CASE_LETTER", "SIMPLE_LATIN_UPPER_CASE_LETTER", 
      "OTHER_DIGIT", "GQL_SPECIAL_CHARACTER", "OTHER_LANGUAGE_CHARACTER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,367,4384,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
  	7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,
  	7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,
  	7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,
  	7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,
  	7,254,2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,
  	7,260,2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,
  	7,266,2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,
  	7,272,2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,
  	7,278,2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,
  	7,284,2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
  	7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
  	7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,
  	7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,
  	7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,
  	7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,
  	7,320,2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,
  	7,326,2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,
  	7,332,2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,
  	7,338,2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,
  	7,344,2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,
  	7,350,2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,
  	7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
  	7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,
  	7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,
  	7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,
  	7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,
  	7,386,2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,
  	7,392,2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,
  	7,398,2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,
  	7,404,2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,
  	7,410,2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,
  	7,416,2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,
  	7,422,2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
  	7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,
  	7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,
  	7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,
  	7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,
  	7,452,2,453,7,453,2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,
  	7,458,2,459,7,459,2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,
  	7,464,2,465,7,465,2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,
  	7,470,2,471,7,471,2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,
  	7,476,2,477,7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,
  	7,482,2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,
  	7,488,2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,
  	7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,
  	7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,
  	7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,
  	7,512,2,513,7,513,2,514,7,514,1,0,1,0,3,0,1033,8,0,1,0,1,0,1,1,1,1,3,
  	1,1039,8,1,1,1,3,1,1042,8,1,1,2,1,2,3,2,1046,8,2,1,3,4,3,1049,8,3,11,
  	3,12,3,1050,1,4,1,4,3,4,1055,8,4,1,5,1,5,1,5,3,5,1060,8,5,3,5,1062,8,
  	5,1,5,1,5,3,5,1066,8,5,1,5,3,5,1069,8,5,1,6,1,6,3,6,1073,8,6,1,7,1,7,
  	1,7,1,7,1,7,1,7,3,7,1081,8,7,1,8,1,8,1,8,1,9,3,9,1087,8,9,1,9,1,9,1,9,
  	1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,3,12,1101,8,12,1,13,3,13,
  	1104,8,13,1,13,1,13,1,13,1,13,1,14,3,14,1111,8,14,1,14,1,14,1,14,1,14,
  	1,15,1,15,1,15,1,15,1,16,1,16,1,16,3,16,1124,8,16,1,16,1,16,1,17,1,17,
  	1,17,3,17,1131,8,17,1,18,3,18,1134,8,18,1,18,1,18,1,18,3,18,1139,8,18,
  	1,18,1,18,1,18,1,18,3,18,1145,8,18,1,18,3,18,1148,8,18,1,19,1,19,1,19,
  	1,20,1,20,1,20,3,20,1156,8,20,1,21,1,21,1,21,5,21,1161,8,21,10,21,12,
  	21,1164,9,21,1,22,1,22,3,22,1168,8,22,1,23,1,23,1,23,1,23,3,23,1174,8,
  	23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,
  	29,1,30,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,34,1,
  	34,3,34,1204,8,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,
  	40,1,40,1,40,5,40,1219,8,40,10,40,12,40,1222,9,40,1,41,1,41,1,41,5,41,
  	1227,8,41,10,41,12,41,1230,9,41,1,42,1,42,1,42,5,42,1235,8,42,10,42,12,
  	42,1238,9,42,1,43,1,43,3,43,1242,8,43,1,44,1,44,1,45,1,45,1,45,1,45,3,
  	45,1250,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
  	46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
  	46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
  	46,1,46,1,46,3,46,1294,8,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,
  	49,1,50,1,50,1,50,3,50,1308,8,50,1,51,1,51,1,51,1,52,1,52,1,53,1,53,3,
  	53,1317,8,53,1,54,1,54,3,54,1321,8,54,1,55,1,55,3,55,1325,8,55,1,56,1,
  	56,1,57,1,57,1,58,1,58,1,59,1,59,3,59,1335,8,59,1,60,1,60,1,61,1,61,1,
  	62,1,62,1,63,1,63,3,63,1345,8,63,1,64,1,64,1,65,1,65,3,65,1351,8,65,1,
  	66,1,66,3,66,1355,8,66,1,67,1,67,1,68,1,68,3,68,1361,8,68,1,69,1,69,3,
  	69,1365,8,69,1,70,1,70,1,70,3,70,1370,8,70,1,71,1,71,1,72,1,72,1,73,1,
  	73,3,73,1378,8,73,1,74,1,74,3,74,1382,8,74,1,75,1,75,1,76,1,76,1,77,1,
  	77,1,78,1,78,1,79,1,79,1,80,1,80,3,80,1396,8,80,1,81,1,81,1,81,1,81,1,
  	81,1,81,3,81,1404,8,81,1,82,1,82,1,83,1,83,3,83,1410,8,83,1,84,1,84,1,
  	85,3,85,1415,8,85,1,85,3,85,1418,8,85,1,85,1,85,1,86,4,86,1423,8,86,11,
  	86,12,86,1424,1,87,1,87,1,87,3,87,1430,8,87,1,88,1,88,5,88,1434,8,88,
  	10,88,12,88,1437,9,88,1,89,1,89,1,89,3,89,1442,8,89,1,90,1,90,3,90,1446,
  	8,90,1,90,1,90,1,91,3,91,1451,8,91,1,91,1,91,1,91,1,91,1,92,3,92,1458,
  	8,92,1,92,3,92,1461,8,92,1,92,1,92,1,93,1,93,1,93,1,94,3,94,1469,8,94,
  	1,94,1,94,1,94,1,94,1,95,3,95,1476,8,95,1,95,3,95,1479,8,95,1,95,1,95,
  	1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,98,3,98,1491,8,98,1,98,3,98,1494,
  	8,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,3,99,1504,8,99,1,100,1,100,
  	1,101,1,101,1,102,1,102,1,102,1,102,3,102,1514,8,102,1,103,1,103,1,104,
  	1,104,1,104,1,104,1,104,1,104,1,104,3,104,1525,8,104,1,105,4,105,1528,
  	8,105,11,105,12,105,1529,1,106,1,106,3,106,1534,8,106,1,107,1,107,1,107,
  	1,107,1,107,1,107,3,107,1542,8,107,1,108,1,108,1,108,1,108,1,108,3,108,
  	1549,8,108,1,108,1,108,1,109,1,109,1,109,1,109,3,109,1557,8,109,1,109,
  	1,109,1,110,1,110,3,110,1563,8,110,1,110,1,110,1,110,1,110,3,110,1569,
  	8,110,1,110,1,110,1,110,3,110,1574,8,110,1,110,3,110,1577,8,110,1,110,
  	1,110,1,110,3,110,1582,8,110,1,110,3,110,1585,8,110,1,111,3,111,1588,
  	8,111,1,111,1,111,3,111,1592,8,111,1,111,3,111,1595,8,111,1,112,1,112,
  	3,112,1599,8,112,1,112,1,112,3,112,1603,8,112,1,112,3,112,1606,8,112,
  	1,112,3,112,1609,8,112,1,112,3,112,1612,8,112,1,113,1,113,1,113,1,114,
  	1,114,1,114,1,114,1,114,1,115,1,115,3,115,1624,8,115,1,115,1,115,1,115,
  	3,115,1629,8,115,1,115,1,115,1,116,1,116,3,116,1635,8,116,1,116,1,116,
  	1,116,1,116,1,116,3,116,1642,8,116,1,116,1,116,1,116,3,116,1647,8,116,
  	1,116,1,116,3,116,1651,8,116,1,116,1,116,1,116,1,117,3,117,1657,8,117,
  	1,117,1,117,1,117,3,117,1662,8,117,1,117,3,117,1665,8,117,1,118,1,118,
  	1,118,1,118,3,118,1671,8,118,1,119,1,119,3,119,1675,8,119,1,119,1,119,
  	1,119,1,119,3,119,1681,8,119,1,119,1,119,1,120,1,120,1,121,1,121,3,121,
  	1689,8,121,1,122,1,122,3,122,1693,8,122,1,123,1,123,1,123,3,123,1698,
  	8,123,1,124,1,124,1,124,1,125,1,125,3,125,1705,8,125,1,126,1,126,3,126,
  	1709,8,126,1,127,4,127,1712,8,127,11,127,12,127,1713,1,128,1,128,3,128,
  	1718,8,128,1,129,1,129,3,129,1722,8,129,1,130,1,130,1,130,1,130,3,130,
  	1728,8,130,1,131,1,131,1,131,1,132,1,132,1,132,1,133,1,133,1,133,5,133,
  	1739,8,133,10,133,12,133,1742,9,133,1,134,1,134,1,134,3,134,1747,8,134,
  	1,135,1,135,1,135,1,135,1,135,1,135,1,136,1,136,1,136,1,136,3,136,1759,
  	8,136,1,136,1,136,1,137,1,137,1,137,1,137,1,138,1,138,1,138,5,138,1770,
  	8,138,10,138,12,138,1773,9,138,1,139,1,139,1,139,1,140,1,140,1,140,5,
  	140,1781,8,140,10,140,12,140,1784,9,140,1,141,1,141,3,141,1788,8,141,
  	1,142,1,142,1,142,1,142,1,143,1,143,1,143,1,143,1,144,3,144,1799,8,144,
  	1,144,1,144,1,144,1,145,1,145,1,145,5,145,1807,8,145,10,145,12,145,1810,
  	9,145,1,146,1,146,1,147,1,147,1,148,1,148,1,149,1,149,1,149,1,149,1,149,
  	1,149,1,149,5,149,1825,8,149,10,149,12,149,1828,9,149,1,150,1,150,3,150,
  	1832,8,150,1,151,1,151,3,151,1836,8,151,1,151,1,151,3,151,1840,8,151,
  	1,151,1,151,3,151,1844,8,151,3,151,1846,8,151,1,152,1,152,1,153,1,153,
  	3,153,1852,8,153,1,154,5,154,1855,8,154,10,154,12,154,1858,9,154,1,154,
  	1,154,1,154,1,154,3,154,1864,8,154,1,155,1,155,1,155,1,156,1,156,1,156,
  	1,156,1,157,1,157,1,157,1,158,1,158,1,158,1,159,3,159,1880,8,159,1,159,
  	1,159,3,159,1884,8,159,1,160,4,160,1887,8,160,11,160,12,160,1888,1,161,
  	1,161,3,161,1893,8,161,1,162,1,162,1,162,1,162,1,162,3,162,1900,8,162,
  	1,163,1,163,3,163,1904,8,163,1,164,1,164,1,164,1,165,1,165,1,165,1,166,
  	1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,3,166,1921,8,166,1,167,
  	4,167,1924,8,167,11,167,12,167,1925,1,168,1,168,1,169,1,169,1,169,3,169,
  	1933,8,169,1,170,1,170,1,170,1,171,1,171,1,171,5,171,1941,8,171,10,171,
  	12,171,1944,9,171,1,172,1,172,1,172,1,172,1,172,3,172,1951,8,172,1,173,
  	1,173,1,173,3,173,1956,8,173,1,174,1,174,1,174,1,175,1,175,1,175,1,176,
  	1,176,1,176,1,176,1,177,1,177,3,177,1970,8,177,1,177,3,177,1973,8,177,
  	1,177,1,177,3,177,1977,8,177,1,177,3,177,1980,8,177,1,178,1,178,3,178,
  	1984,8,178,1,178,3,178,1987,8,178,1,179,1,179,1,179,1,180,3,180,1993,
  	8,180,1,180,1,180,3,180,1997,8,180,1,180,3,180,2000,8,180,1,180,1,180,
  	3,180,2004,8,180,1,181,1,181,1,181,5,181,2009,8,181,10,181,12,181,2012,
  	9,181,1,182,1,182,3,182,2016,8,182,1,183,1,183,1,183,1,184,1,184,3,184,
  	2023,8,184,1,184,1,184,3,184,2027,8,184,1,184,1,184,3,184,2031,8,184,
  	1,184,3,184,2034,8,184,1,184,3,184,2037,8,184,1,184,3,184,2040,8,184,
  	1,184,3,184,2043,8,184,1,184,3,184,2046,8,184,3,184,2048,8,184,1,185,
  	1,185,1,185,5,185,2053,8,185,10,185,12,185,2056,9,185,1,186,1,186,3,186,
  	2060,8,186,1,187,1,187,1,187,1,188,1,188,1,188,1,189,1,189,1,189,1,189,
  	3,189,2072,8,189,1,190,1,190,1,190,5,190,2077,8,190,10,190,12,190,2080,
  	9,190,1,191,1,191,1,191,1,192,1,192,1,192,1,192,3,192,2089,8,192,1,193,
  	3,193,2092,8,193,1,193,1,193,1,193,1,194,1,194,3,194,2099,8,194,1,195,
  	3,195,2102,8,195,1,195,1,195,1,196,1,196,3,196,2108,8,196,1,196,1,196,
  	1,197,1,197,1,197,5,197,2115,8,197,10,197,12,197,2118,9,197,1,198,1,198,
  	1,198,3,198,2123,8,198,1,198,1,198,3,198,2127,8,198,1,199,1,199,1,199,
  	5,199,2132,8,199,10,199,12,199,2135,9,199,1,200,1,200,1,201,1,201,1,201,
  	1,202,1,202,1,202,1,203,1,203,1,204,1,204,1,205,1,205,1,206,1,206,1,207,
  	1,207,3,207,2155,8,207,1,208,1,208,1,208,1,209,1,209,1,209,5,209,2163,
  	8,209,10,209,12,209,2166,9,209,1,209,1,209,3,209,2170,8,209,1,210,1,210,
  	3,210,2174,8,210,1,211,3,211,2177,8,211,1,211,1,211,3,211,2181,8,211,
  	1,211,3,211,2184,8,211,1,212,1,212,3,212,2188,8,212,1,213,1,213,1,213,
  	1,214,1,214,1,214,1,215,1,215,3,215,2198,8,215,1,215,3,215,2201,8,215,
  	1,216,1,216,3,216,2205,8,216,1,216,3,216,2208,8,216,1,217,1,217,1,217,
  	5,217,2213,8,217,10,217,12,217,2216,9,217,1,218,3,218,2219,8,218,1,218,
  	3,218,2222,8,218,1,218,1,218,1,219,1,219,1,219,1,220,1,220,1,220,1,221,
  	1,221,1,221,1,222,1,222,3,222,2237,8,222,1,223,1,223,3,223,2241,8,223,
  	1,224,1,224,1,225,1,225,1,225,3,225,2248,8,225,1,226,1,226,3,226,2252,
  	8,226,1,226,3,226,2255,8,226,1,227,1,227,1,228,1,228,3,228,2261,8,228,
  	1,228,3,228,2264,8,228,1,228,3,228,2267,8,228,1,229,1,229,1,230,1,230,
  	1,230,1,230,3,230,2275,8,230,1,231,1,231,1,231,3,231,2280,8,231,1,231,
  	3,231,2283,8,231,1,232,1,232,1,232,3,232,2288,8,232,1,232,3,232,2291,
  	8,232,1,233,1,233,1,233,3,233,2296,8,233,1,233,3,233,2299,8,233,1,234,
  	1,234,1,234,3,234,2304,8,234,1,234,3,234,2307,8,234,1,234,1,234,1,235,
  	1,235,1,236,1,236,1,236,3,236,2316,8,236,1,237,1,237,1,237,1,237,1,237,
  	5,237,2323,8,237,10,237,12,237,2326,9,237,1,238,1,238,1,238,1,238,1,238,
  	5,238,2333,8,238,10,238,12,238,2336,9,238,1,239,4,239,2339,8,239,11,239,
  	12,239,2340,1,240,1,240,1,240,3,240,2346,8,240,1,241,1,241,1,241,1,242,
  	1,242,1,242,1,243,1,243,1,243,3,243,2357,8,243,1,244,1,244,3,244,2361,
  	8,244,1,245,1,245,1,245,1,245,1,246,3,246,2368,8,246,1,246,3,246,2371,
  	8,246,1,246,3,246,2374,8,246,1,247,3,247,2377,8,247,1,247,1,247,1,248,
  	1,248,1,248,1,249,1,249,1,250,1,250,3,250,2388,8,250,1,251,1,251,1,251,
  	1,252,1,252,1,252,1,252,1,253,1,253,1,253,5,253,2400,8,253,10,253,12,
  	253,2403,9,253,1,254,1,254,1,254,1,254,1,255,1,255,3,255,2411,8,255,1,
  	256,1,256,1,256,1,256,1,256,1,256,1,256,3,256,2420,8,256,1,257,1,257,
  	1,257,1,257,1,257,1,257,1,257,1,258,1,258,1,258,1,258,1,258,1,258,1,259,
  	1,259,1,259,1,259,1,259,1,259,1,260,1,260,1,260,1,260,1,260,1,260,1,260,
  	1,261,1,261,1,261,1,261,1,261,1,261,1,262,1,262,1,262,1,262,1,262,1,262,
  	1,262,1,263,1,263,1,263,1,263,1,263,1,263,1,264,1,264,1,264,1,264,1,264,
  	1,264,1,264,1,264,1,264,3,264,2476,8,264,1,265,1,265,3,265,2480,8,265,
  	1,265,3,265,2483,8,265,1,265,1,265,3,265,2487,8,265,1,265,1,265,1,266,
  	1,266,1,266,1,267,1,267,1,267,1,268,1,268,1,269,1,269,1,269,5,269,2502,
  	8,269,10,269,12,269,2505,9,269,1,270,1,270,1,270,1,270,5,270,2511,8,270,
  	10,270,12,270,2514,9,270,1,271,1,271,3,271,2518,8,271,1,271,1,271,1,272,
  	1,272,1,272,3,272,2525,8,272,1,273,1,273,1,273,1,273,3,273,2531,8,273,
  	1,273,1,273,1,273,1,274,1,274,1,274,3,274,2539,8,274,1,274,1,274,1,274,
  	1,275,1,275,1,275,3,275,2547,8,275,1,275,1,275,1,275,1,276,1,276,1,276,
  	1,276,1,276,3,276,2557,8,276,1,277,1,277,1,277,1,277,1,277,1,277,1,277,
  	1,277,3,277,2567,8,277,1,278,1,278,1,278,5,278,2572,8,278,10,278,12,278,
  	2575,9,278,1,279,1,279,1,279,5,279,2580,8,279,10,279,12,279,2583,9,279,
  	1,280,3,280,2586,8,280,1,280,1,280,1,281,1,281,1,281,3,281,2593,8,281,
  	1,282,1,282,1,283,1,283,1,283,1,283,1,284,1,284,1,284,1,284,3,284,2605,
  	8,284,1,285,1,285,1,285,1,285,1,286,1,286,3,286,2613,8,286,1,286,1,286,
  	3,286,2617,8,286,1,286,1,286,1,287,1,287,1,288,1,288,1,289,1,289,1,289,
  	1,289,1,289,1,289,1,289,3,289,2632,8,289,1,290,1,290,1,290,1,290,1,290,
  	1,291,1,291,1,291,1,291,1,291,1,292,1,292,1,292,1,292,1,293,1,293,1,293,
  	1,293,1,293,1,294,1,294,1,294,1,294,1,295,1,295,1,295,1,295,1,296,1,296,
  	1,296,1,296,1,296,1,297,1,297,1,297,3,297,2669,8,297,1,298,1,298,1,298,
  	1,298,1,298,5,298,2676,8,298,10,298,12,298,2679,9,298,1,299,1,299,1,299,
  	1,299,1,299,5,299,2686,8,299,10,299,12,299,2689,9,299,1,300,4,300,2692,
  	8,300,11,300,12,300,2693,1,301,1,301,1,301,5,301,2699,8,301,10,301,12,
  	301,2702,9,301,1,302,1,302,1,302,3,302,2707,8,302,1,303,1,303,1,303,1,
  	304,1,304,1,304,1,305,1,305,3,305,2717,8,305,1,306,1,306,1,306,1,306,
  	1,306,1,306,1,306,3,306,2726,8,306,1,307,1,307,1,307,1,308,1,308,1,308,
  	1,309,1,309,1,309,1,310,1,310,1,310,1,310,1,311,1,311,1,311,1,311,1,312,
  	1,312,1,312,1,312,1,313,1,313,1,313,1,314,1,314,3,314,2754,8,314,1,315,
  	1,315,1,315,1,316,1,316,1,316,1,316,1,316,3,316,2764,8,316,1,317,1,317,
  	1,317,1,318,1,318,1,318,1,319,1,319,1,319,5,319,2775,8,319,10,319,12,
  	319,2778,9,319,1,320,1,320,3,320,2782,8,320,1,321,1,321,1,322,1,322,1,
  	322,1,323,1,323,1,323,1,323,1,324,1,324,1,324,3,324,2796,8,324,1,324,
  	3,324,2799,8,324,1,325,1,325,1,326,1,326,1,326,1,327,1,327,1,327,1,327,
  	1,328,1,328,1,328,1,328,1,328,1,328,1,328,3,328,2817,8,328,1,328,1,328,
  	1,328,1,328,1,328,1,328,3,328,2825,8,328,1,328,1,328,1,328,1,328,1,328,
  	3,328,2832,8,328,1,329,1,329,1,330,1,330,1,331,1,331,1,332,1,332,1,332,
  	5,332,2843,8,332,10,332,12,332,2846,9,332,1,333,1,333,3,333,2850,8,333,
  	1,333,3,333,2853,8,333,1,334,1,334,1,335,1,335,1,336,1,336,1,336,1,336,
  	3,336,2863,8,336,1,337,1,337,1,337,1,338,1,338,1,338,1,339,1,339,1,340,
  	1,340,1,340,1,340,1,341,1,341,1,342,1,342,1,342,5,342,2882,8,342,10,342,
  	12,342,2885,9,342,1,343,1,343,3,343,2889,8,343,1,344,1,344,1,344,3,344,
  	2894,8,344,1,345,1,345,3,345,2898,8,345,1,345,3,345,2901,8,345,1,345,
  	1,345,1,346,3,346,2906,8,346,1,346,1,346,3,346,2910,8,346,1,346,3,346,
  	2913,8,346,1,347,1,347,1,348,1,348,1,348,1,348,1,348,3,348,2922,8,348,
  	1,349,1,349,1,350,1,350,1,351,1,351,3,351,2930,8,351,1,351,1,351,3,351,
  	2934,8,351,1,352,1,352,3,352,2938,8,352,1,353,3,353,2941,8,353,1,353,
  	1,353,1,353,1,353,3,353,2947,8,353,1,353,1,353,1,353,3,353,2952,8,353,
  	1,354,1,354,1,355,1,355,1,355,1,355,1,355,3,355,2961,8,355,1,356,1,356,
  	1,357,1,357,1,358,1,358,1,358,3,358,2970,8,358,1,359,1,359,1,359,1,359,
  	1,360,1,360,1,360,1,360,1,361,1,361,1,361,1,361,1,362,1,362,1,362,1,362,
  	1,362,1,362,1,363,1,363,1,363,1,363,1,363,1,363,1,363,1,364,1,364,1,364,
  	1,364,1,364,1,364,1,365,3,365,3004,8,365,1,365,3,365,3007,8,365,1,366,
  	1,366,1,366,3,366,3012,8,366,1,367,1,367,1,367,1,367,1,368,1,368,1,368,
  	1,368,1,368,1,369,1,369,1,369,1,369,1,370,1,370,3,370,3029,8,370,1,371,
  	1,371,1,371,1,371,1,371,1,371,3,371,3037,8,371,1,371,3,371,3040,8,371,
  	1,372,1,372,1,372,1,372,1,372,1,372,3,372,3048,8,372,1,372,3,372,3051,
  	8,372,1,373,1,373,1,374,1,374,1,374,1,375,1,375,1,375,1,375,3,375,3062,
  	8,375,1,376,1,376,1,376,1,376,1,376,1,376,1,377,1,377,1,377,1,377,1,377,
  	1,377,1,377,1,378,1,378,1,378,1,378,1,378,1,378,1,379,1,379,1,380,1,380,
  	1,381,1,381,1,382,1,382,1,383,1,383,1,383,1,383,1,383,1,383,1,383,3,383,
  	3098,8,383,1,384,1,384,3,384,3102,8,384,1,384,1,384,1,385,1,385,1,385,
  	5,385,3109,8,385,10,385,12,385,3112,9,385,1,386,1,386,3,386,3116,8,386,
  	1,386,1,386,1,387,1,387,1,388,3,388,3123,8,388,1,388,1,388,1,388,1,389,
  	1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,3,389,3139,
  	8,389,1,389,3,389,3142,8,389,1,389,3,389,3145,8,389,1,389,1,389,3,389,
  	3149,8,389,1,389,3,389,3152,8,389,1,389,1,389,3,389,3156,8,389,1,389,
  	1,389,3,389,3160,8,389,1,389,3,389,3163,8,389,1,389,3,389,3166,8,389,
  	1,389,1,389,1,389,3,389,3171,8,389,1,389,1,389,3,389,3175,8,389,1,389,
  	1,389,1,389,1,389,5,389,3181,8,389,10,389,12,389,3184,9,389,1,389,1,389,
  	3,389,3188,8,389,1,389,1,389,1,389,1,389,1,389,1,389,3,389,3196,8,389,
  	1,389,3,389,3199,8,389,1,389,1,389,1,389,4,389,3204,8,389,11,389,12,389,
  	3205,5,389,3208,8,389,10,389,12,389,3211,9,389,1,390,1,390,1,391,1,391,
  	1,391,1,391,1,391,1,391,3,391,3221,8,391,1,392,1,392,3,392,3225,8,392,
  	1,393,1,393,1,393,1,393,1,393,3,393,3232,8,393,1,393,3,393,3235,8,393,
  	1,394,1,394,1,394,1,394,1,394,3,394,3242,8,394,1,394,1,394,1,394,3,394,
  	3247,8,394,1,394,3,394,3250,8,394,1,394,1,394,1,394,1,394,1,394,3,394,
  	3257,8,394,1,394,3,394,3260,8,394,1,394,1,394,1,394,1,394,1,394,3,394,
  	3267,8,394,1,394,3,394,3270,8,394,3,394,3272,8,394,1,395,1,395,1,396,
  	1,396,1,397,1,397,1,398,1,398,3,398,3282,8,398,1,399,1,399,3,399,3286,
  	8,399,1,400,1,400,3,400,3290,8,400,1,401,1,401,3,401,3294,8,401,1,401,
  	1,401,3,401,3298,8,401,1,401,1,401,3,401,3302,8,401,1,401,1,401,3,401,
  	3306,8,401,1,401,1,401,3,401,3310,8,401,1,401,1,401,3,401,3314,8,401,
  	1,401,1,401,3,401,3318,8,401,1,401,1,401,1,401,1,401,1,401,3,401,3325,
  	8,401,1,401,3,401,3328,8,401,1,401,1,401,3,401,3332,8,401,1,401,1,401,
  	3,401,3336,8,401,3,401,3338,8,401,1,402,1,402,3,402,3342,8,402,1,402,
  	1,402,3,402,3346,8,402,1,402,1,402,3,402,3350,8,402,1,402,1,402,3,402,
  	3354,8,402,1,402,1,402,3,402,3358,8,402,1,402,1,402,3,402,3362,8,402,
  	1,402,1,402,3,402,3366,8,402,1,402,1,402,1,402,1,402,1,402,3,402,3373,
  	8,402,1,402,3,402,3376,8,402,1,402,1,402,3,402,3380,8,402,1,402,1,402,
  	1,402,3,402,3385,8,402,3,402,3387,8,402,1,403,1,403,3,403,3391,8,403,
  	1,403,1,403,3,403,3395,8,403,1,403,1,403,3,403,3399,8,403,1,403,1,403,
  	3,403,3403,8,403,1,403,1,403,3,403,3407,8,403,1,403,1,403,3,403,3411,
  	8,403,1,403,1,403,1,403,3,403,3416,8,403,1,403,1,403,1,403,1,403,1,403,
  	3,403,3423,8,403,1,403,3,403,3426,8,403,1,403,1,403,1,403,3,403,3431,
  	8,403,3,403,3433,8,403,1,404,1,404,1,404,1,404,1,404,3,404,3440,8,404,
  	1,404,1,404,3,404,3444,8,404,3,404,3446,8,404,1,405,1,405,1,406,1,406,
  	1,407,1,407,3,407,3454,8,407,1,407,1,407,3,407,3458,8,407,1,407,1,407,
  	3,407,3462,8,407,1,407,1,407,3,407,3466,8,407,1,407,1,407,3,407,3470,
  	8,407,1,407,1,407,1,407,1,407,1,407,3,407,3477,8,407,1,407,1,407,3,407,
  	3481,8,407,1,407,3,407,3484,8,407,1,407,1,407,3,407,3488,8,407,1,407,
  	1,407,3,407,3492,8,407,1,407,3,407,3495,8,407,3,407,3497,8,407,1,408,
  	1,408,3,408,3501,8,408,1,409,1,409,1,409,1,409,1,409,3,409,3508,8,409,
  	1,410,1,410,1,411,1,411,1,411,3,411,3515,8,411,1,411,1,411,1,411,1,411,
  	3,411,3521,8,411,3,411,3523,8,411,1,412,1,412,1,412,3,412,3528,8,412,
  	1,412,1,412,1,412,3,412,3533,8,412,1,412,3,412,3536,8,412,3,412,3538,
  	8,412,1,413,1,413,3,413,3542,8,413,1,414,1,414,1,414,3,414,3547,8,414,
  	1,414,1,414,1,414,1,414,3,414,3553,8,414,3,414,3555,8,414,1,415,1,415,
  	1,415,3,415,3560,8,415,1,415,1,415,1,415,1,415,3,415,3566,8,415,3,415,
  	3568,8,415,1,416,1,416,3,416,3572,8,416,1,417,1,417,1,417,1,417,3,417,
  	3578,8,417,1,418,1,418,3,418,3582,8,418,1,419,3,419,3585,8,419,1,419,
  	1,419,1,419,3,419,3590,8,419,1,420,1,420,3,420,3594,8,420,1,420,1,420,
  	3,420,3598,8,420,1,421,1,421,3,421,3602,8,421,1,422,1,422,3,422,3606,
  	8,422,1,423,1,423,3,423,3610,8,423,1,424,3,424,3613,8,424,1,424,1,424,
  	3,424,3617,8,424,1,425,1,425,3,425,3621,8,425,1,426,1,426,3,426,3625,
  	8,426,1,427,3,427,3628,8,427,1,427,1,427,3,427,3632,8,427,1,428,3,428,
  	3635,8,428,1,428,1,428,1,429,1,429,1,430,1,430,3,430,3643,8,430,1,430,
  	1,430,1,431,1,431,1,431,5,431,3650,8,431,10,431,12,431,3653,9,431,1,432,
  	1,432,3,432,3657,8,432,1,433,1,433,1,433,1,434,1,434,3,434,3664,8,434,
  	1,434,1,434,1,435,1,435,1,435,3,435,3671,8,435,1,436,1,436,1,436,1,436,
  	3,436,3677,8,436,1,437,1,437,1,437,1,438,1,438,1,438,1,438,3,438,3686,
  	8,438,1,439,1,439,1,440,1,440,3,440,3692,8,440,1,441,1,441,1,441,5,441,
  	3697,8,441,10,441,12,441,3700,9,441,1,441,1,441,3,441,3704,8,441,3,441,
  	3706,8,441,1,442,1,442,1,442,4,442,3711,8,442,11,442,12,442,3712,1,443,
  	1,443,1,443,1,443,1,443,1,443,3,443,3721,8,443,1,444,3,444,3724,8,444,
  	1,444,1,444,1,445,1,445,1,446,1,446,3,446,3732,8,446,1,447,3,447,3735,
  	8,447,1,447,1,447,1,448,1,448,1,448,1,448,1,448,3,448,3744,8,448,1,449,
  	3,449,3747,8,449,1,449,1,449,1,450,1,450,3,450,3753,8,450,1,451,3,451,
  	3756,8,451,1,451,1,451,1,452,1,452,3,452,3762,8,452,1,452,1,452,1,452,
  	5,452,3767,8,452,10,452,12,452,3770,9,452,1,452,1,452,1,452,4,452,3775,
  	8,452,11,452,12,452,3776,3,452,3779,8,452,1,453,1,453,1,454,1,454,1,455,
  	1,455,1,455,1,456,1,456,1,457,1,457,3,457,3792,8,457,1,457,1,457,1,458,
  	1,458,3,458,3798,8,458,1,458,3,458,3801,8,458,1,458,1,458,1,459,1,459,
  	3,459,3807,8,459,1,459,1,459,1,460,1,460,3,460,3813,8,460,1,460,1,460,
  	3,460,3817,8,460,1,460,1,460,1,461,1,461,3,461,3823,8,461,1,461,1,461,
  	1,461,1,461,1,462,1,462,3,462,3831,8,462,1,463,1,463,3,463,3835,8,463,
  	1,464,1,464,3,464,3839,8,464,1,465,1,465,1,466,1,466,1,466,1,466,3,466,
  	3847,8,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,5,466,
  	3858,8,466,10,466,12,466,3861,9,466,1,467,1,467,1,467,1,467,1,467,1,467,
  	1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,
  	1,467,3,467,3882,8,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,
  	1,467,1,467,1,467,1,467,1,467,1,467,4,467,3898,8,467,11,467,12,467,3899,
  	1,467,1,467,1,467,1,467,1,467,1,467,1,467,4,467,3909,8,467,11,467,12,
  	467,3910,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,
  	3,467,3923,8,467,1,467,1,467,1,467,3,467,3928,8,467,1,467,1,467,1,467,
  	1,467,1,467,1,467,1,467,1,467,1,467,3,467,3939,8,467,1,467,1,467,1,467,
  	1,467,1,467,1,467,1,467,3,467,3948,8,467,1,467,1,467,1,467,1,467,1,467,
  	5,467,3955,8,467,10,467,12,467,3958,9,467,1,468,1,468,1,468,1,468,1,468,
  	1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,3,468,3975,
  	8,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,
  	1,468,5,468,3989,8,468,10,468,12,468,3992,9,468,1,469,1,469,1,470,1,470,
  	1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,471,3,471,4007,8,471,
  	1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,
  	3,472,4021,8,472,1,473,1,473,1,473,1,473,1,473,3,473,4028,8,473,1,474,
  	1,474,1,474,1,474,1,475,1,475,1,476,1,476,1,477,1,477,1,477,1,477,1,477,
  	1,477,1,477,1,477,1,477,1,477,1,477,1,477,1,477,1,477,1,477,3,477,4053,
  	8,477,1,477,3,477,4056,8,477,1,477,3,477,4059,8,477,1,477,1,477,1,477,
  	1,477,1,477,1,477,1,477,1,477,3,477,4069,8,477,1,477,1,477,1,477,1,477,
  	1,477,1,477,1,477,3,477,4078,8,477,1,477,1,477,3,477,4082,8,477,1,478,
  	1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,3,478,
  	4096,8,478,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,
  	1,479,1,479,4,479,4110,8,479,11,479,12,479,4111,1,479,1,479,1,479,1,479,
  	1,479,4,479,4119,8,479,11,479,12,479,4120,1,479,3,479,4124,8,479,1,479,
  	1,479,1,479,1,479,4,479,4130,8,479,11,479,12,479,4131,1,479,3,479,4135,
  	8,479,1,479,1,479,3,479,4139,8,479,1,480,1,480,1,480,1,480,5,480,4145,
  	8,480,10,480,12,480,4148,9,480,1,480,1,480,1,480,1,481,1,481,1,481,1,
  	481,1,481,1,482,1,482,1,482,1,483,1,483,1,483,1,483,1,483,1,483,3,483,
  	4167,8,483,1,484,1,484,1,484,1,484,1,484,1,484,1,484,1,485,1,485,1,485,
  	1,485,1,485,1,486,1,486,1,486,1,486,1,486,3,486,4186,8,486,1,487,1,487,
  	1,487,1,487,3,487,4192,8,487,1,487,3,487,4195,8,487,1,488,1,488,1,488,
  	1,488,3,488,4201,8,488,1,488,3,488,4204,8,488,1,489,1,489,1,489,3,489,
  	4209,8,489,1,489,3,489,4212,8,489,1,490,1,490,1,490,1,490,3,490,4218,
  	8,490,1,490,3,490,4221,8,490,1,491,1,491,1,491,1,491,3,491,4227,8,491,
  	1,491,3,491,4230,8,491,1,492,1,492,3,492,4234,8,492,1,493,1,493,3,493,
  	4238,8,493,1,494,1,494,3,494,4242,8,494,1,495,1,495,1,496,1,496,1,497,
  	1,497,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,1,498,
  	1,498,3,498,4262,8,498,1,499,1,499,3,499,4266,8,499,1,500,1,500,1,501,
  	1,501,1,501,3,501,4273,8,501,1,501,1,501,1,502,1,502,1,502,3,502,4280,
  	8,502,1,503,1,503,1,504,1,504,1,505,3,505,4287,8,505,1,505,1,505,1,505,
  	1,505,5,505,4293,8,505,10,505,12,505,4296,9,505,3,505,4298,8,505,1,505,
  	1,505,1,506,3,506,4303,8,506,1,506,1,506,1,506,1,506,5,506,4309,8,506,
  	10,506,12,506,4312,9,506,3,506,4314,8,506,1,506,1,506,1,507,1,507,1,507,
  	1,507,1,508,1,508,1,508,1,508,1,508,1,508,1,508,1,508,5,508,4330,8,508,
  	10,508,12,508,4333,9,508,1,508,1,508,1,509,1,509,3,509,4339,8,509,1,510,
  	1,510,1,510,3,510,4344,8,510,1,511,3,511,4347,8,511,1,511,1,511,1,511,
  	1,511,5,511,4353,8,511,10,511,12,511,4356,9,511,3,511,4358,8,511,1,511,
  	1,511,1,512,3,512,4363,8,512,1,512,1,512,1,512,1,512,5,512,4369,8,512,
  	10,512,12,512,4372,9,512,3,512,4374,8,512,1,512,1,512,1,513,1,513,1,513,
  	1,513,1,514,1,514,1,514,0,5,298,778,932,934,936,515,0,2,4,6,8,10,12,14,
  	16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
  	62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
  	106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
  	142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
  	178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,
  	214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
  	250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,
  	286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,
  	322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,
  	358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,
  	394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,
  	430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,
  	466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,
  	502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,
  	538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,
  	574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,
  	610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,
  	646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,
  	682,684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,
  	718,720,722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,
  	754,756,758,760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,
  	790,792,794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,
  	826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,
  	862,864,866,868,870,872,874,876,878,880,882,884,886,888,890,892,894,896,
  	898,900,902,904,906,908,910,912,914,916,918,920,922,924,926,928,930,932,
  	934,936,938,940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,
  	970,972,974,976,978,980,982,984,986,988,990,992,994,996,998,1000,1002,
  	1004,1006,1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,0,41,
  	2,0,62,62,199,199,1,0,329,332,1,0,333,334,2,0,82,82,247,247,1,0,288,291,
  	3,0,106,106,254,254,267,267,1,0,75,76,2,0,90,90,180,180,2,0,189,189,196,
  	196,4,0,30,30,229,229,250,250,276,276,2,0,200,200,202,202,1,0,120,121,
  	2,0,4,4,149,149,6,0,42,42,65,65,72,72,171,172,237,238,240,240,2,0,31,
  	31,93,93,1,0,203,204,2,0,37,38,87,88,1,0,189,190,2,0,92,92,265,265,2,
  	0,249,249,310,310,2,0,25,25,249,249,2,0,256,256,301,301,1,0,48,49,2,0,
  	239,239,274,274,1,0,83,84,2,0,35,35,160,160,3,0,16,16,77,77,125,125,1,
  	0,123,124,6,0,7,7,9,9,13,13,303,303,307,307,309,309,2,0,89,89,234,234,
  	2,0,2,2,24,24,2,0,14,14,17,17,3,0,8,8,14,14,17,17,17,0,28,29,39,39,41,
  	41,53,53,58,61,69,71,85,85,105,105,116,116,161,161,167,167,187,187,201,
  	201,210,210,230,231,235,235,242,243,3,0,166,166,173,173,205,205,2,0,156,
  	156,221,221,2,0,168,168,269,269,3,0,51,51,169,169,220,220,3,0,50,50,155,
  	155,251,251,1,0,175,178,2,0,28,295,297,297,4552,0,1030,1,0,0,0,2,1041,
  	1,0,0,0,4,1045,1,0,0,0,6,1048,1,0,0,0,8,1054,1,0,0,0,10,1068,1,0,0,0,
  	12,1072,1,0,0,0,14,1074,1,0,0,0,16,1082,1,0,0,0,18,1086,1,0,0,0,20,1091,
  	1,0,0,0,22,1095,1,0,0,0,24,1100,1,0,0,0,26,1103,1,0,0,0,28,1110,1,0,0,
  	0,30,1116,1,0,0,0,32,1123,1,0,0,0,34,1127,1,0,0,0,36,1147,1,0,0,0,38,
  	1149,1,0,0,0,40,1152,1,0,0,0,42,1157,1,0,0,0,44,1167,1,0,0,0,46,1173,
  	1,0,0,0,48,1175,1,0,0,0,50,1177,1,0,0,0,52,1179,1,0,0,0,54,1181,1,0,0,
  	0,56,1185,1,0,0,0,58,1187,1,0,0,0,60,1189,1,0,0,0,62,1193,1,0,0,0,64,
  	1195,1,0,0,0,66,1199,1,0,0,0,68,1203,1,0,0,0,70,1205,1,0,0,0,72,1207,
  	1,0,0,0,74,1209,1,0,0,0,76,1211,1,0,0,0,78,1213,1,0,0,0,80,1215,1,0,0,
  	0,82,1223,1,0,0,0,84,1231,1,0,0,0,86,1241,1,0,0,0,88,1243,1,0,0,0,90,
  	1249,1,0,0,0,92,1293,1,0,0,0,94,1295,1,0,0,0,96,1298,1,0,0,0,98,1301,
  	1,0,0,0,100,1307,1,0,0,0,102,1309,1,0,0,0,104,1312,1,0,0,0,106,1316,1,
  	0,0,0,108,1320,1,0,0,0,110,1324,1,0,0,0,112,1326,1,0,0,0,114,1328,1,0,
  	0,0,116,1330,1,0,0,0,118,1334,1,0,0,0,120,1336,1,0,0,0,122,1338,1,0,0,
  	0,124,1340,1,0,0,0,126,1344,1,0,0,0,128,1346,1,0,0,0,130,1350,1,0,0,0,
  	132,1354,1,0,0,0,134,1356,1,0,0,0,136,1360,1,0,0,0,138,1364,1,0,0,0,140,
  	1366,1,0,0,0,142,1371,1,0,0,0,144,1373,1,0,0,0,146,1377,1,0,0,0,148,1381,
  	1,0,0,0,150,1383,1,0,0,0,152,1385,1,0,0,0,154,1387,1,0,0,0,156,1389,1,
  	0,0,0,158,1391,1,0,0,0,160,1395,1,0,0,0,162,1403,1,0,0,0,164,1405,1,0,
  	0,0,166,1409,1,0,0,0,168,1411,1,0,0,0,170,1414,1,0,0,0,172,1422,1,0,0,
  	0,174,1429,1,0,0,0,176,1431,1,0,0,0,178,1441,1,0,0,0,180,1443,1,0,0,0,
  	182,1450,1,0,0,0,184,1460,1,0,0,0,186,1464,1,0,0,0,188,1468,1,0,0,0,190,
  	1478,1,0,0,0,192,1482,1,0,0,0,194,1485,1,0,0,0,196,1493,1,0,0,0,198,1503,
  	1,0,0,0,200,1505,1,0,0,0,202,1507,1,0,0,0,204,1513,1,0,0,0,206,1515,1,
  	0,0,0,208,1524,1,0,0,0,210,1527,1,0,0,0,212,1533,1,0,0,0,214,1541,1,0,
  	0,0,216,1543,1,0,0,0,218,1552,1,0,0,0,220,1560,1,0,0,0,222,1587,1,0,0,
  	0,224,1611,1,0,0,0,226,1613,1,0,0,0,228,1616,1,0,0,0,230,1621,1,0,0,0,
  	232,1632,1,0,0,0,234,1664,1,0,0,0,236,1666,1,0,0,0,238,1672,1,0,0,0,240,
  	1684,1,0,0,0,242,1688,1,0,0,0,244,1692,1,0,0,0,246,1694,1,0,0,0,248,1699,
  	1,0,0,0,250,1704,1,0,0,0,252,1706,1,0,0,0,254,1711,1,0,0,0,256,1717,1,
  	0,0,0,258,1721,1,0,0,0,260,1727,1,0,0,0,262,1729,1,0,0,0,264,1732,1,0,
  	0,0,266,1735,1,0,0,0,268,1746,1,0,0,0,270,1748,1,0,0,0,272,1754,1,0,0,
  	0,274,1762,1,0,0,0,276,1766,1,0,0,0,278,1774,1,0,0,0,280,1777,1,0,0,0,
  	282,1787,1,0,0,0,284,1789,1,0,0,0,286,1793,1,0,0,0,288,1798,1,0,0,0,290,
  	1803,1,0,0,0,292,1811,1,0,0,0,294,1813,1,0,0,0,296,1815,1,0,0,0,298,1817,
  	1,0,0,0,300,1831,1,0,0,0,302,1845,1,0,0,0,304,1847,1,0,0,0,306,1851,1,
  	0,0,0,308,1863,1,0,0,0,310,1865,1,0,0,0,312,1868,1,0,0,0,314,1872,1,0,
  	0,0,316,1875,1,0,0,0,318,1883,1,0,0,0,320,1886,1,0,0,0,322,1892,1,0,0,
  	0,324,1899,1,0,0,0,326,1903,1,0,0,0,328,1905,1,0,0,0,330,1908,1,0,0,0,
  	332,1920,1,0,0,0,334,1923,1,0,0,0,336,1927,1,0,0,0,338,1929,1,0,0,0,340,
  	1934,1,0,0,0,342,1937,1,0,0,0,344,1950,1,0,0,0,346,1952,1,0,0,0,348,1957,
  	1,0,0,0,350,1960,1,0,0,0,352,1963,1,0,0,0,354,1979,1,0,0,0,356,1986,1,
  	0,0,0,358,1988,1,0,0,0,360,2003,1,0,0,0,362,2005,1,0,0,0,364,2013,1,0,
  	0,0,366,2017,1,0,0,0,368,2020,1,0,0,0,370,2049,1,0,0,0,372,2057,1,0,0,
  	0,374,2061,1,0,0,0,376,2064,1,0,0,0,378,2071,1,0,0,0,380,2073,1,0,0,0,
  	382,2081,1,0,0,0,384,2088,1,0,0,0,386,2091,1,0,0,0,388,2098,1,0,0,0,390,
  	2101,1,0,0,0,392,2105,1,0,0,0,394,2111,1,0,0,0,396,2119,1,0,0,0,398,2128,
  	1,0,0,0,400,2136,1,0,0,0,402,2138,1,0,0,0,404,2141,1,0,0,0,406,2144,1,
  	0,0,0,408,2146,1,0,0,0,410,2148,1,0,0,0,412,2150,1,0,0,0,414,2152,1,0,
  	0,0,416,2156,1,0,0,0,418,2169,1,0,0,0,420,2173,1,0,0,0,422,2176,1,0,0,
  	0,424,2187,1,0,0,0,426,2189,1,0,0,0,428,2192,1,0,0,0,430,2200,1,0,0,0,
  	432,2207,1,0,0,0,434,2209,1,0,0,0,436,2218,1,0,0,0,438,2225,1,0,0,0,440,
  	2228,1,0,0,0,442,2231,1,0,0,0,444,2236,1,0,0,0,446,2238,1,0,0,0,448,2242,
  	1,0,0,0,450,2247,1,0,0,0,452,2249,1,0,0,0,454,2256,1,0,0,0,456,2258,1,
  	0,0,0,458,2268,1,0,0,0,460,2274,1,0,0,0,462,2276,1,0,0,0,464,2284,1,0,
  	0,0,466,2292,1,0,0,0,468,2300,1,0,0,0,470,2310,1,0,0,0,472,2315,1,0,0,
  	0,474,2317,1,0,0,0,476,2327,1,0,0,0,478,2338,1,0,0,0,480,2345,1,0,0,0,
  	482,2347,1,0,0,0,484,2350,1,0,0,0,486,2356,1,0,0,0,488,2360,1,0,0,0,490,
  	2362,1,0,0,0,492,2367,1,0,0,0,494,2376,1,0,0,0,496,2380,1,0,0,0,498,2383,
  	1,0,0,0,500,2387,1,0,0,0,502,2389,1,0,0,0,504,2392,1,0,0,0,506,2396,1,
  	0,0,0,508,2404,1,0,0,0,510,2410,1,0,0,0,512,2419,1,0,0,0,514,2421,1,0,
  	0,0,516,2428,1,0,0,0,518,2434,1,0,0,0,520,2440,1,0,0,0,522,2447,1,0,0,
  	0,524,2453,1,0,0,0,526,2460,1,0,0,0,528,2475,1,0,0,0,530,2477,1,0,0,0,
  	532,2490,1,0,0,0,534,2493,1,0,0,0,536,2496,1,0,0,0,538,2498,1,0,0,0,540,
  	2506,1,0,0,0,542,2515,1,0,0,0,544,2524,1,0,0,0,546,2526,1,0,0,0,548,2535,
  	1,0,0,0,550,2543,1,0,0,0,552,2556,1,0,0,0,554,2566,1,0,0,0,556,2568,1,
  	0,0,0,558,2576,1,0,0,0,560,2585,1,0,0,0,562,2592,1,0,0,0,564,2594,1,0,
  	0,0,566,2596,1,0,0,0,568,2604,1,0,0,0,570,2606,1,0,0,0,572,2610,1,0,0,
  	0,574,2620,1,0,0,0,576,2622,1,0,0,0,578,2631,1,0,0,0,580,2633,1,0,0,0,
  	582,2638,1,0,0,0,584,2643,1,0,0,0,586,2647,1,0,0,0,588,2652,1,0,0,0,590,
  	2656,1,0,0,0,592,2660,1,0,0,0,594,2668,1,0,0,0,596,2670,1,0,0,0,598,2680,
  	1,0,0,0,600,2691,1,0,0,0,602,2695,1,0,0,0,604,2706,1,0,0,0,606,2708,1,
  	0,0,0,608,2711,1,0,0,0,610,2716,1,0,0,0,612,2725,1,0,0,0,614,2727,1,0,
  	0,0,616,2730,1,0,0,0,618,2733,1,0,0,0,620,2736,1,0,0,0,622,2740,1,0,0,
  	0,624,2744,1,0,0,0,626,2748,1,0,0,0,628,2753,1,0,0,0,630,2755,1,0,0,0,
  	632,2763,1,0,0,0,634,2765,1,0,0,0,636,2768,1,0,0,0,638,2771,1,0,0,0,640,
  	2779,1,0,0,0,642,2783,1,0,0,0,644,2785,1,0,0,0,646,2788,1,0,0,0,648,2798,
  	1,0,0,0,650,2800,1,0,0,0,652,2802,1,0,0,0,654,2805,1,0,0,0,656,2831,1,
  	0,0,0,658,2833,1,0,0,0,660,2835,1,0,0,0,662,2837,1,0,0,0,664,2839,1,0,
  	0,0,666,2847,1,0,0,0,668,2854,1,0,0,0,670,2856,1,0,0,0,672,2862,1,0,0,
  	0,674,2864,1,0,0,0,676,2867,1,0,0,0,678,2870,1,0,0,0,680,2872,1,0,0,0,
  	682,2876,1,0,0,0,684,2878,1,0,0,0,686,2888,1,0,0,0,688,2893,1,0,0,0,690,
  	2895,1,0,0,0,692,2912,1,0,0,0,694,2914,1,0,0,0,696,2921,1,0,0,0,698,2923,
  	1,0,0,0,700,2925,1,0,0,0,702,2933,1,0,0,0,704,2937,1,0,0,0,706,2951,1,
  	0,0,0,708,2953,1,0,0,0,710,2960,1,0,0,0,712,2962,1,0,0,0,714,2964,1,0,
  	0,0,716,2969,1,0,0,0,718,2971,1,0,0,0,720,2975,1,0,0,0,722,2979,1,0,0,
  	0,724,2983,1,0,0,0,726,2989,1,0,0,0,728,2996,1,0,0,0,730,3003,1,0,0,0,
  	732,3011,1,0,0,0,734,3013,1,0,0,0,736,3017,1,0,0,0,738,3022,1,0,0,0,740,
  	3028,1,0,0,0,742,3039,1,0,0,0,744,3050,1,0,0,0,746,3052,1,0,0,0,748,3054,
  	1,0,0,0,750,3061,1,0,0,0,752,3063,1,0,0,0,754,3069,1,0,0,0,756,3076,1,
  	0,0,0,758,3082,1,0,0,0,760,3084,1,0,0,0,762,3086,1,0,0,0,764,3088,1,0,
  	0,0,766,3097,1,0,0,0,768,3099,1,0,0,0,770,3105,1,0,0,0,772,3113,1,0,0,
  	0,774,3119,1,0,0,0,776,3122,1,0,0,0,778,3187,1,0,0,0,780,3212,1,0,0,0,
  	782,3220,1,0,0,0,784,3222,1,0,0,0,786,3226,1,0,0,0,788,3271,1,0,0,0,790,
  	3273,1,0,0,0,792,3275,1,0,0,0,794,3277,1,0,0,0,796,3281,1,0,0,0,798,3285,
  	1,0,0,0,800,3289,1,0,0,0,802,3337,1,0,0,0,804,3386,1,0,0,0,806,3432,1,
  	0,0,0,808,3434,1,0,0,0,810,3447,1,0,0,0,812,3449,1,0,0,0,814,3496,1,0,
  	0,0,816,3500,1,0,0,0,818,3507,1,0,0,0,820,3509,1,0,0,0,822,3522,1,0,0,
  	0,824,3537,1,0,0,0,826,3539,1,0,0,0,828,3554,1,0,0,0,830,3567,1,0,0,0,
  	832,3569,1,0,0,0,834,3577,1,0,0,0,836,3581,1,0,0,0,838,3584,1,0,0,0,840,
  	3591,1,0,0,0,842,3599,1,0,0,0,844,3605,1,0,0,0,846,3607,1,0,0,0,848,3612,
  	1,0,0,0,850,3620,1,0,0,0,852,3622,1,0,0,0,854,3627,1,0,0,0,856,3634,1,
  	0,0,0,858,3638,1,0,0,0,860,3640,1,0,0,0,862,3646,1,0,0,0,864,3654,1,0,
  	0,0,866,3658,1,0,0,0,868,3661,1,0,0,0,870,3670,1,0,0,0,872,3676,1,0,0,
  	0,874,3678,1,0,0,0,876,3685,1,0,0,0,878,3687,1,0,0,0,880,3689,1,0,0,0,
  	882,3693,1,0,0,0,884,3710,1,0,0,0,886,3720,1,0,0,0,888,3723,1,0,0,0,890,
  	3727,1,0,0,0,892,3731,1,0,0,0,894,3734,1,0,0,0,896,3743,1,0,0,0,898,3746,
  	1,0,0,0,900,3752,1,0,0,0,902,3755,1,0,0,0,904,3778,1,0,0,0,906,3780,1,
  	0,0,0,908,3782,1,0,0,0,910,3784,1,0,0,0,912,3787,1,0,0,0,914,3789,1,0,
  	0,0,916,3795,1,0,0,0,918,3804,1,0,0,0,920,3816,1,0,0,0,922,3820,1,0,0,
  	0,924,3830,1,0,0,0,926,3834,1,0,0,0,928,3838,1,0,0,0,930,3840,1,0,0,0,
  	932,3846,1,0,0,0,934,3938,1,0,0,0,936,3974,1,0,0,0,938,3993,1,0,0,0,940,
  	3995,1,0,0,0,942,4006,1,0,0,0,944,4020,1,0,0,0,946,4027,1,0,0,0,948,4029,
  	1,0,0,0,950,4033,1,0,0,0,952,4035,1,0,0,0,954,4081,1,0,0,0,956,4095,1,
  	0,0,0,958,4138,1,0,0,0,960,4140,1,0,0,0,962,4152,1,0,0,0,964,4157,1,0,
  	0,0,966,4166,1,0,0,0,968,4168,1,0,0,0,970,4175,1,0,0,0,972,4185,1,0,0,
  	0,974,4194,1,0,0,0,976,4203,1,0,0,0,978,4205,1,0,0,0,980,4220,1,0,0,0,
  	982,4229,1,0,0,0,984,4233,1,0,0,0,986,4237,1,0,0,0,988,4241,1,0,0,0,990,
  	4243,1,0,0,0,992,4245,1,0,0,0,994,4247,1,0,0,0,996,4261,1,0,0,0,998,4265,
  	1,0,0,0,1000,4267,1,0,0,0,1002,4269,1,0,0,0,1004,4279,1,0,0,0,1006,4281,
  	1,0,0,0,1008,4283,1,0,0,0,1010,4286,1,0,0,0,1012,4302,1,0,0,0,1014,4317,
  	1,0,0,0,1016,4321,1,0,0,0,1018,4338,1,0,0,0,1020,4343,1,0,0,0,1022,4346,
  	1,0,0,0,1024,4362,1,0,0,0,1026,4377,1,0,0,0,1028,4381,1,0,0,0,1030,1032,
  	3,2,1,0,1031,1033,5,23,0,0,1032,1031,1,0,0,0,1032,1033,1,0,0,0,1033,1034,
  	1,0,0,0,1034,1035,5,0,0,1,1035,1,1,0,0,0,1036,1038,3,4,2,0,1037,1039,
  	3,38,19,0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,1042,1,0,0,0,1040,
  	1042,3,38,19,0,1041,1036,1,0,0,0,1041,1040,1,0,0,0,1042,3,1,0,0,0,1043,
  	1046,3,6,3,0,1044,1046,3,10,5,0,1045,1043,1,0,0,0,1045,1044,1,0,0,0,1046,
  	5,1,0,0,0,1047,1049,3,8,4,0,1048,1047,1,0,0,0,1049,1050,1,0,0,0,1050,
  	1048,1,0,0,0,1050,1051,1,0,0,0,1051,7,1,0,0,0,1052,1055,3,14,7,0,1053,
  	1055,3,34,17,0,1054,1052,1,0,0,0,1054,1053,1,0,0,0,1055,9,1,0,0,0,1056,
  	1061,3,40,20,0,1057,1059,3,56,28,0,1058,1060,3,12,6,0,1059,1058,1,0,0,
  	0,1059,1060,1,0,0,0,1060,1062,1,0,0,0,1061,1057,1,0,0,0,1061,1062,1,0,
  	0,0,1062,1069,1,0,0,0,1063,1065,3,56,28,0,1064,1066,3,12,6,0,1065,1064,
  	1,0,0,0,1065,1066,1,0,0,0,1066,1069,1,0,0,0,1067,1069,3,12,6,0,1068,1056,
  	1,0,0,0,1068,1063,1,0,0,0,1068,1067,1,0,0,0,1069,11,1,0,0,0,1070,1073,
  	3,50,25,0,1071,1073,3,52,26,0,1072,1070,1,0,0,0,1072,1071,1,0,0,0,1073,
  	13,1,0,0,0,1074,1075,5,225,0,0,1075,1080,5,226,0,0,1076,1081,3,16,8,0,
  	1077,1081,3,18,9,0,1078,1081,3,20,10,0,1079,1081,3,24,12,0,1080,1076,
  	1,0,0,0,1080,1077,1,0,0,0,1080,1078,1,0,0,0,1080,1079,1,0,0,0,1081,15,
  	1,0,0,0,1082,1083,5,223,0,0,1083,1084,3,870,435,0,1084,17,1,0,0,0,1085,
  	1087,5,208,0,0,1086,1085,1,0,0,0,1086,1087,1,0,0,0,1087,1088,1,0,0,0,
  	1088,1089,5,119,0,0,1089,1090,3,198,99,0,1090,19,1,0,0,0,1091,1092,5,
  	246,0,0,1092,1093,5,284,0,0,1093,1094,3,22,11,0,1094,21,1,0,0,0,1095,
  	1096,3,936,468,0,1096,23,1,0,0,0,1097,1101,3,26,13,0,1098,1101,3,28,14,
  	0,1099,1101,3,30,15,0,1100,1097,1,0,0,0,1100,1098,1,0,0,0,1100,1099,1,
  	0,0,0,1101,25,1,0,0,0,1102,1104,5,208,0,0,1103,1102,1,0,0,0,1103,1104,
  	1,0,0,0,1104,1105,1,0,0,0,1105,1106,5,119,0,0,1106,1107,3,32,16,0,1107,
  	1108,3,184,92,0,1108,27,1,0,0,0,1109,1111,5,46,0,0,1110,1109,1,0,0,0,
  	1110,1111,1,0,0,0,1111,1112,1,0,0,0,1112,1113,5,241,0,0,1113,1114,3,32,
  	16,0,1114,1115,3,190,95,0,1115,29,1,0,0,0,1116,1117,5,272,0,0,1117,1118,
  	3,32,16,0,1118,1119,3,196,98,0,1119,31,1,0,0,0,1120,1121,5,131,0,0,1121,
  	1122,5,183,0,0,1122,1124,5,104,0,0,1123,1120,1,0,0,0,1123,1124,1,0,0,
  	0,1124,1125,1,0,0,0,1125,1126,3,140,70,0,1126,33,1,0,0,0,1127,1128,5,
  	225,0,0,1128,1130,5,217,0,0,1129,1131,3,36,18,0,1130,1129,1,0,0,0,1130,
  	1131,1,0,0,0,1131,35,1,0,0,0,1132,1134,5,31,0,0,1133,1132,1,0,0,0,1133,
  	1134,1,0,0,0,1134,1135,1,0,0,0,1135,1148,7,0,0,0,1136,1148,5,223,0,0,
  	1137,1139,5,208,0,0,1138,1137,1,0,0,0,1138,1139,1,0,0,0,1139,1140,1,0,
  	0,0,1140,1148,5,119,0,0,1141,1142,5,246,0,0,1142,1148,5,284,0,0,1143,
  	1145,5,198,0,0,1144,1143,1,0,0,0,1144,1145,1,0,0,0,1145,1146,1,0,0,0,
  	1146,1148,3,140,70,0,1147,1133,1,0,0,0,1147,1136,1,0,0,0,1147,1138,1,
  	0,0,0,1147,1141,1,0,0,0,1147,1144,1,0,0,0,1148,37,1,0,0,0,1149,1150,5,
  	225,0,0,1150,1151,5,63,0,0,1151,39,1,0,0,0,1152,1153,5,236,0,0,1153,1155,
  	5,252,0,0,1154,1156,3,42,21,0,1155,1154,1,0,0,0,1155,1156,1,0,0,0,1156,
  	41,1,0,0,0,1157,1162,3,44,22,0,1158,1159,5,5,0,0,1159,1161,3,44,22,0,
  	1160,1158,1,0,0,0,1161,1164,1,0,0,0,1162,1160,1,0,0,0,1162,1163,1,0,0,
  	0,1163,43,1,0,0,0,1164,1162,1,0,0,0,1165,1168,3,46,23,0,1166,1168,3,48,
  	24,0,1167,1165,1,0,0,0,1167,1166,1,0,0,0,1168,45,1,0,0,0,1169,1170,5,
  	211,0,0,1170,1174,5,191,0,0,1171,1172,5,211,0,0,1172,1174,5,281,0,0,1173,
  	1169,1,0,0,0,1173,1171,1,0,0,0,1174,47,1,0,0,0,1175,1176,5,126,0,0,1176,
  	49,1,0,0,0,1177,1178,5,219,0,0,1178,51,1,0,0,0,1179,1180,5,66,0,0,1180,
  	53,1,0,0,0,1181,1182,5,10,0,0,1182,1183,3,56,28,0,1183,1184,5,20,0,0,
  	1184,55,1,0,0,0,1185,1186,3,170,85,0,1186,57,1,0,0,0,1187,1188,3,170,
  	85,0,1188,59,1,0,0,0,1189,1190,5,10,0,0,1190,1191,3,62,31,0,1191,1192,
  	5,20,0,0,1192,61,1,0,0,0,1193,1194,3,170,85,0,1194,63,1,0,0,0,1195,1196,
  	5,10,0,0,1196,1197,3,56,28,0,1197,1198,5,20,0,0,1198,65,1,0,0,0,1199,
  	1200,3,170,85,0,1200,67,1,0,0,0,1201,1204,3,70,35,0,1202,1204,3,72,36,
  	0,1203,1201,1,0,0,0,1203,1202,1,0,0,0,1204,69,1,0,0,0,1205,1206,7,1,0,
  	0,1206,71,1,0,0,0,1207,1208,7,2,0,0,1208,73,1,0,0,0,1209,1210,5,337,0,
  	0,1210,75,1,0,0,0,1211,1212,5,338,0,0,1212,77,1,0,0,0,1213,1214,5,339,
  	0,0,1214,79,1,0,0,0,1215,1220,3,74,37,0,1216,1217,5,27,0,0,1217,1219,
  	3,74,37,0,1218,1216,1,0,0,0,1219,1222,1,0,0,0,1220,1218,1,0,0,0,1220,
  	1221,1,0,0,0,1221,81,1,0,0,0,1222,1220,1,0,0,0,1223,1228,3,76,38,0,1224,
  	1225,5,27,0,0,1225,1227,3,76,38,0,1226,1224,1,0,0,0,1227,1230,1,0,0,0,
  	1228,1226,1,0,0,0,1228,1229,1,0,0,0,1229,83,1,0,0,0,1230,1228,1,0,0,0,
  	1231,1236,3,78,39,0,1232,1233,5,27,0,0,1233,1235,3,78,39,0,1234,1232,
  	1,0,0,0,1235,1238,1,0,0,0,1236,1234,1,0,0,0,1236,1237,1,0,0,0,1237,85,
  	1,0,0,0,1238,1236,1,0,0,0,1239,1242,3,74,37,0,1240,1242,3,76,38,0,1241,
  	1239,1,0,0,0,1241,1240,1,0,0,0,1242,87,1,0,0,0,1243,1244,5,184,0,0,1244,
  	89,1,0,0,0,1245,1250,3,94,47,0,1246,1250,3,96,48,0,1247,1250,3,98,49,
  	0,1248,1250,3,92,46,0,1249,1245,1,0,0,0,1249,1246,1,0,0,0,1249,1247,1,
  	0,0,0,1249,1248,1,0,0,0,1250,91,1,0,0,0,1251,1252,5,81,0,0,1252,1253,
  	5,341,0,0,1253,1254,5,335,0,0,1254,1255,5,14,0,0,1255,1256,5,336,0,0,
  	1256,1257,5,14,0,0,1257,1258,5,336,0,0,1258,1294,5,341,0,0,1259,1260,
  	5,246,0,0,1260,1261,5,341,0,0,1261,1262,5,336,0,0,1262,1263,5,4,0,0,1263,
  	1264,5,336,0,0,1264,1265,5,4,0,0,1265,1266,5,336,0,0,1266,1294,5,341,
  	0,0,1267,1268,5,247,0,0,1268,1269,5,341,0,0,1269,1270,5,335,0,0,1270,
  	1271,5,14,0,0,1271,1272,5,336,0,0,1272,1273,5,14,0,0,1273,1274,5,336,
  	0,0,1274,1275,5,336,0,0,1275,1276,5,4,0,0,1276,1277,5,336,0,0,1277,1278,
  	5,4,0,0,1278,1279,5,336,0,0,1279,1294,5,341,0,0,1280,1281,5,82,0,0,1281,
  	1282,5,341,0,0,1282,1283,5,335,0,0,1283,1284,5,14,0,0,1284,1285,5,336,
  	0,0,1285,1286,5,14,0,0,1286,1287,5,336,0,0,1287,1288,5,336,0,0,1288,1289,
  	5,4,0,0,1289,1290,5,336,0,0,1290,1291,5,4,0,0,1291,1292,5,336,0,0,1292,
  	1294,5,341,0,0,1293,1251,1,0,0,0,1293,1259,1,0,0,0,1293,1267,1,0,0,0,
  	1293,1280,1,0,0,0,1294,93,1,0,0,0,1295,1296,5,81,0,0,1296,1297,3,86,43,
  	0,1297,95,1,0,0,0,1298,1299,5,246,0,0,1299,1300,3,86,43,0,1300,97,1,0,
  	0,0,1301,1302,7,3,0,0,1302,1303,3,86,43,0,1303,99,1,0,0,0,1304,1305,5,
  	96,0,0,1305,1308,3,86,43,0,1306,1308,3,102,51,0,1307,1304,1,0,0,0,1307,
  	1306,1,0,0,0,1308,101,1,0,0,0,1309,1310,5,329,0,0,1310,1311,3,104,52,
  	0,1311,103,1,0,0,0,1312,1313,7,4,0,0,1313,105,1,0,0,0,1314,1317,5,344,
  	0,0,1315,1317,3,108,54,0,1316,1314,1,0,0,0,1316,1315,1,0,0,0,1317,107,
  	1,0,0,0,1318,1321,3,82,41,0,1319,1321,3,84,42,0,1320,1318,1,0,0,0,1320,
  	1319,1,0,0,0,1321,109,1,0,0,0,1322,1325,3,106,53,0,1323,1325,3,1028,514,
  	0,1324,1322,1,0,0,0,1324,1323,1,0,0,0,1325,111,1,0,0,0,1326,1327,5,344,
  	0,0,1327,113,1,0,0,0,1328,1329,3,106,53,0,1329,115,1,0,0,0,1330,1331,
  	3,106,53,0,1331,117,1,0,0,0,1332,1335,5,344,0,0,1333,1335,3,120,60,0,
  	1334,1332,1,0,0,0,1334,1333,1,0,0,0,1335,119,1,0,0,0,1336,1337,3,108,
  	54,0,1337,121,1,0,0,0,1338,1339,3,106,53,0,1339,123,1,0,0,0,1340,1341,
  	3,106,53,0,1341,125,1,0,0,0,1342,1345,5,344,0,0,1343,1345,3,128,64,0,
  	1344,1342,1,0,0,0,1344,1343,1,0,0,0,1345,127,1,0,0,0,1346,1347,3,108,
  	54,0,1347,129,1,0,0,0,1348,1351,3,106,53,0,1349,1351,3,1028,514,0,1350,
  	1348,1,0,0,0,1350,1349,1,0,0,0,1351,131,1,0,0,0,1352,1355,3,106,53,0,
  	1353,1355,3,1028,514,0,1354,1352,1,0,0,0,1354,1353,1,0,0,0,1355,133,1,
  	0,0,0,1356,1357,3,106,53,0,1357,135,1,0,0,0,1358,1361,3,106,53,0,1359,
  	1361,3,1028,514,0,1360,1358,1,0,0,0,1360,1359,1,0,0,0,1361,137,1,0,0,
  	0,1362,1365,3,106,53,0,1363,1365,3,1028,514,0,1364,1362,1,0,0,0,1364,
  	1363,1,0,0,0,1365,139,1,0,0,0,1366,1369,5,6,0,0,1367,1370,3,68,34,0,1368,
  	1370,3,106,53,0,1369,1367,1,0,0,0,1369,1368,1,0,0,0,1370,141,1,0,0,0,
  	1371,1372,3,160,80,0,1372,143,1,0,0,0,1373,1374,3,160,80,0,1374,145,1,
  	0,0,0,1375,1378,3,150,75,0,1376,1378,3,148,74,0,1377,1375,1,0,0,0,1377,
  	1376,1,0,0,0,1378,147,1,0,0,0,1379,1382,3,152,76,0,1380,1382,3,154,77,
  	0,1381,1379,1,0,0,0,1381,1380,1,0,0,0,1382,149,1,0,0,0,1383,1384,3,160,
  	80,0,1384,151,1,0,0,0,1385,1386,3,160,80,0,1386,153,1,0,0,0,1387,1388,
  	3,106,53,0,1388,155,1,0,0,0,1389,1390,3,160,80,0,1390,157,1,0,0,0,1391,
  	1392,3,160,80,0,1392,159,1,0,0,0,1393,1396,3,106,53,0,1394,1396,3,1028,
  	514,0,1395,1393,1,0,0,0,1395,1394,1,0,0,0,1396,161,1,0,0,0,1397,1404,
  	3,164,82,0,1398,1404,3,166,83,0,1399,1404,3,168,84,0,1400,1404,3,90,45,
  	0,1401,1404,3,100,50,0,1402,1404,3,88,44,0,1403,1397,1,0,0,0,1403,1398,
  	1,0,0,0,1403,1399,1,0,0,0,1403,1400,1,0,0,0,1403,1401,1,0,0,0,1403,1402,
  	1,0,0,0,1404,163,1,0,0,0,1405,1406,7,5,0,0,1406,165,1,0,0,0,1407,1410,
  	3,80,40,0,1408,1410,3,82,41,0,1409,1407,1,0,0,0,1409,1408,1,0,0,0,1410,
  	167,1,0,0,0,1411,1412,5,340,0,0,1412,169,1,0,0,0,1413,1415,3,404,202,
  	0,1414,1413,1,0,0,0,1414,1415,1,0,0,0,1415,1417,1,0,0,0,1416,1418,3,172,
  	86,0,1417,1416,1,0,0,0,1417,1418,1,0,0,0,1418,1419,1,0,0,0,1419,1420,
  	3,176,88,0,1420,171,1,0,0,0,1421,1423,3,174,87,0,1422,1421,1,0,0,0,1423,
  	1424,1,0,0,0,1424,1422,1,0,0,0,1424,1425,1,0,0,0,1425,173,1,0,0,0,1426,
  	1430,3,182,91,0,1427,1430,3,188,94,0,1428,1430,3,194,97,0,1429,1426,1,
  	0,0,0,1429,1427,1,0,0,0,1429,1428,1,0,0,0,1430,175,1,0,0,0,1431,1435,
  	3,178,89,0,1432,1434,3,180,90,0,1433,1432,1,0,0,0,1434,1437,1,0,0,0,1435,
  	1433,1,0,0,0,1435,1436,1,0,0,0,1436,177,1,0,0,0,1437,1435,1,0,0,0,1438,
  	1442,3,210,105,0,1439,1442,3,242,121,0,1440,1442,3,296,148,0,1441,1438,
  	1,0,0,0,1441,1439,1,0,0,0,1441,1440,1,0,0,0,1442,179,1,0,0,0,1443,1445,
  	5,174,0,0,1444,1446,3,636,318,0,1445,1444,1,0,0,0,1445,1446,1,0,0,0,1446,
  	1447,1,0,0,0,1447,1448,3,178,89,0,1448,181,1,0,0,0,1449,1451,5,208,0,
  	0,1450,1449,1,0,0,0,1450,1451,1,0,0,0,1451,1452,1,0,0,0,1452,1453,5,119,
  	0,0,1453,1454,3,144,72,0,1454,1455,3,184,92,0,1455,183,1,0,0,0,1456,1458,
  	3,780,390,0,1457,1456,1,0,0,0,1457,1458,1,0,0,0,1458,1459,1,0,0,0,1459,
  	1461,3,836,418,0,1460,1457,1,0,0,0,1460,1461,1,0,0,0,1461,1462,1,0,0,
  	0,1462,1463,3,186,93,0,1463,185,1,0,0,0,1464,1465,5,7,0,0,1465,1466,3,
  	198,99,0,1466,187,1,0,0,0,1467,1469,5,46,0,0,1468,1467,1,0,0,0,1468,1469,
  	1,0,0,0,1469,1470,1,0,0,0,1470,1471,5,241,0,0,1471,1472,3,156,78,0,1472,
  	1473,3,190,95,0,1473,189,1,0,0,0,1474,1476,3,780,390,0,1475,1474,1,0,
  	0,0,1475,1476,1,0,0,0,1476,1477,1,0,0,0,1477,1479,3,842,421,0,1478,1475,
  	1,0,0,0,1478,1479,1,0,0,0,1479,1480,1,0,0,0,1480,1481,3,192,96,0,1481,
  	191,1,0,0,0,1482,1483,5,7,0,0,1483,1484,3,204,102,0,1484,193,1,0,0,0,
  	1485,1486,5,272,0,0,1486,1487,3,158,79,0,1487,1488,3,196,98,0,1488,195,
  	1,0,0,0,1489,1491,3,780,390,0,1490,1489,1,0,0,0,1490,1491,1,0,0,0,1491,
  	1492,1,0,0,0,1492,1494,3,778,389,0,1493,1490,1,0,0,0,1493,1494,1,0,0,
  	0,1494,1495,1,0,0,0,1495,1496,5,7,0,0,1496,1497,3,932,466,0,1497,197,
  	1,0,0,0,1498,1504,3,202,101,0,1499,1504,3,208,104,0,1500,1504,3,886,443,
  	0,1501,1504,3,112,56,0,1502,1504,3,200,100,0,1503,1498,1,0,0,0,1503,1499,
  	1,0,0,0,1503,1500,1,0,0,0,1503,1501,1,0,0,0,1503,1502,1,0,0,0,1504,199,
  	1,0,0,0,1505,1506,7,6,0,0,1506,201,1,0,0,0,1507,1508,3,64,32,0,1508,203,
  	1,0,0,0,1509,1514,3,206,103,0,1510,1514,3,208,104,0,1511,1514,3,896,448,
  	0,1512,1514,3,112,56,0,1513,1509,1,0,0,0,1513,1510,1,0,0,0,1513,1511,
  	1,0,0,0,1513,1512,1,0,0,0,1514,205,1,0,0,0,1515,1516,3,64,32,0,1516,207,
  	1,0,0,0,1517,1518,5,275,0,0,1518,1525,3,936,468,0,1519,1520,5,12,0,0,
  	1520,1521,3,932,466,0,1521,1522,5,22,0,0,1522,1525,1,0,0,0,1523,1525,
  	3,936,468,0,1524,1517,1,0,0,0,1524,1519,1,0,0,0,1524,1523,1,0,0,0,1525,
  	209,1,0,0,0,1526,1528,3,212,106,0,1527,1526,1,0,0,0,1528,1529,1,0,0,0,
  	1529,1527,1,0,0,0,1529,1530,1,0,0,0,1530,211,1,0,0,0,1531,1534,3,214,
  	107,0,1532,1534,3,240,120,0,1533,1531,1,0,0,0,1533,1532,1,0,0,0,1534,
  	213,1,0,0,0,1535,1542,3,216,108,0,1536,1542,3,220,110,0,1537,1542,3,232,
  	116,0,1538,1542,3,218,109,0,1539,1542,3,230,115,0,1540,1542,3,238,119,
  	0,1541,1535,1,0,0,0,1541,1536,1,0,0,0,1541,1537,1,0,0,0,1541,1538,1,0,
  	0,0,1541,1539,1,0,0,0,1541,1540,1,0,0,0,1542,215,1,0,0,0,1543,1544,5,
  	73,0,0,1544,1548,5,223,0,0,1545,1546,5,131,0,0,1546,1547,5,183,0,0,1547,
  	1549,5,104,0,0,1548,1545,1,0,0,0,1548,1549,1,0,0,0,1549,1550,1,0,0,0,
  	1550,1551,3,874,437,0,1551,217,1,0,0,0,1552,1553,5,95,0,0,1553,1556,5,
  	223,0,0,1554,1555,5,131,0,0,1555,1557,5,104,0,0,1556,1554,1,0,0,0,1556,
  	1557,1,0,0,0,1557,1558,1,0,0,0,1558,1559,3,874,437,0,1559,219,1,0,0,0,
  	1560,1576,5,73,0,0,1561,1563,5,208,0,0,1562,1561,1,0,0,0,1562,1563,1,
  	0,0,0,1563,1564,1,0,0,0,1564,1568,5,119,0,0,1565,1566,5,131,0,0,1566,
  	1567,5,183,0,0,1567,1569,5,104,0,0,1568,1565,1,0,0,0,1568,1569,1,0,0,
  	0,1569,1577,1,0,0,0,1570,1571,5,194,0,0,1571,1573,5,216,0,0,1572,1574,
  	5,208,0,0,1573,1572,1,0,0,0,1573,1574,1,0,0,0,1574,1575,1,0,0,0,1575,
  	1577,5,119,0,0,1576,1562,1,0,0,0,1576,1570,1,0,0,0,1577,1578,1,0,0,0,
  	1578,1581,3,888,444,0,1579,1582,3,222,111,0,1580,1582,3,224,112,0,1581,
  	1579,1,0,0,0,1581,1580,1,0,0,0,1582,1584,1,0,0,0,1583,1585,3,228,114,
  	0,1584,1583,1,0,0,0,1584,1585,1,0,0,0,1585,221,1,0,0,0,1586,1588,3,780,
  	390,0,1587,1586,1,0,0,0,1587,1588,1,0,0,0,1588,1589,1,0,0,0,1589,1594,
  	5,34,0,0,1590,1592,5,208,0,0,1591,1590,1,0,0,0,1591,1592,1,0,0,0,1592,
  	1593,1,0,0,0,1593,1595,5,119,0,0,1594,1591,1,0,0,0,1594,1595,1,0,0,0,
  	1595,223,1,0,0,0,1596,1612,3,226,113,0,1597,1599,3,780,390,0,1598,1597,
  	1,0,0,0,1598,1599,1,0,0,0,1599,1600,1,0,0,0,1600,1612,3,892,446,0,1601,
  	1603,3,780,390,0,1602,1601,1,0,0,0,1602,1603,1,0,0,0,1603,1608,1,0,0,
  	0,1604,1606,5,208,0,0,1605,1604,1,0,0,0,1605,1606,1,0,0,0,1606,1607,1,
  	0,0,0,1607,1609,5,119,0,0,1608,1605,1,0,0,0,1608,1609,1,0,0,0,1609,1610,
  	1,0,0,0,1610,1612,3,680,340,0,1611,1596,1,0,0,0,1611,1598,1,0,0,0,1611,
  	1602,1,0,0,0,1612,225,1,0,0,0,1613,1614,5,158,0,0,1614,1615,3,198,99,
  	0,1615,227,1,0,0,0,1616,1617,5,36,0,0,1617,1618,5,68,0,0,1618,1619,5,
  	188,0,0,1619,1620,3,198,99,0,1620,229,1,0,0,0,1621,1623,5,95,0,0,1622,
  	1624,5,208,0,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,1624,1625,1,0,0,0,
  	1625,1628,5,119,0,0,1626,1627,5,131,0,0,1627,1629,5,104,0,0,1628,1626,
  	1,0,0,0,1628,1629,1,0,0,0,1629,1630,1,0,0,0,1630,1631,3,888,444,0,1631,
  	231,1,0,0,0,1632,1650,5,73,0,0,1633,1635,5,208,0,0,1634,1633,1,0,0,0,
  	1634,1635,1,0,0,0,1635,1636,1,0,0,0,1636,1637,5,119,0,0,1637,1641,5,255,
  	0,0,1638,1639,5,131,0,0,1639,1640,5,183,0,0,1640,1642,5,104,0,0,1641,
  	1638,1,0,0,0,1641,1642,1,0,0,0,1642,1651,1,0,0,0,1643,1644,5,194,0,0,
  	1644,1646,5,216,0,0,1645,1647,5,208,0,0,1646,1645,1,0,0,0,1646,1647,1,
  	0,0,0,1647,1648,1,0,0,0,1648,1649,5,119,0,0,1649,1651,5,255,0,0,1650,
  	1634,1,0,0,0,1650,1643,1,0,0,0,1651,1652,1,0,0,0,1652,1653,3,894,447,
  	0,1653,1654,3,234,117,0,1654,233,1,0,0,0,1655,1657,5,36,0,0,1656,1655,
  	1,0,0,0,1656,1657,1,0,0,0,1657,1658,1,0,0,0,1658,1665,3,236,118,0,1659,
  	1665,3,226,113,0,1660,1662,5,36,0,0,1661,1660,1,0,0,0,1661,1662,1,0,0,
  	0,1662,1663,1,0,0,0,1663,1665,3,680,340,0,1664,1656,1,0,0,0,1664,1659,
  	1,0,0,0,1664,1661,1,0,0,0,1665,235,1,0,0,0,1666,1667,5,68,0,0,1667,1670,
  	5,188,0,0,1668,1671,3,892,446,0,1669,1671,3,908,454,0,1670,1668,1,0,0,
  	0,1670,1669,1,0,0,0,1671,237,1,0,0,0,1672,1674,5,95,0,0,1673,1675,5,208,
  	0,0,1674,1673,1,0,0,0,1674,1675,1,0,0,0,1675,1676,1,0,0,0,1676,1677,5,
  	119,0,0,1677,1680,5,255,0,0,1678,1679,5,131,0,0,1679,1681,5,104,0,0,1680,
  	1678,1,0,0,0,1680,1681,1,0,0,0,1681,1682,1,0,0,0,1682,1683,3,894,447,
  	0,1683,239,1,0,0,0,1684,1685,3,386,193,0,1685,241,1,0,0,0,1686,1689,3,
  	244,122,0,1687,1689,3,250,125,0,1688,1686,1,0,0,0,1688,1687,1,0,0,0,1689,
  	243,1,0,0,0,1690,1693,3,246,123,0,1691,1693,3,248,124,0,1692,1690,1,0,
  	0,0,1692,1691,1,0,0,0,1693,245,1,0,0,0,1694,1695,3,402,201,0,1695,1697,
  	3,254,127,0,1696,1698,3,356,178,0,1697,1696,1,0,0,0,1697,1698,1,0,0,0,
  	1698,247,1,0,0,0,1699,1700,3,402,201,0,1700,1701,3,60,30,0,1701,249,1,
  	0,0,0,1702,1705,3,252,126,0,1703,1705,3,60,30,0,1704,1702,1,0,0,0,1704,
  	1703,1,0,0,0,1705,251,1,0,0,0,1706,1708,3,254,127,0,1707,1709,3,356,178,
  	0,1708,1707,1,0,0,0,1708,1709,1,0,0,0,1709,253,1,0,0,0,1710,1712,3,256,
  	128,0,1711,1710,1,0,0,0,1712,1713,1,0,0,0,1713,1711,1,0,0,0,1713,1714,
  	1,0,0,0,1714,255,1,0,0,0,1715,1718,3,322,161,0,1716,1718,3,258,129,0,
  	1717,1715,1,0,0,0,1717,1716,1,0,0,0,1718,257,1,0,0,0,1719,1722,3,260,
  	130,0,1720,1722,3,294,147,0,1721,1719,1,0,0,0,1721,1720,1,0,0,0,1722,
  	259,1,0,0,0,1723,1728,3,262,131,0,1724,1728,3,264,132,0,1725,1728,3,278,
  	139,0,1726,1728,3,288,144,0,1727,1723,1,0,0,0,1727,1724,1,0,0,0,1727,
  	1725,1,0,0,0,1727,1726,1,0,0,0,1728,261,1,0,0,0,1729,1730,5,133,0,0,1730,
  	1731,3,536,268,0,1731,263,1,0,0,0,1732,1733,5,226,0,0,1733,1734,3,266,
  	133,0,1734,265,1,0,0,0,1735,1740,3,268,134,0,1736,1737,5,5,0,0,1737,1739,
  	3,268,134,0,1738,1736,1,0,0,0,1739,1742,1,0,0,0,1740,1738,1,0,0,0,1740,
  	1741,1,0,0,0,1741,267,1,0,0,0,1742,1740,1,0,0,0,1743,1747,3,270,135,0,
  	1744,1747,3,272,136,0,1745,1747,3,274,137,0,1746,1743,1,0,0,0,1746,1744,
  	1,0,0,0,1746,1745,1,0,0,0,1747,269,1,0,0,0,1748,1749,3,406,203,0,1749,
  	1750,5,16,0,0,1750,1751,3,136,68,0,1751,1752,5,7,0,0,1752,1753,3,932,
  	466,0,1753,271,1,0,0,0,1754,1755,3,406,203,0,1755,1756,5,7,0,0,1756,1758,
  	5,10,0,0,1757,1759,3,506,253,0,1758,1757,1,0,0,0,1758,1759,1,0,0,0,1759,
  	1760,1,0,0,0,1760,1761,5,20,0,0,1761,273,1,0,0,0,1762,1763,3,406,203,
  	0,1763,1764,3,498,249,0,1764,1765,3,132,66,0,1765,275,1,0,0,0,1766,1771,
  	3,132,66,0,1767,1768,5,1,0,0,1768,1770,3,132,66,0,1769,1767,1,0,0,0,1770,
  	1773,1,0,0,0,1771,1769,1,0,0,0,1771,1772,1,0,0,0,1772,277,1,0,0,0,1773,
  	1771,1,0,0,0,1774,1775,5,214,0,0,1775,1776,3,280,140,0,1776,279,1,0,0,
  	0,1777,1782,3,282,141,0,1778,1779,5,5,0,0,1779,1781,3,282,141,0,1780,
  	1778,1,0,0,0,1781,1784,1,0,0,0,1782,1780,1,0,0,0,1782,1783,1,0,0,0,1783,
  	281,1,0,0,0,1784,1782,1,0,0,0,1785,1788,3,284,142,0,1786,1788,3,286,143,
  	0,1787,1785,1,0,0,0,1787,1786,1,0,0,0,1788,283,1,0,0,0,1789,1790,3,406,
  	203,0,1790,1791,5,16,0,0,1791,1792,3,136,68,0,1792,285,1,0,0,0,1793,1794,
  	3,406,203,0,1794,1795,3,498,249,0,1795,1796,3,132,66,0,1796,287,1,0,0,
  	0,1797,1799,7,7,0,0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,1799,1800,1,0,
  	0,0,1800,1801,5,86,0,0,1801,1802,3,290,145,0,1802,289,1,0,0,0,1803,1808,
  	3,292,146,0,1804,1805,5,5,0,0,1805,1807,3,292,146,0,1806,1804,1,0,0,0,
  	1807,1810,1,0,0,0,1808,1806,1,0,0,0,1808,1809,1,0,0,0,1809,291,1,0,0,
  	0,1810,1808,1,0,0,0,1811,1812,3,932,466,0,1812,293,1,0,0,0,1813,1814,
  	3,386,193,0,1814,295,1,0,0,0,1815,1816,3,298,149,0,1816,297,1,0,0,0,1817,
  	1818,6,149,-1,0,1818,1819,3,304,152,0,1819,1826,1,0,0,0,1820,1821,10,
  	2,0,0,1821,1822,3,300,150,0,1822,1823,3,304,152,0,1823,1825,1,0,0,0,1824,
  	1820,1,0,0,0,1825,1828,1,0,0,0,1826,1824,1,0,0,0,1826,1827,1,0,0,0,1827,
  	299,1,0,0,0,1828,1826,1,0,0,0,1829,1832,3,302,151,0,1830,1832,5,197,0,
  	0,1831,1829,1,0,0,0,1831,1830,1,0,0,0,1832,301,1,0,0,0,1833,1835,5,266,
  	0,0,1834,1836,3,660,330,0,1835,1834,1,0,0,0,1835,1836,1,0,0,0,1836,1846,
  	1,0,0,0,1837,1839,5,103,0,0,1838,1840,3,660,330,0,1839,1838,1,0,0,0,1839,
  	1840,1,0,0,0,1840,1846,1,0,0,0,1841,1843,5,148,0,0,1842,1844,3,660,330,
  	0,1843,1842,1,0,0,0,1843,1844,1,0,0,0,1844,1846,1,0,0,0,1845,1833,1,0,
  	0,0,1845,1837,1,0,0,0,1845,1841,1,0,0,0,1846,303,1,0,0,0,1847,1848,3,
  	306,153,0,1848,305,1,0,0,0,1849,1852,3,308,154,0,1850,1852,3,318,159,
  	0,1851,1849,1,0,0,0,1851,1850,1,0,0,0,1852,307,1,0,0,0,1853,1855,3,310,
  	155,0,1854,1853,1,0,0,0,1855,1858,1,0,0,0,1856,1854,1,0,0,0,1856,1857,
  	1,0,0,0,1857,1859,1,0,0,0,1858,1856,1,0,0,0,1859,1864,3,312,156,0,1860,
  	1864,3,314,157,0,1861,1864,3,316,158,0,1862,1864,3,368,184,0,1863,1856,
  	1,0,0,0,1863,1860,1,0,0,0,1863,1861,1,0,0,0,1863,1862,1,0,0,0,1864,309,
  	1,0,0,0,1865,1866,3,402,201,0,1866,1867,3,320,160,0,1867,311,1,0,0,0,
  	1868,1869,3,402,201,0,1869,1870,3,320,160,0,1870,1871,3,356,178,0,1871,
  	313,1,0,0,0,1872,1873,3,402,201,0,1873,1874,3,356,178,0,1874,315,1,0,
  	0,0,1875,1876,3,402,201,0,1876,1877,3,64,32,0,1877,317,1,0,0,0,1878,1880,
  	3,320,160,0,1879,1878,1,0,0,0,1879,1880,1,0,0,0,1880,1881,1,0,0,0,1881,
  	1884,3,356,178,0,1882,1884,3,64,32,0,1883,1879,1,0,0,0,1883,1882,1,0,
  	0,0,1884,319,1,0,0,0,1885,1887,3,322,161,0,1886,1885,1,0,0,0,1887,1888,
  	1,0,0,0,1888,1886,1,0,0,0,1888,1889,1,0,0,0,1889,321,1,0,0,0,1890,1893,
  	3,324,162,0,1891,1893,3,336,168,0,1892,1890,1,0,0,0,1892,1891,1,0,0,0,
  	1893,323,1,0,0,0,1894,1900,3,326,163,0,1895,1900,3,340,170,0,1896,1900,
  	3,346,173,0,1897,1900,3,338,169,0,1898,1900,3,354,177,0,1899,1894,1,0,
  	0,0,1899,1895,1,0,0,0,1899,1896,1,0,0,0,1899,1897,1,0,0,0,1899,1898,1,
  	0,0,0,1900,325,1,0,0,0,1901,1904,3,328,164,0,1902,1904,3,330,165,0,1903,
  	1901,1,0,0,0,1903,1902,1,0,0,0,1904,327,1,0,0,0,1905,1906,5,170,0,0,1906,
  	1907,3,414,207,0,1907,329,1,0,0,0,1908,1909,5,193,0,0,1909,1910,3,332,
  	166,0,1910,331,1,0,0,0,1911,1921,3,328,164,0,1912,1913,5,10,0,0,1913,
  	1914,3,334,167,0,1914,1915,5,20,0,0,1915,1921,1,0,0,0,1916,1917,5,12,
  	0,0,1917,1918,3,334,167,0,1918,1919,5,22,0,0,1919,1921,1,0,0,0,1920,1911,
  	1,0,0,0,1920,1912,1,0,0,0,1920,1916,1,0,0,0,1921,333,1,0,0,0,1922,1924,
  	3,326,163,0,1923,1922,1,0,0,0,1924,1925,1,0,0,0,1925,1923,1,0,0,0,1925,
  	1926,1,0,0,0,1926,335,1,0,0,0,1927,1928,3,386,193,0,1928,337,1,0,0,0,
  	1929,1932,5,107,0,0,1930,1933,3,634,317,0,1931,1933,3,932,466,0,1932,
  	1930,1,0,0,0,1932,1931,1,0,0,0,1933,339,1,0,0,0,1934,1935,5,157,0,0,1935,
  	1936,3,342,171,0,1936,341,1,0,0,0,1937,1942,3,344,172,0,1938,1939,5,5,
  	0,0,1939,1941,3,344,172,0,1940,1938,1,0,0,0,1941,1944,1,0,0,0,1942,1940,
  	1,0,0,0,1942,1943,1,0,0,0,1943,343,1,0,0,0,1944,1942,1,0,0,0,1945,1951,
  	3,194,97,0,1946,1947,3,158,79,0,1947,1948,5,7,0,0,1948,1949,3,932,466,
  	0,1949,1951,1,0,0,0,1950,1945,1,0,0,0,1950,1946,1,0,0,0,1951,345,1,0,
  	0,0,1952,1953,5,117,0,0,1953,1955,3,348,174,0,1954,1956,3,352,176,0,1955,
  	1954,1,0,0,0,1955,1956,1,0,0,0,1956,347,1,0,0,0,1957,1958,3,350,175,0,
  	1958,1959,3,936,468,0,1959,349,1,0,0,0,1960,1961,3,106,53,0,1961,1962,
  	5,132,0,0,1962,351,1,0,0,0,1963,1964,5,279,0,0,1964,1965,7,8,0,0,1965,
  	1966,3,106,53,0,1966,353,1,0,0,0,1967,1969,3,654,327,0,1968,1970,3,676,
  	338,0,1969,1968,1,0,0,0,1969,1970,1,0,0,0,1970,1972,1,0,0,0,1971,1973,
  	3,674,337,0,1972,1971,1,0,0,0,1972,1973,1,0,0,0,1973,1980,1,0,0,0,1974,
  	1976,3,676,338,0,1975,1977,3,674,337,0,1976,1975,1,0,0,0,1976,1977,1,
  	0,0,0,1977,1980,1,0,0,0,1978,1980,3,674,337,0,1979,1967,1,0,0,0,1979,
  	1974,1,0,0,0,1979,1978,1,0,0,0,1980,355,1,0,0,0,1981,1983,3,358,179,0,
  	1982,1984,3,354,177,0,1983,1982,1,0,0,0,1983,1984,1,0,0,0,1984,1987,1,
  	0,0,0,1985,1987,5,108,0,0,1986,1981,1,0,0,0,1986,1985,1,0,0,0,1987,357,
  	1,0,0,0,1988,1989,5,218,0,0,1989,1990,3,360,180,0,1990,359,1,0,0,0,1991,
  	1993,3,660,330,0,1992,1991,1,0,0,0,1992,1993,1,0,0,0,1993,1996,1,0,0,
  	0,1994,1997,5,2,0,0,1995,1997,3,362,181,0,1996,1994,1,0,0,0,1996,1995,
  	1,0,0,0,1997,1999,1,0,0,0,1998,2000,3,646,323,0,1999,1998,1,0,0,0,1999,
  	2000,1,0,0,0,2000,2004,1,0,0,0,2001,2002,5,179,0,0,2002,2004,5,47,0,0,
  	2003,1992,1,0,0,0,2003,2001,1,0,0,0,2004,361,1,0,0,0,2005,2010,3,364,
  	182,0,2006,2007,5,5,0,0,2007,2009,3,364,182,0,2008,2006,1,0,0,0,2009,
  	2012,1,0,0,0,2010,2008,1,0,0,0,2010,2011,1,0,0,0,2011,363,1,0,0,0,2012,
  	2010,1,0,0,0,2013,2015,3,932,466,0,2014,2016,3,366,183,0,2015,2014,1,
  	0,0,0,2015,2016,1,0,0,0,2016,365,1,0,0,0,2017,2018,5,36,0,0,2018,2019,
  	3,106,53,0,2019,367,1,0,0,0,2020,2022,5,224,0,0,2021,2023,3,660,330,0,
  	2022,2021,1,0,0,0,2022,2023,1,0,0,0,2023,2026,1,0,0,0,2024,2027,5,2,0,
  	0,2025,2027,3,370,185,0,2026,2024,1,0,0,0,2026,2025,1,0,0,0,2027,2047,
  	1,0,0,0,2028,2030,3,378,189,0,2029,2031,3,634,317,0,2030,2029,1,0,0,0,
  	2030,2031,1,0,0,0,2031,2033,1,0,0,0,2032,2034,3,646,323,0,2033,2032,1,
  	0,0,0,2033,2034,1,0,0,0,2034,2036,1,0,0,0,2035,2037,3,376,188,0,2036,
  	2035,1,0,0,0,2036,2037,1,0,0,0,2037,2039,1,0,0,0,2038,2040,3,654,327,
  	0,2039,2038,1,0,0,0,2039,2040,1,0,0,0,2040,2042,1,0,0,0,2041,2043,3,676,
  	338,0,2042,2041,1,0,0,0,2042,2043,1,0,0,0,2043,2045,1,0,0,0,2044,2046,
  	3,674,337,0,2045,2044,1,0,0,0,2045,2046,1,0,0,0,2046,2048,1,0,0,0,2047,
  	2028,1,0,0,0,2047,2048,1,0,0,0,2048,369,1,0,0,0,2049,2054,3,372,186,0,
  	2050,2051,5,5,0,0,2051,2053,3,372,186,0,2052,2050,1,0,0,0,2053,2056,1,
  	0,0,0,2054,2052,1,0,0,0,2054,2055,1,0,0,0,2055,371,1,0,0,0,2056,2054,
  	1,0,0,0,2057,2059,3,932,466,0,2058,2060,3,374,187,0,2059,2058,1,0,0,0,
  	2059,2060,1,0,0,0,2060,373,1,0,0,0,2061,2062,5,36,0,0,2062,2063,3,106,
  	53,0,2063,375,1,0,0,0,2064,2065,5,122,0,0,2065,2066,3,932,466,0,2066,
  	377,1,0,0,0,2067,2068,5,118,0,0,2068,2072,3,380,190,0,2069,2070,5,118,
  	0,0,2070,2072,3,384,192,0,2071,2067,1,0,0,0,2071,2069,1,0,0,0,2072,379,
  	1,0,0,0,2073,2078,3,382,191,0,2074,2075,5,5,0,0,2075,2077,3,382,191,0,
  	2076,2074,1,0,0,0,2077,2080,1,0,0,0,2078,2076,1,0,0,0,2078,2079,1,0,0,
  	0,2079,381,1,0,0,0,2080,2078,1,0,0,0,2081,2082,3,198,99,0,2082,2083,3,
  	326,163,0,2083,383,1,0,0,0,2084,2089,3,64,32,0,2085,2086,3,198,99,0,2086,
  	2087,3,64,32,0,2087,2089,1,0,0,0,2088,2084,1,0,0,0,2088,2085,1,0,0,0,
  	2089,385,1,0,0,0,2090,2092,5,193,0,0,2091,2090,1,0,0,0,2091,2092,1,0,
  	0,0,2092,2093,1,0,0,0,2093,2094,5,55,0,0,2094,2095,3,388,194,0,2095,387,
  	1,0,0,0,2096,2099,3,390,195,0,2097,2099,3,396,198,0,2098,2096,1,0,0,0,
  	2098,2097,1,0,0,0,2099,389,1,0,0,0,2100,2102,3,392,196,0,2101,2100,1,
  	0,0,0,2101,2102,1,0,0,0,2102,2103,1,0,0,0,2103,2104,3,54,27,0,2104,391,
  	1,0,0,0,2105,2107,5,12,0,0,2106,2108,3,394,197,0,2107,2106,1,0,0,0,2107,
  	2108,1,0,0,0,2108,2109,1,0,0,0,2109,2110,5,22,0,0,2110,393,1,0,0,0,2111,
  	2116,3,406,203,0,2112,2113,5,5,0,0,2113,2115,3,406,203,0,2114,2112,1,
  	0,0,0,2115,2118,1,0,0,0,2116,2114,1,0,0,0,2116,2117,1,0,0,0,2117,395,
  	1,0,0,0,2118,2116,1,0,0,0,2119,2120,3,900,450,0,2120,2122,5,12,0,0,2121,
  	2123,3,398,199,0,2122,2121,1,0,0,0,2122,2123,1,0,0,0,2123,2124,1,0,0,
  	0,2124,2126,5,22,0,0,2125,2127,3,636,318,0,2126,2125,1,0,0,0,2126,2127,
  	1,0,0,0,2127,397,1,0,0,0,2128,2133,3,400,200,0,2129,2130,5,5,0,0,2130,
  	2132,3,400,200,0,2131,2129,1,0,0,0,2132,2135,1,0,0,0,2133,2131,1,0,0,
  	0,2133,2134,1,0,0,0,2134,399,1,0,0,0,2135,2133,1,0,0,0,2136,2137,3,932,
  	466,0,2137,401,1,0,0,0,2138,2139,5,270,0,0,2139,2140,3,198,99,0,2140,
  	403,1,0,0,0,2141,2142,5,40,0,0,2142,2143,3,870,435,0,2143,405,1,0,0,0,
  	2144,2145,3,160,80,0,2145,407,1,0,0,0,2146,2147,3,406,203,0,2147,409,
  	1,0,0,0,2148,2149,3,406,203,0,2149,411,1,0,0,0,2150,2151,3,140,70,0,2151,
  	413,1,0,0,0,2152,2154,3,422,211,0,2153,2155,3,416,208,0,2154,2153,1,0,
  	0,0,2154,2155,1,0,0,0,2155,415,1,0,0,0,2156,2157,5,283,0,0,2157,2158,
  	3,418,209,0,2158,417,1,0,0,0,2159,2164,3,420,210,0,2160,2161,5,5,0,0,
  	2161,2163,3,420,210,0,2162,2160,1,0,0,0,2163,2166,1,0,0,0,2164,2162,1,
  	0,0,0,2164,2165,1,0,0,0,2165,2170,1,0,0,0,2166,2164,1,0,0,0,2167,2168,
  	5,179,0,0,2168,2170,5,47,0,0,2169,2159,1,0,0,0,2169,2167,1,0,0,0,2170,
  	419,1,0,0,0,2171,2174,3,408,204,0,2172,2174,3,410,205,0,2173,2171,1,0,
  	0,0,2173,2172,1,0,0,0,2174,421,1,0,0,0,2175,2177,3,424,212,0,2176,2175,
  	1,0,0,0,2176,2177,1,0,0,0,2177,2178,1,0,0,0,2178,2180,3,434,217,0,2179,
  	2181,3,440,220,0,2180,2179,1,0,0,0,2180,2181,1,0,0,0,2181,2183,1,0,0,
  	0,2182,2184,3,442,221,0,2183,2182,1,0,0,0,2183,2184,1,0,0,0,2184,423,
  	1,0,0,0,2185,2188,3,426,213,0,2186,2188,3,428,214,0,2187,2185,1,0,0,0,
  	2187,2186,1,0,0,0,2188,425,1,0,0,0,2189,2190,5,215,0,0,2190,2191,3,430,
  	215,0,2191,427,1,0,0,0,2192,2193,5,91,0,0,2193,2194,3,432,216,0,2194,
  	429,1,0,0,0,2195,2197,5,98,0,0,2196,2198,5,47,0,0,2197,2196,1,0,0,0,2197,
  	2198,1,0,0,0,2198,2201,1,0,0,0,2199,2201,5,100,0,0,2200,2195,1,0,0,0,
  	2200,2199,1,0,0,0,2201,431,1,0,0,0,2202,2204,5,292,0,0,2203,2205,5,47,
  	0,0,2204,2203,1,0,0,0,2204,2205,1,0,0,0,2205,2208,1,0,0,0,2206,2208,5,
  	293,0,0,2207,2202,1,0,0,0,2207,2206,1,0,0,0,2208,433,1,0,0,0,2209,2214,
  	3,436,218,0,2210,2211,5,5,0,0,2211,2213,3,436,218,0,2212,2210,1,0,0,0,
  	2213,2216,1,0,0,0,2214,2212,1,0,0,0,2214,2215,1,0,0,0,2215,435,1,0,0,
  	0,2216,2214,1,0,0,0,2217,2219,3,438,219,0,2218,2217,1,0,0,0,2218,2219,
  	1,0,0,0,2219,2221,1,0,0,0,2220,2222,3,444,222,0,2221,2220,1,0,0,0,2221,
  	2222,1,0,0,0,2222,2223,1,0,0,0,2223,2224,3,472,236,0,2224,437,1,0,0,0,
  	2225,2226,3,152,76,0,2226,2227,5,7,0,0,2227,439,1,0,0,0,2228,2229,5,150,
  	0,0,2229,2230,3,444,222,0,2230,441,1,0,0,0,2231,2232,5,278,0,0,2232,2233,
  	3,932,466,0,2233,443,1,0,0,0,2234,2237,3,446,223,0,2235,2237,3,450,225,
  	0,2236,2234,1,0,0,0,2236,2235,1,0,0,0,2237,445,1,0,0,0,2238,2240,3,448,
  	224,0,2239,2241,3,454,227,0,2240,2239,1,0,0,0,2240,2241,1,0,0,0,2241,
  	447,1,0,0,0,2242,2243,7,9,0,0,2243,449,1,0,0,0,2244,2248,3,452,226,0,
  	2245,2248,3,456,228,0,2246,2248,3,460,230,0,2247,2244,1,0,0,0,2247,2245,
  	1,0,0,0,2247,2246,1,0,0,0,2248,451,1,0,0,0,2249,2251,5,31,0,0,2250,2252,
  	3,448,224,0,2251,2250,1,0,0,0,2251,2252,1,0,0,0,2252,2254,1,0,0,0,2253,
  	2255,3,454,227,0,2254,2253,1,0,0,0,2254,2255,1,0,0,0,2255,453,1,0,0,0,
  	2256,2257,7,10,0,0,2257,455,1,0,0,0,2258,2260,5,34,0,0,2259,2261,3,458,
  	229,0,2260,2259,1,0,0,0,2260,2261,1,0,0,0,2261,2263,1,0,0,0,2262,2264,
  	3,448,224,0,2263,2262,1,0,0,0,2263,2264,1,0,0,0,2264,2266,1,0,0,0,2265,
  	2267,3,454,227,0,2266,2265,1,0,0,0,2266,2267,1,0,0,0,2267,457,1,0,0,0,
  	2268,2269,3,926,463,0,2269,459,1,0,0,0,2270,2275,3,462,231,0,2271,2275,
  	3,464,232,0,2272,2275,3,466,233,0,2273,2275,3,468,234,0,2274,2270,1,0,
  	0,0,2274,2271,1,0,0,0,2274,2272,1,0,0,0,2274,2273,1,0,0,0,2275,461,1,
  	0,0,0,2276,2277,5,31,0,0,2277,2279,5,227,0,0,2278,2280,3,448,224,0,2279,
  	2278,1,0,0,0,2279,2280,1,0,0,0,2280,2282,1,0,0,0,2281,2283,3,454,227,
  	0,2282,2281,1,0,0,0,2282,2283,1,0,0,0,2283,463,1,0,0,0,2284,2285,5,34,
  	0,0,2285,2287,5,227,0,0,2286,2288,3,448,224,0,2287,2286,1,0,0,0,2287,
  	2288,1,0,0,0,2288,2290,1,0,0,0,2289,2291,3,454,227,0,2290,2289,1,0,0,
  	0,2290,2291,1,0,0,0,2291,465,1,0,0,0,2292,2293,5,227,0,0,2293,2295,3,
  	458,229,0,2294,2296,3,448,224,0,2295,2294,1,0,0,0,2295,2296,1,0,0,0,2296,
  	2298,1,0,0,0,2297,2299,3,454,227,0,2298,2297,1,0,0,0,2298,2299,1,0,0,
  	0,2299,467,1,0,0,0,2300,2301,5,227,0,0,2301,2303,3,470,235,0,2302,2304,
  	3,448,224,0,2303,2302,1,0,0,0,2303,2304,1,0,0,0,2304,2306,1,0,0,0,2305,
  	2307,3,454,227,0,2306,2305,1,0,0,0,2306,2307,1,0,0,0,2307,2308,1,0,0,
  	0,2308,2309,7,11,0,0,2309,469,1,0,0,0,2310,2311,3,926,463,0,2311,471,
  	1,0,0,0,2312,2316,3,478,239,0,2313,2316,3,474,237,0,2314,2316,3,476,238,
  	0,2315,2312,1,0,0,0,2315,2313,1,0,0,0,2315,2314,1,0,0,0,2316,473,1,0,
  	0,0,2317,2318,3,478,239,0,2318,2319,5,299,0,0,2319,2324,3,478,239,0,2320,
  	2321,5,299,0,0,2321,2323,3,478,239,0,2322,2320,1,0,0,0,2323,2326,1,0,
  	0,0,2324,2322,1,0,0,0,2324,2325,1,0,0,0,2325,475,1,0,0,0,2326,2324,1,
  	0,0,0,2327,2328,3,478,239,0,2328,2329,5,27,0,0,2329,2334,3,478,239,0,
  	2330,2331,5,27,0,0,2331,2333,3,478,239,0,2332,2330,1,0,0,0,2333,2336,
  	1,0,0,0,2334,2332,1,0,0,0,2334,2335,1,0,0,0,2335,477,1,0,0,0,2336,2334,
  	1,0,0,0,2337,2339,3,480,240,0,2338,2337,1,0,0,0,2339,2340,1,0,0,0,2340,
  	2338,1,0,0,0,2340,2341,1,0,0,0,2341,479,1,0,0,0,2342,2346,3,486,243,0,
  	2343,2346,3,482,241,0,2344,2346,3,484,242,0,2345,2342,1,0,0,0,2345,2343,
  	1,0,0,0,2345,2344,1,0,0,0,2346,481,1,0,0,0,2347,2348,3,486,243,0,2348,
  	2349,3,568,284,0,2349,483,1,0,0,0,2350,2351,3,486,243,0,2351,2352,5,18,
  	0,0,2352,485,1,0,0,0,2353,2357,3,488,244,0,2354,2357,3,530,265,0,2355,
  	2357,3,578,289,0,2356,2353,1,0,0,0,2356,2354,1,0,0,0,2356,2355,1,0,0,
  	0,2357,487,1,0,0,0,2358,2361,3,490,245,0,2359,2361,3,510,255,0,2360,2358,
  	1,0,0,0,2360,2359,1,0,0,0,2361,489,1,0,0,0,2362,2363,5,12,0,0,2363,2364,
  	3,492,246,0,2364,2365,5,22,0,0,2365,491,1,0,0,0,2366,2368,3,494,247,0,
  	2367,2366,1,0,0,0,2367,2368,1,0,0,0,2368,2370,1,0,0,0,2369,2371,3,496,
  	248,0,2370,2369,1,0,0,0,2370,2371,1,0,0,0,2371,2373,1,0,0,0,2372,2374,
  	3,500,250,0,2373,2372,1,0,0,0,2373,2374,1,0,0,0,2374,493,1,0,0,0,2375,
  	2377,5,244,0,0,2376,2375,1,0,0,0,2376,2377,1,0,0,0,2377,2378,1,0,0,0,
  	2378,2379,3,150,75,0,2379,495,1,0,0,0,2380,2381,3,498,249,0,2381,2382,
  	3,556,278,0,2382,497,1,0,0,0,2383,2384,7,12,0,0,2384,499,1,0,0,0,2385,
  	2388,3,502,251,0,2386,2388,3,504,252,0,2387,2385,1,0,0,0,2387,2386,1,
  	0,0,0,2388,501,1,0,0,0,2389,2390,5,278,0,0,2390,2391,3,932,466,0,2391,
  	503,1,0,0,0,2392,2393,5,10,0,0,2393,2394,3,506,253,0,2394,2395,5,20,0,
  	0,2395,505,1,0,0,0,2396,2401,3,508,254,0,2397,2398,5,5,0,0,2398,2400,
  	3,508,254,0,2399,2397,1,0,0,0,2400,2403,1,0,0,0,2401,2399,1,0,0,0,2401,
  	2402,1,0,0,0,2402,507,1,0,0,0,2403,2401,1,0,0,0,2404,2405,3,136,68,0,
  	2405,2406,5,4,0,0,2406,2407,3,932,466,0,2407,509,1,0,0,0,2408,2411,3,
  	512,256,0,2409,2411,3,528,264,0,2410,2408,1,0,0,0,2410,2409,1,0,0,0,2411,
  	511,1,0,0,0,2412,2420,3,514,257,0,2413,2420,3,516,258,0,2414,2420,3,518,
  	259,0,2415,2420,3,520,260,0,2416,2420,3,522,261,0,2417,2420,3,524,262,
  	0,2418,2420,3,526,263,0,2419,2412,1,0,0,0,2419,2413,1,0,0,0,2419,2414,
  	1,0,0,0,2419,2415,1,0,0,0,2419,2416,1,0,0,0,2419,2417,1,0,0,0,2419,2418,
  	1,0,0,0,2420,513,1,0,0,0,2421,2422,5,13,0,0,2422,2423,5,14,0,0,2423,2424,
  	5,11,0,0,2424,2425,3,492,246,0,2425,2426,5,21,0,0,2426,2427,5,14,0,0,
  	2427,515,1,0,0,0,2428,2429,5,25,0,0,2429,2430,5,11,0,0,2430,2431,3,492,
  	246,0,2431,2432,5,21,0,0,2432,2433,5,25,0,0,2433,517,1,0,0,0,2434,2435,
  	5,14,0,0,2435,2436,5,11,0,0,2436,2437,3,492,246,0,2437,2438,5,21,0,0,
  	2438,2439,5,310,0,0,2439,519,1,0,0,0,2440,2441,5,13,0,0,2441,2442,5,25,
  	0,0,2442,2443,5,11,0,0,2443,2444,3,492,246,0,2444,2445,5,21,0,0,2445,
  	2446,5,25,0,0,2446,521,1,0,0,0,2447,2448,5,25,0,0,2448,2449,5,11,0,0,
  	2449,2450,3,492,246,0,2450,2451,5,21,0,0,2451,2452,5,313,0,0,2452,523,
  	1,0,0,0,2453,2454,5,13,0,0,2454,2455,5,14,0,0,2455,2456,5,11,0,0,2456,
  	2457,3,492,246,0,2457,2458,5,21,0,0,2458,2459,5,310,0,0,2459,525,1,0,
  	0,0,2460,2461,5,14,0,0,2461,2462,5,11,0,0,2462,2463,3,492,246,0,2463,
  	2464,5,21,0,0,2464,2465,5,14,0,0,2465,527,1,0,0,0,2466,2467,5,13,0,0,
  	2467,2476,5,14,0,0,2468,2476,5,25,0,0,2469,2476,5,310,0,0,2470,2471,5,
  	13,0,0,2471,2476,5,25,0,0,2472,2476,5,313,0,0,2473,2476,5,304,0,0,2474,
  	2476,5,14,0,0,2475,2466,1,0,0,0,2475,2468,1,0,0,0,2475,2469,1,0,0,0,2475,
  	2470,1,0,0,0,2475,2472,1,0,0,0,2475,2473,1,0,0,0,2475,2474,1,0,0,0,2476,
  	529,1,0,0,0,2477,2479,5,12,0,0,2478,2480,3,532,266,0,2479,2478,1,0,0,
  	0,2479,2480,1,0,0,0,2480,2482,1,0,0,0,2481,2483,3,446,223,0,2482,2481,
  	1,0,0,0,2482,2483,1,0,0,0,2483,2484,1,0,0,0,2484,2486,3,472,236,0,2485,
  	2487,3,534,267,0,2486,2485,1,0,0,0,2486,2487,1,0,0,0,2487,2488,1,0,0,
  	0,2488,2489,5,22,0,0,2489,531,1,0,0,0,2490,2491,3,154,77,0,2491,2492,
  	5,7,0,0,2492,533,1,0,0,0,2493,2494,5,278,0,0,2494,2495,3,932,466,0,2495,
  	535,1,0,0,0,2496,2497,3,538,269,0,2497,537,1,0,0,0,2498,2503,3,540,270,
  	0,2499,2500,5,5,0,0,2500,2502,3,540,270,0,2501,2499,1,0,0,0,2502,2505,
  	1,0,0,0,2503,2501,1,0,0,0,2503,2504,1,0,0,0,2504,539,1,0,0,0,2505,2503,
  	1,0,0,0,2506,2512,3,542,271,0,2507,2508,3,544,272,0,2508,2509,3,542,271,
  	0,2509,2511,1,0,0,0,2510,2507,1,0,0,0,2511,2514,1,0,0,0,2512,2510,1,0,
  	0,0,2512,2513,1,0,0,0,2513,541,1,0,0,0,2514,2512,1,0,0,0,2515,2517,5,
  	12,0,0,2516,2518,3,552,276,0,2517,2516,1,0,0,0,2517,2518,1,0,0,0,2518,
  	2519,1,0,0,0,2519,2520,5,22,0,0,2520,543,1,0,0,0,2521,2525,3,546,273,
  	0,2522,2525,3,548,274,0,2523,2525,3,550,275,0,2524,2521,1,0,0,0,2524,
  	2522,1,0,0,0,2524,2523,1,0,0,0,2525,545,1,0,0,0,2526,2527,5,13,0,0,2527,
  	2528,5,14,0,0,2528,2530,5,11,0,0,2529,2531,3,552,276,0,2530,2529,1,0,
  	0,0,2530,2531,1,0,0,0,2531,2532,1,0,0,0,2532,2533,5,21,0,0,2533,2534,
  	5,14,0,0,2534,547,1,0,0,0,2535,2536,5,14,0,0,2536,2538,5,11,0,0,2537,
  	2539,3,552,276,0,2538,2537,1,0,0,0,2538,2539,1,0,0,0,2539,2540,1,0,0,
  	0,2540,2541,5,21,0,0,2541,2542,5,310,0,0,2542,549,1,0,0,0,2543,2544,5,
  	25,0,0,2544,2546,5,11,0,0,2545,2547,3,552,276,0,2546,2545,1,0,0,0,2546,
  	2547,1,0,0,0,2547,2548,1,0,0,0,2548,2549,5,21,0,0,2549,2550,5,25,0,0,
  	2550,551,1,0,0,0,2551,2552,3,494,247,0,2552,2553,3,554,277,0,2553,2557,
  	1,0,0,0,2554,2557,3,494,247,0,2555,2557,3,554,277,0,2556,2551,1,0,0,0,
  	2556,2554,1,0,0,0,2556,2555,1,0,0,0,2557,553,1,0,0,0,2558,2559,3,498,
  	249,0,2559,2560,3,276,138,0,2560,2567,1,0,0,0,2561,2562,3,498,249,0,2562,
  	2563,3,276,138,0,2563,2564,3,504,252,0,2564,2567,1,0,0,0,2565,2567,3,
  	504,252,0,2566,2558,1,0,0,0,2566,2561,1,0,0,0,2566,2565,1,0,0,0,2567,
  	555,1,0,0,0,2568,2573,3,558,279,0,2569,2570,5,27,0,0,2570,2572,3,558,
  	279,0,2571,2569,1,0,0,0,2572,2575,1,0,0,0,2573,2571,1,0,0,0,2573,2574,
  	1,0,0,0,2574,557,1,0,0,0,2575,2573,1,0,0,0,2576,2581,3,560,280,0,2577,
  	2578,5,1,0,0,2578,2580,3,560,280,0,2579,2577,1,0,0,0,2580,2583,1,0,0,
  	0,2581,2579,1,0,0,0,2581,2582,1,0,0,0,2582,559,1,0,0,0,2583,2581,1,0,
  	0,0,2584,2586,5,8,0,0,2585,2584,1,0,0,0,2585,2586,1,0,0,0,2586,2587,1,
  	0,0,0,2587,2588,3,562,281,0,2588,561,1,0,0,0,2589,2593,3,132,66,0,2590,
  	2593,3,564,282,0,2591,2593,3,566,283,0,2592,2589,1,0,0,0,2592,2590,1,
  	0,0,0,2592,2591,1,0,0,0,2593,563,1,0,0,0,2594,2595,5,15,0,0,2595,565,
  	1,0,0,0,2596,2597,5,12,0,0,2597,2598,3,556,278,0,2598,2599,5,22,0,0,2599,
  	567,1,0,0,0,2600,2605,5,2,0,0,2601,2605,5,17,0,0,2602,2605,3,570,285,
  	0,2603,2605,3,572,286,0,2604,2600,1,0,0,0,2604,2601,1,0,0,0,2604,2602,
  	1,0,0,0,2604,2603,1,0,0,0,2605,569,1,0,0,0,2606,2607,5,10,0,0,2607,2608,
  	5,329,0,0,2608,2609,5,20,0,0,2609,571,1,0,0,0,2610,2612,5,10,0,0,2611,
  	2613,3,574,287,0,2612,2611,1,0,0,0,2612,2613,1,0,0,0,2613,2614,1,0,0,
  	0,2614,2616,5,5,0,0,2615,2617,3,576,288,0,2616,2615,1,0,0,0,2616,2617,
  	1,0,0,0,2617,2618,1,0,0,0,2618,2619,5,20,0,0,2619,573,1,0,0,0,2620,2621,
  	5,329,0,0,2621,575,1,0,0,0,2622,2623,5,329,0,0,2623,577,1,0,0,0,2624,
  	2632,3,580,290,0,2625,2632,3,582,291,0,2626,2632,3,584,292,0,2627,2632,
  	3,586,293,0,2628,2632,3,588,294,0,2629,2632,3,590,295,0,2630,2632,3,592,
  	296,0,2631,2624,1,0,0,0,2631,2625,1,0,0,0,2631,2626,1,0,0,0,2631,2627,
  	1,0,0,0,2631,2628,1,0,0,0,2631,2629,1,0,0,0,2631,2630,1,0,0,0,2632,579,
  	1,0,0,0,2633,2634,5,305,0,0,2634,2635,3,594,297,0,2635,2636,5,24,0,0,
  	2636,2637,5,14,0,0,2637,581,1,0,0,0,2638,2639,5,314,0,0,2639,2640,3,594,
  	297,0,2640,2641,5,24,0,0,2641,2642,5,25,0,0,2642,583,1,0,0,0,2643,2644,
  	5,308,0,0,2644,2645,3,594,297,0,2645,2646,5,311,0,0,2646,585,1,0,0,0,
  	2647,2648,5,306,0,0,2648,2649,3,594,297,0,2649,2650,5,24,0,0,2650,2651,
  	5,25,0,0,2651,587,1,0,0,0,2652,2653,5,314,0,0,2653,2654,3,594,297,0,2654,
  	2655,5,312,0,0,2655,589,1,0,0,0,2656,2657,5,305,0,0,2657,2658,3,594,297,
  	0,2658,2659,5,311,0,0,2659,591,1,0,0,0,2660,2661,5,308,0,0,2661,2662,
  	3,594,297,0,2662,2663,5,24,0,0,2663,2664,5,14,0,0,2664,593,1,0,0,0,2665,
  	2669,3,600,300,0,2666,2669,3,596,298,0,2667,2669,3,598,299,0,2668,2665,
  	1,0,0,0,2668,2666,1,0,0,0,2668,2667,1,0,0,0,2669,595,1,0,0,0,2670,2671,
  	3,600,300,0,2671,2672,5,27,0,0,2672,2677,3,600,300,0,2673,2674,5,27,0,
  	0,2674,2676,3,600,300,0,2675,2673,1,0,0,0,2676,2679,1,0,0,0,2677,2675,
  	1,0,0,0,2677,2678,1,0,0,0,2678,597,1,0,0,0,2679,2677,1,0,0,0,2680,2681,
  	3,600,300,0,2681,2682,5,299,0,0,2682,2687,3,600,300,0,2683,2684,5,299,
  	0,0,2684,2686,3,600,300,0,2685,2683,1,0,0,0,2686,2689,1,0,0,0,2687,2685,
  	1,0,0,0,2687,2688,1,0,0,0,2688,599,1,0,0,0,2689,2687,1,0,0,0,2690,2692,
  	3,602,301,0,2691,2690,1,0,0,0,2692,2693,1,0,0,0,2693,2691,1,0,0,0,2693,
  	2694,1,0,0,0,2694,601,1,0,0,0,2695,2700,3,604,302,0,2696,2697,5,1,0,0,
  	2697,2699,3,604,302,0,2698,2696,1,0,0,0,2699,2702,1,0,0,0,2700,2698,1,
  	0,0,0,2700,2701,1,0,0,0,2701,603,1,0,0,0,2702,2700,1,0,0,0,2703,2707,
  	3,610,305,0,2704,2707,3,606,303,0,2705,2707,3,608,304,0,2706,2703,1,0,
  	0,0,2706,2704,1,0,0,0,2706,2705,1,0,0,0,2707,605,1,0,0,0,2708,2709,3,
  	610,305,0,2709,2710,3,568,284,0,2710,607,1,0,0,0,2711,2712,3,610,305,
  	0,2712,2713,5,18,0,0,2713,609,1,0,0,0,2714,2717,3,612,306,0,2715,2717,
  	3,628,314,0,2716,2714,1,0,0,0,2716,2715,1,0,0,0,2717,611,1,0,0,0,2718,
  	2726,3,614,307,0,2719,2726,3,616,308,0,2720,2726,3,618,309,0,2721,2726,
  	3,620,310,0,2722,2726,3,622,311,0,2723,2726,3,624,312,0,2724,2726,3,626,
  	313,0,2725,2718,1,0,0,0,2725,2719,1,0,0,0,2725,2720,1,0,0,0,2725,2721,
  	1,0,0,0,2725,2722,1,0,0,0,2725,2723,1,0,0,0,2725,2724,1,0,0,0,2726,613,
  	1,0,0,0,2727,2728,5,13,0,0,2728,2729,3,628,314,0,2729,615,1,0,0,0,2730,
  	2731,5,25,0,0,2731,2732,3,628,314,0,2732,617,1,0,0,0,2733,2734,3,628,
  	314,0,2734,2735,5,9,0,0,2735,619,1,0,0,0,2736,2737,5,13,0,0,2737,2738,
  	5,25,0,0,2738,2739,3,628,314,0,2739,621,1,0,0,0,2740,2741,5,25,0,0,2741,
  	2742,3,628,314,0,2742,2743,5,9,0,0,2743,623,1,0,0,0,2744,2745,5,13,0,
  	0,2745,2746,3,628,314,0,2746,2747,5,9,0,0,2747,625,1,0,0,0,2748,2749,
  	5,14,0,0,2749,2750,3,628,314,0,2750,627,1,0,0,0,2751,2754,3,632,316,0,
  	2752,2754,3,630,315,0,2753,2751,1,0,0,0,2753,2752,1,0,0,0,2754,629,1,
  	0,0,0,2755,2756,5,8,0,0,2756,2757,3,632,316,0,2757,631,1,0,0,0,2758,2764,
  	3,132,66,0,2759,2760,5,12,0,0,2760,2761,3,594,297,0,2761,2762,5,22,0,
  	0,2762,2764,1,0,0,0,2763,2758,1,0,0,0,2763,2759,1,0,0,0,2764,633,1,0,
  	0,0,2765,2766,5,278,0,0,2766,2767,3,932,466,0,2767,635,1,0,0,0,2768,2769,
  	5,283,0,0,2769,2770,3,638,319,0,2770,637,1,0,0,0,2771,2776,3,640,320,
  	0,2772,2773,5,5,0,0,2773,2775,3,640,320,0,2774,2772,1,0,0,0,2775,2778,
  	1,0,0,0,2776,2774,1,0,0,0,2776,2777,1,0,0,0,2777,639,1,0,0,0,2778,2776,
  	1,0,0,0,2779,2781,3,642,321,0,2780,2782,3,644,322,0,2781,2780,1,0,0,0,
  	2781,2782,1,0,0,0,2782,641,1,0,0,0,2783,2784,3,138,69,0,2784,643,1,0,
  	0,0,2785,2786,5,36,0,0,2786,2787,3,160,80,0,2787,645,1,0,0,0,2788,2789,
  	5,120,0,0,2789,2790,5,52,0,0,2790,2791,3,648,324,0,2791,647,1,0,0,0,2792,
  	2795,3,650,325,0,2793,2794,5,5,0,0,2794,2796,3,650,325,0,2795,2793,1,
  	0,0,0,2795,2796,1,0,0,0,2796,2799,1,0,0,0,2797,2799,3,652,326,0,2798,
  	2792,1,0,0,0,2798,2797,1,0,0,0,2799,649,1,0,0,0,2800,2801,3,406,203,0,
  	2801,651,1,0,0,0,2802,2803,5,12,0,0,2803,2804,5,22,0,0,2804,653,1,0,0,
  	0,2805,2806,5,195,0,0,2806,2807,5,52,0,0,2807,2808,3,664,332,0,2808,655,
  	1,0,0,0,2809,2810,5,72,0,0,2810,2811,5,12,0,0,2811,2812,5,2,0,0,2812,
  	2832,5,22,0,0,2813,2814,3,658,329,0,2814,2816,5,12,0,0,2815,2817,3,660,
  	330,0,2816,2815,1,0,0,0,2816,2817,1,0,0,0,2817,2818,1,0,0,0,2818,2819,
  	3,932,466,0,2819,2820,5,22,0,0,2820,2832,1,0,0,0,2821,2822,3,662,331,
  	0,2822,2824,5,12,0,0,2823,2825,3,660,330,0,2824,2823,1,0,0,0,2824,2825,
  	1,0,0,0,2825,2826,1,0,0,0,2826,2827,3,932,466,0,2827,2828,5,5,0,0,2828,
  	2829,3,932,466,0,2829,2830,5,22,0,0,2830,2832,1,0,0,0,2831,2809,1,0,0,
  	0,2831,2813,1,0,0,0,2831,2821,1,0,0,0,2832,657,1,0,0,0,2833,2834,7,13,
  	0,0,2834,659,1,0,0,0,2835,2836,7,14,0,0,2836,661,1,0,0,0,2837,2838,7,
  	15,0,0,2838,663,1,0,0,0,2839,2844,3,666,333,0,2840,2841,5,5,0,0,2841,
  	2843,3,666,333,0,2842,2840,1,0,0,0,2843,2846,1,0,0,0,2844,2842,1,0,0,
  	0,2844,2845,1,0,0,0,2845,665,1,0,0,0,2846,2844,1,0,0,0,2847,2849,3,668,
  	334,0,2848,2850,3,670,335,0,2849,2848,1,0,0,0,2849,2850,1,0,0,0,2850,
  	2852,1,0,0,0,2851,2853,3,672,336,0,2852,2851,1,0,0,0,2852,2853,1,0,0,
  	0,2853,667,1,0,0,0,2854,2855,3,932,466,0,2855,669,1,0,0,0,2856,2857,7,
  	16,0,0,2857,671,1,0,0,0,2858,2859,5,186,0,0,2859,2863,5,109,0,0,2860,
  	2861,5,186,0,0,2861,2863,5,154,0,0,2862,2858,1,0,0,0,2862,2860,1,0,0,
  	0,2863,673,1,0,0,0,2864,2865,5,159,0,0,2865,2866,3,926,463,0,2866,675,
  	1,0,0,0,2867,2868,3,678,339,0,2868,2869,3,926,463,0,2869,677,1,0,0,0,
  	2870,2871,7,17,0,0,2871,679,1,0,0,0,2872,2873,5,10,0,0,2873,2874,3,682,
  	341,0,2874,2875,5,20,0,0,2875,681,1,0,0,0,2876,2877,3,684,342,0,2877,
  	683,1,0,0,0,2878,2883,3,686,343,0,2879,2880,5,5,0,0,2880,2882,3,686,343,
  	0,2881,2879,1,0,0,0,2882,2885,1,0,0,0,2883,2881,1,0,0,0,2883,2884,1,0,
  	0,0,2884,685,1,0,0,0,2885,2883,1,0,0,0,2886,2889,3,688,344,0,2887,2889,
  	3,702,351,0,2888,2886,1,0,0,0,2888,2887,1,0,0,0,2889,687,1,0,0,0,2890,
  	2894,3,690,345,0,2891,2892,5,294,0,0,2892,2894,3,692,346,0,2893,2890,
  	1,0,0,0,2893,2891,1,0,0,0,2894,689,1,0,0,0,2895,2897,5,12,0,0,2896,2898,
  	3,694,347,0,2897,2896,1,0,0,0,2897,2898,1,0,0,0,2898,2900,1,0,0,0,2899,
  	2901,3,696,348,0,2900,2899,1,0,0,0,2900,2901,1,0,0,0,2901,2902,1,0,0,
  	0,2902,2903,5,22,0,0,2903,691,1,0,0,0,2904,2906,5,255,0,0,2905,2904,1,
  	0,0,0,2905,2906,1,0,0,0,2906,2907,1,0,0,0,2907,2909,3,694,347,0,2908,
  	2910,3,696,348,0,2909,2908,1,0,0,0,2909,2910,1,0,0,0,2910,2913,1,0,0,
  	0,2911,2913,3,696,348,0,2912,2905,1,0,0,0,2912,2911,1,0,0,0,2913,693,
  	1,0,0,0,2914,2915,3,124,62,0,2915,695,1,0,0,0,2916,2922,3,698,349,0,2917,
  	2922,3,700,350,0,2918,2919,3,698,349,0,2919,2920,3,700,350,0,2920,2922,
  	1,0,0,0,2921,2916,1,0,0,0,2921,2917,1,0,0,0,2921,2918,1,0,0,0,2922,697,
  	1,0,0,0,2923,2924,3,766,383,0,2924,699,1,0,0,0,2925,2926,3,768,384,0,
  	2926,701,1,0,0,0,2927,2934,3,704,352,0,2928,2930,3,746,373,0,2929,2928,
  	1,0,0,0,2929,2930,1,0,0,0,2930,2931,1,0,0,0,2931,2932,5,292,0,0,2932,
  	2934,3,706,353,0,2933,2927,1,0,0,0,2933,2929,1,0,0,0,2934,703,1,0,0,0,
  	2935,2938,3,716,358,0,2936,2938,3,732,366,0,2937,2935,1,0,0,0,2937,2936,
  	1,0,0,0,2938,705,1,0,0,0,2939,2941,5,255,0,0,2940,2939,1,0,0,0,2940,2941,
  	1,0,0,0,2941,2942,1,0,0,0,2942,2946,3,708,354,0,2943,2944,3,710,355,0,
  	2944,2945,3,748,374,0,2945,2947,1,0,0,0,2946,2943,1,0,0,0,2946,2947,1,
  	0,0,0,2947,2952,1,0,0,0,2948,2949,3,710,355,0,2949,2950,3,748,374,0,2950,
  	2952,1,0,0,0,2951,2940,1,0,0,0,2951,2948,1,0,0,0,2952,707,1,0,0,0,2953,
  	2954,3,124,62,0,2954,709,1,0,0,0,2955,2961,3,712,356,0,2956,2961,3,714,
  	357,0,2957,2958,3,712,356,0,2958,2959,3,714,357,0,2959,2961,1,0,0,0,2960,
  	2955,1,0,0,0,2960,2956,1,0,0,0,2960,2957,1,0,0,0,2961,711,1,0,0,0,2962,
  	2963,3,766,383,0,2963,713,1,0,0,0,2964,2965,3,768,384,0,2965,715,1,0,
  	0,0,2966,2970,3,718,359,0,2967,2970,3,720,360,0,2968,2970,3,722,361,0,
  	2969,2966,1,0,0,0,2969,2967,1,0,0,0,2969,2968,1,0,0,0,2970,717,1,0,0,
  	0,2971,2972,3,742,371,0,2972,2973,3,724,362,0,2973,2974,3,744,372,0,2974,
  	719,1,0,0,0,2975,2976,3,744,372,0,2976,2977,3,726,363,0,2977,2978,3,742,
  	371,0,2978,721,1,0,0,0,2979,2980,3,742,371,0,2980,2981,3,728,364,0,2981,
  	2982,3,744,372,0,2982,723,1,0,0,0,2983,2984,5,14,0,0,2984,2985,5,11,0,
  	0,2985,2986,3,730,365,0,2986,2987,5,21,0,0,2987,2988,5,310,0,0,2988,725,
  	1,0,0,0,2989,2990,5,13,0,0,2990,2991,5,14,0,0,2991,2992,5,11,0,0,2992,
  	2993,3,730,365,0,2993,2994,5,21,0,0,2994,2995,5,14,0,0,2995,727,1,0,0,
  	0,2996,2997,5,25,0,0,2997,2998,5,11,0,0,2998,2999,3,730,365,0,2999,3000,
  	5,21,0,0,3000,3001,5,25,0,0,3001,729,1,0,0,0,3002,3004,3,708,354,0,3003,
  	3002,1,0,0,0,3003,3004,1,0,0,0,3004,3006,1,0,0,0,3005,3007,3,710,355,
  	0,3006,3005,1,0,0,0,3006,3007,1,0,0,0,3007,731,1,0,0,0,3008,3012,3,734,
  	367,0,3009,3012,3,736,368,0,3010,3012,3,738,369,0,3011,3008,1,0,0,0,3011,
  	3009,1,0,0,0,3011,3010,1,0,0,0,3012,733,1,0,0,0,3013,3014,3,742,371,0,
  	3014,3015,5,310,0,0,3015,3016,3,744,372,0,3016,735,1,0,0,0,3017,3018,
  	3,744,372,0,3018,3019,5,13,0,0,3019,3020,5,14,0,0,3020,3021,3,742,371,
  	0,3021,737,1,0,0,0,3022,3023,3,742,371,0,3023,3024,5,25,0,0,3024,3025,
  	3,744,372,0,3025,739,1,0,0,0,3026,3029,3,742,371,0,3027,3029,3,744,372,
  	0,3028,3026,1,0,0,0,3028,3027,1,0,0,0,3029,741,1,0,0,0,3030,3031,5,12,
  	0,0,3031,3032,3,762,381,0,3032,3033,5,22,0,0,3033,3040,1,0,0,0,3034,3036,
  	5,12,0,0,3035,3037,3,696,348,0,3036,3035,1,0,0,0,3036,3037,1,0,0,0,3037,
  	3038,1,0,0,0,3038,3040,5,22,0,0,3039,3030,1,0,0,0,3039,3034,1,0,0,0,3040,
  	743,1,0,0,0,3041,3042,5,12,0,0,3042,3043,3,764,382,0,3043,3044,5,22,0,
  	0,3044,3051,1,0,0,0,3045,3047,5,12,0,0,3046,3048,3,696,348,0,3047,3046,
  	1,0,0,0,3047,3048,1,0,0,0,3048,3049,1,0,0,0,3049,3051,5,22,0,0,3050,3041,
  	1,0,0,0,3050,3045,1,0,0,0,3051,745,1,0,0,0,3052,3053,7,18,0,0,3053,747,
  	1,0,0,0,3054,3055,5,67,0,0,3055,3056,3,750,375,0,3056,749,1,0,0,0,3057,
  	3062,3,752,376,0,3058,3062,3,754,377,0,3059,3062,3,756,378,0,3060,3062,
  	3,732,366,0,3061,3057,1,0,0,0,3061,3058,1,0,0,0,3061,3059,1,0,0,0,3061,
  	3060,1,0,0,0,3062,751,1,0,0,0,3063,3064,5,12,0,0,3064,3065,3,762,381,
  	0,3065,3066,3,758,379,0,3066,3067,3,764,382,0,3067,3068,5,22,0,0,3068,
  	753,1,0,0,0,3069,3070,5,12,0,0,3070,3071,3,764,382,0,3071,3072,5,13,0,
  	0,3072,3073,5,14,0,0,3073,3074,3,762,381,0,3074,3075,5,22,0,0,3075,755,
  	1,0,0,0,3076,3077,5,12,0,0,3077,3078,3,762,381,0,3078,3079,3,760,380,
  	0,3079,3080,3,764,382,0,3080,3081,5,22,0,0,3081,757,1,0,0,0,3082,3083,
  	7,19,0,0,3083,759,1,0,0,0,3084,3085,7,20,0,0,3085,761,1,0,0,0,3086,3087,
  	3,124,62,0,3087,763,1,0,0,0,3088,3089,3,124,62,0,3089,765,1,0,0,0,3090,
  	3091,5,151,0,0,3091,3098,3,132,66,0,3092,3093,5,153,0,0,3093,3098,3,276,
  	138,0,3094,3095,3,498,249,0,3095,3096,3,276,138,0,3096,3098,1,0,0,0,3097,
  	3090,1,0,0,0,3097,3092,1,0,0,0,3097,3094,1,0,0,0,3098,767,1,0,0,0,3099,
  	3101,5,10,0,0,3100,3102,3,770,385,0,3101,3100,1,0,0,0,3101,3102,1,0,0,
  	0,3102,3103,1,0,0,0,3103,3104,5,20,0,0,3104,769,1,0,0,0,3105,3110,3,772,
  	386,0,3106,3107,5,5,0,0,3107,3109,3,772,386,0,3108,3106,1,0,0,0,3109,
  	3112,1,0,0,0,3110,3108,1,0,0,0,3110,3111,1,0,0,0,3111,771,1,0,0,0,3112,
  	3110,1,0,0,0,3113,3115,3,136,68,0,3114,3116,3,780,390,0,3115,3114,1,0,
  	0,0,3115,3116,1,0,0,0,3116,3117,1,0,0,0,3117,3118,3,774,387,0,3118,773,
  	1,0,0,0,3119,3120,3,778,389,0,3120,775,1,0,0,0,3121,3123,5,46,0,0,3122,
  	3121,1,0,0,0,3122,3123,1,0,0,0,3123,3124,1,0,0,0,3124,3125,5,241,0,0,
  	3125,3126,3,860,430,0,3126,777,1,0,0,0,3127,3128,6,389,-1,0,3128,3188,
  	3,782,391,0,3129,3188,3,864,432,0,3130,3131,3,856,428,0,3131,3132,5,13,
  	0,0,3132,3133,3,778,389,0,3133,3138,5,9,0,0,3134,3135,5,11,0,0,3135,3136,
  	3,792,396,0,3136,3137,5,21,0,0,3137,3139,1,0,0,0,3138,3134,1,0,0,0,3138,
  	3139,1,0,0,0,3139,3141,1,0,0,0,3140,3142,3,866,433,0,3141,3140,1,0,0,
  	0,3141,3142,1,0,0,0,3142,3188,1,0,0,0,3143,3145,5,34,0,0,3144,3143,1,
  	0,0,0,3144,3145,1,0,0,0,3145,3146,1,0,0,0,3146,3148,5,213,0,0,3147,3149,
  	3,866,433,0,3148,3147,1,0,0,0,3148,3149,1,0,0,0,3149,3188,1,0,0,0,3150,
  	3152,5,213,0,0,3151,3150,1,0,0,0,3151,3152,1,0,0,0,3152,3153,1,0,0,0,
  	3153,3155,3,860,430,0,3154,3156,3,866,433,0,3155,3154,1,0,0,0,3155,3156,
  	1,0,0,0,3156,3188,1,0,0,0,3157,3159,5,34,0,0,3158,3160,5,272,0,0,3159,
  	3158,1,0,0,0,3159,3160,1,0,0,0,3160,3162,1,0,0,0,3161,3163,3,866,433,
  	0,3162,3161,1,0,0,0,3162,3163,1,0,0,0,3163,3188,1,0,0,0,3164,3166,5,34,
  	0,0,3165,3164,1,0,0,0,3165,3166,1,0,0,0,3166,3167,1,0,0,0,3167,3168,5,
  	208,0,0,3168,3170,5,272,0,0,3169,3171,3,866,433,0,3170,3169,1,0,0,0,3170,
  	3171,1,0,0,0,3171,3188,1,0,0,0,3172,3174,5,34,0,0,3173,3175,5,272,0,0,
  	3174,3173,1,0,0,0,3174,3175,1,0,0,0,3175,3176,1,0,0,0,3176,3177,5,13,
  	0,0,3177,3182,3,778,389,0,3178,3179,5,27,0,0,3179,3181,3,778,389,0,3180,
  	3178,1,0,0,0,3181,3184,1,0,0,0,3182,3180,1,0,0,0,3182,3183,1,0,0,0,3183,
  	3185,1,0,0,0,3184,3182,1,0,0,0,3185,3186,5,9,0,0,3186,3188,1,0,0,0,3187,
  	3127,1,0,0,0,3187,3129,1,0,0,0,3187,3130,1,0,0,0,3187,3144,1,0,0,0,3187,
  	3151,1,0,0,0,3187,3157,1,0,0,0,3187,3165,1,0,0,0,3187,3172,1,0,0,0,3188,
  	3209,1,0,0,0,3189,3190,10,7,0,0,3190,3195,3,856,428,0,3191,3192,5,11,
  	0,0,3192,3193,3,792,396,0,3193,3194,5,21,0,0,3194,3196,1,0,0,0,3195,3191,
  	1,0,0,0,3195,3196,1,0,0,0,3196,3198,1,0,0,0,3197,3199,3,866,433,0,3198,
  	3197,1,0,0,0,3198,3199,1,0,0,0,3199,3208,1,0,0,0,3200,3203,10,1,0,0,3201,
  	3202,5,27,0,0,3202,3204,3,778,389,0,3203,3201,1,0,0,0,3204,3205,1,0,0,
  	0,3205,3203,1,0,0,0,3205,3206,1,0,0,0,3206,3208,1,0,0,0,3207,3189,1,0,
  	0,0,3207,3200,1,0,0,0,3208,3211,1,0,0,0,3209,3207,1,0,0,0,3209,3210,1,
  	0,0,0,3210,779,1,0,0,0,3211,3209,1,0,0,0,3212,3213,7,21,0,0,3213,781,
  	1,0,0,0,3214,3221,3,784,392,0,3215,3221,3,786,393,0,3216,3221,3,788,394,
  	0,3217,3221,3,796,398,0,3218,3221,3,816,408,0,3219,3221,3,834,417,0,3220,
  	3214,1,0,0,0,3220,3215,1,0,0,0,3220,3216,1,0,0,0,3220,3217,1,0,0,0,3220,
  	3218,1,0,0,0,3220,3219,1,0,0,0,3221,783,1,0,0,0,3222,3224,7,22,0,0,3223,
  	3225,3,866,433,0,3224,3223,1,0,0,0,3224,3225,1,0,0,0,3225,785,1,0,0,0,
  	3226,3231,7,23,0,0,3227,3228,5,12,0,0,3228,3229,3,792,396,0,3229,3230,
  	5,22,0,0,3230,3232,1,0,0,0,3231,3227,1,0,0,0,3231,3232,1,0,0,0,3232,3234,
  	1,0,0,0,3233,3235,3,866,433,0,3234,3233,1,0,0,0,3234,3235,1,0,0,0,3235,
  	787,1,0,0,0,3236,3246,5,54,0,0,3237,3241,5,12,0,0,3238,3239,3,790,395,
  	0,3239,3240,5,5,0,0,3240,3242,1,0,0,0,3241,3238,1,0,0,0,3241,3242,1,0,
  	0,0,3242,3243,1,0,0,0,3243,3244,3,792,396,0,3244,3245,5,22,0,0,3245,3247,
  	1,0,0,0,3246,3237,1,0,0,0,3246,3247,1,0,0,0,3247,3249,1,0,0,0,3248,3250,
  	3,866,433,0,3249,3248,1,0,0,0,3249,3250,1,0,0,0,3250,3272,1,0,0,0,3251,
  	3256,5,45,0,0,3252,3253,5,12,0,0,3253,3254,3,794,397,0,3254,3255,5,22,
  	0,0,3255,3257,1,0,0,0,3256,3252,1,0,0,0,3256,3257,1,0,0,0,3257,3259,1,
  	0,0,0,3258,3260,3,866,433,0,3259,3258,1,0,0,0,3259,3260,1,0,0,0,3260,
  	3272,1,0,0,0,3261,3266,5,273,0,0,3262,3263,5,12,0,0,3263,3264,3,792,396,
  	0,3264,3265,5,22,0,0,3265,3267,1,0,0,0,3266,3262,1,0,0,0,3266,3267,1,
  	0,0,0,3267,3269,1,0,0,0,3268,3270,3,866,433,0,3269,3268,1,0,0,0,3269,
  	3270,1,0,0,0,3270,3272,1,0,0,0,3271,3236,1,0,0,0,3271,3251,1,0,0,0,3271,
  	3261,1,0,0,0,3272,789,1,0,0,0,3273,3274,5,329,0,0,3274,791,1,0,0,0,3275,
  	3276,5,329,0,0,3276,793,1,0,0,0,3277,3278,5,329,0,0,3278,795,1,0,0,0,
  	3279,3282,3,798,399,0,3280,3282,3,814,407,0,3281,3279,1,0,0,0,3281,3280,
  	1,0,0,0,3282,797,1,0,0,0,3283,3286,3,800,400,0,3284,3286,3,808,404,0,
  	3285,3283,1,0,0,0,3285,3284,1,0,0,0,3286,799,1,0,0,0,3287,3290,3,802,
  	401,0,3288,3290,3,804,402,0,3289,3287,1,0,0,0,3289,3288,1,0,0,0,3290,
  	801,1,0,0,0,3291,3293,5,135,0,0,3292,3294,3,866,433,0,3293,3292,1,0,0,
  	0,3293,3294,1,0,0,0,3294,3338,1,0,0,0,3295,3297,5,136,0,0,3296,3298,3,
  	866,433,0,3297,3296,1,0,0,0,3297,3298,1,0,0,0,3298,3338,1,0,0,0,3299,
  	3301,5,137,0,0,3300,3302,3,866,433,0,3301,3300,1,0,0,0,3301,3302,1,0,
  	0,0,3302,3338,1,0,0,0,3303,3305,5,138,0,0,3304,3306,3,866,433,0,3305,
  	3304,1,0,0,0,3305,3306,1,0,0,0,3306,3338,1,0,0,0,3307,3309,5,139,0,0,
  	3308,3310,3,866,433,0,3309,3308,1,0,0,0,3309,3310,1,0,0,0,3310,3338,1,
  	0,0,0,3311,3313,5,140,0,0,3312,3314,3,866,433,0,3313,3312,1,0,0,0,3313,
  	3314,1,0,0,0,3314,3338,1,0,0,0,3315,3317,5,233,0,0,3316,3318,3,866,433,
  	0,3317,3316,1,0,0,0,3317,3318,1,0,0,0,3318,3338,1,0,0,0,3319,3324,5,134,
  	0,0,3320,3321,5,12,0,0,3321,3322,3,810,405,0,3322,3323,5,22,0,0,3323,
  	3325,1,0,0,0,3324,3320,1,0,0,0,3324,3325,1,0,0,0,3325,3327,1,0,0,0,3326,
  	3328,3,866,433,0,3327,3326,1,0,0,0,3327,3328,1,0,0,0,3328,3338,1,0,0,
  	0,3329,3338,5,44,0,0,3330,3332,5,228,0,0,3331,3330,1,0,0,0,3331,3332,
  	1,0,0,0,3332,3333,1,0,0,0,3333,3335,3,806,403,0,3334,3336,3,866,433,0,
  	3335,3334,1,0,0,0,3335,3336,1,0,0,0,3336,3338,1,0,0,0,3337,3291,1,0,0,
  	0,3337,3295,1,0,0,0,3337,3299,1,0,0,0,3337,3303,1,0,0,0,3337,3307,1,0,
  	0,0,3337,3311,1,0,0,0,3337,3315,1,0,0,0,3337,3319,1,0,0,0,3337,3329,1,
  	0,0,0,3337,3331,1,0,0,0,3338,803,1,0,0,0,3339,3341,5,264,0,0,3340,3342,
  	3,866,433,0,3341,3340,1,0,0,0,3341,3342,1,0,0,0,3342,3387,1,0,0,0,3343,
  	3345,5,260,0,0,3344,3346,3,866,433,0,3345,3344,1,0,0,0,3345,3346,1,0,
  	0,0,3346,3387,1,0,0,0,3347,3349,5,262,0,0,3348,3350,3,866,433,0,3349,
  	3348,1,0,0,0,3349,3350,1,0,0,0,3350,3387,1,0,0,0,3351,3353,5,263,0,0,
  	3352,3354,3,866,433,0,3353,3352,1,0,0,0,3353,3354,1,0,0,0,3354,3387,1,
  	0,0,0,3355,3357,5,259,0,0,3356,3358,3,866,433,0,3357,3356,1,0,0,0,3357,
  	3358,1,0,0,0,3358,3387,1,0,0,0,3359,3361,5,261,0,0,3360,3362,3,866,433,
  	0,3361,3360,1,0,0,0,3361,3362,1,0,0,0,3362,3387,1,0,0,0,3363,3365,5,271,
  	0,0,3364,3366,3,866,433,0,3365,3364,1,0,0,0,3365,3366,1,0,0,0,3366,3387,
  	1,0,0,0,3367,3372,5,258,0,0,3368,3369,5,12,0,0,3369,3370,3,810,405,0,
  	3370,3371,5,22,0,0,3371,3373,1,0,0,0,3372,3368,1,0,0,0,3372,3373,1,0,
  	0,0,3373,3375,1,0,0,0,3374,3376,3,866,433,0,3375,3374,1,0,0,0,3375,3376,
  	1,0,0,0,3376,3387,1,0,0,0,3377,3379,5,257,0,0,3378,3380,3,866,433,0,3379,
  	3378,1,0,0,0,3379,3380,1,0,0,0,3380,3387,1,0,0,0,3381,3382,5,268,0,0,
  	3382,3384,3,806,403,0,3383,3385,3,866,433,0,3384,3383,1,0,0,0,3384,3385,
  	1,0,0,0,3385,3387,1,0,0,0,3386,3339,1,0,0,0,3386,3343,1,0,0,0,3386,3347,
  	1,0,0,0,3386,3351,1,0,0,0,3386,3355,1,0,0,0,3386,3359,1,0,0,0,3386,3363,
  	1,0,0,0,3386,3367,1,0,0,0,3386,3377,1,0,0,0,3386,3381,1,0,0,0,3387,805,
  	1,0,0,0,3388,3390,5,142,0,0,3389,3391,3,866,433,0,3390,3389,1,0,0,0,3390,
  	3391,1,0,0,0,3391,3433,1,0,0,0,3392,3394,5,143,0,0,3393,3395,3,866,433,
  	0,3394,3393,1,0,0,0,3394,3395,1,0,0,0,3395,3433,1,0,0,0,3396,3398,5,144,
  	0,0,3397,3399,3,866,433,0,3398,3397,1,0,0,0,3398,3399,1,0,0,0,3399,3433,
  	1,0,0,0,3400,3402,5,145,0,0,3401,3403,3,866,433,0,3402,3401,1,0,0,0,3402,
  	3403,1,0,0,0,3403,3433,1,0,0,0,3404,3406,5,146,0,0,3405,3407,3,866,433,
  	0,3406,3405,1,0,0,0,3406,3407,1,0,0,0,3407,3433,1,0,0,0,3408,3410,5,147,
  	0,0,3409,3411,3,866,433,0,3410,3409,1,0,0,0,3410,3411,1,0,0,0,3411,3433,
  	1,0,0,0,3412,3413,5,232,0,0,3413,3415,5,141,0,0,3414,3416,3,866,433,0,
  	3415,3414,1,0,0,0,3415,3416,1,0,0,0,3416,3433,1,0,0,0,3417,3422,5,141,
  	0,0,3418,3419,5,12,0,0,3419,3420,3,810,405,0,3420,3421,5,22,0,0,3421,
  	3423,1,0,0,0,3422,3418,1,0,0,0,3422,3423,1,0,0,0,3423,3425,1,0,0,0,3424,
  	3426,3,866,433,0,3425,3424,1,0,0,0,3425,3426,1,0,0,0,3426,3433,1,0,0,
  	0,3427,3428,5,43,0,0,3428,3430,5,141,0,0,3429,3431,3,866,433,0,3430,3429,
  	1,0,0,0,3430,3431,1,0,0,0,3431,3433,1,0,0,0,3432,3388,1,0,0,0,3432,3392,
  	1,0,0,0,3432,3396,1,0,0,0,3432,3400,1,0,0,0,3432,3404,1,0,0,0,3432,3408,
  	1,0,0,0,3432,3412,1,0,0,0,3432,3417,1,0,0,0,3432,3427,1,0,0,0,3433,807,
  	1,0,0,0,3434,3445,7,24,0,0,3435,3436,5,12,0,0,3436,3439,3,810,405,0,3437,
  	3438,5,5,0,0,3438,3440,3,812,406,0,3439,3437,1,0,0,0,3439,3440,1,0,0,
  	0,3440,3441,1,0,0,0,3441,3443,5,22,0,0,3442,3444,3,866,433,0,3443,3442,
  	1,0,0,0,3443,3444,1,0,0,0,3444,3446,1,0,0,0,3445,3435,1,0,0,0,3445,3446,
  	1,0,0,0,3446,809,1,0,0,0,3447,3448,5,329,0,0,3448,811,1,0,0,0,3449,3450,
  	5,329,0,0,3450,813,1,0,0,0,3451,3453,5,112,0,0,3452,3454,3,866,433,0,
  	3453,3452,1,0,0,0,3453,3454,1,0,0,0,3454,3497,1,0,0,0,3455,3457,5,114,
  	0,0,3456,3458,3,866,433,0,3457,3456,1,0,0,0,3457,3458,1,0,0,0,3458,3497,
  	1,0,0,0,3459,3461,5,115,0,0,3460,3462,3,866,433,0,3461,3460,1,0,0,0,3461,
  	3462,1,0,0,0,3462,3497,1,0,0,0,3463,3465,5,111,0,0,3464,3466,3,866,433,
  	0,3465,3464,1,0,0,0,3465,3466,1,0,0,0,3466,3497,1,0,0,0,3467,3469,5,113,
  	0,0,3468,3470,3,866,433,0,3469,3468,1,0,0,0,3469,3470,1,0,0,0,3470,3497,
  	1,0,0,0,3471,3480,5,110,0,0,3472,3473,5,12,0,0,3473,3476,3,810,405,0,
  	3474,3475,5,5,0,0,3475,3477,3,812,406,0,3476,3474,1,0,0,0,3476,3477,1,
  	0,0,0,3477,3478,1,0,0,0,3478,3479,5,22,0,0,3479,3481,1,0,0,0,3480,3472,
  	1,0,0,0,3480,3481,1,0,0,0,3481,3483,1,0,0,0,3482,3484,3,866,433,0,3483,
  	3482,1,0,0,0,3483,3484,1,0,0,0,3484,3497,1,0,0,0,3485,3487,5,212,0,0,
  	3486,3488,3,866,433,0,3487,3486,1,0,0,0,3487,3488,1,0,0,0,3488,3497,1,
  	0,0,0,3489,3491,5,94,0,0,3490,3492,5,206,0,0,3491,3490,1,0,0,0,3491,3492,
  	1,0,0,0,3492,3494,1,0,0,0,3493,3495,3,866,433,0,3494,3493,1,0,0,0,3494,
  	3495,1,0,0,0,3495,3497,1,0,0,0,3496,3451,1,0,0,0,3496,3455,1,0,0,0,3496,
  	3459,1,0,0,0,3496,3463,1,0,0,0,3496,3467,1,0,0,0,3496,3471,1,0,0,0,3496,
  	3485,1,0,0,0,3496,3489,1,0,0,0,3497,815,1,0,0,0,3498,3501,3,818,409,0,
  	3499,3501,3,820,410,0,3500,3498,1,0,0,0,3500,3499,1,0,0,0,3501,817,1,
  	0,0,0,3502,3508,3,822,411,0,3503,3508,3,824,412,0,3504,3508,3,826,413,
  	0,3505,3508,3,828,414,0,3506,3508,3,830,415,0,3507,3502,1,0,0,0,3507,
  	3503,1,0,0,0,3507,3504,1,0,0,0,3507,3505,1,0,0,0,3507,3506,1,0,0,0,3508,
  	819,1,0,0,0,3509,3510,3,832,416,0,3510,821,1,0,0,0,3511,3512,5,285,0,
  	0,3512,3514,5,82,0,0,3513,3515,3,866,433,0,3514,3513,1,0,0,0,3514,3515,
  	1,0,0,0,3515,3523,1,0,0,0,3516,3517,5,247,0,0,3517,3518,5,279,0,0,3518,
  	3520,5,248,0,0,3519,3521,3,866,433,0,3520,3519,1,0,0,0,3520,3521,1,0,
  	0,0,3521,3523,1,0,0,0,3522,3511,1,0,0,0,3522,3516,1,0,0,0,3523,823,1,
  	0,0,0,3524,3525,5,162,0,0,3525,3527,5,82,0,0,3526,3528,3,866,433,0,3527,
  	3526,1,0,0,0,3527,3528,1,0,0,0,3528,3538,1,0,0,0,3529,3532,5,247,0,0,
  	3530,3531,5,280,0,0,3531,3533,5,248,0,0,3532,3530,1,0,0,0,3532,3533,1,
  	0,0,0,3533,3535,1,0,0,0,3534,3536,3,866,433,0,3535,3534,1,0,0,0,3535,
  	3536,1,0,0,0,3536,3538,1,0,0,0,3537,3524,1,0,0,0,3537,3529,1,0,0,0,3538,
  	825,1,0,0,0,3539,3541,5,81,0,0,3540,3542,3,866,433,0,3541,3540,1,0,0,
  	0,3541,3542,1,0,0,0,3542,827,1,0,0,0,3543,3544,5,285,0,0,3544,3546,5,
  	246,0,0,3545,3547,3,866,433,0,3546,3545,1,0,0,0,3546,3547,1,0,0,0,3547,
  	3555,1,0,0,0,3548,3549,5,246,0,0,3549,3550,5,279,0,0,3550,3552,5,248,
  	0,0,3551,3553,3,866,433,0,3552,3551,1,0,0,0,3552,3553,1,0,0,0,3553,3555,
  	1,0,0,0,3554,3543,1,0,0,0,3554,3548,1,0,0,0,3555,829,1,0,0,0,3556,3557,
  	5,162,0,0,3557,3559,5,246,0,0,3558,3560,3,866,433,0,3559,3558,1,0,0,0,
  	3559,3560,1,0,0,0,3560,3568,1,0,0,0,3561,3562,5,246,0,0,3562,3563,5,280,
  	0,0,3563,3565,5,248,0,0,3564,3566,3,866,433,0,3565,3564,1,0,0,0,3565,
  	3566,1,0,0,0,3566,3568,1,0,0,0,3567,3556,1,0,0,0,3567,3561,1,0,0,0,3568,
  	831,1,0,0,0,3569,3571,5,96,0,0,3570,3572,3,866,433,0,3571,3570,1,0,0,
  	0,3571,3572,1,0,0,0,3572,833,1,0,0,0,3573,3578,3,836,418,0,3574,3578,
  	3,842,421,0,3575,3578,3,844,422,0,3576,3578,3,850,425,0,3577,3573,1,0,
  	0,0,3577,3574,1,0,0,0,3577,3575,1,0,0,0,3577,3576,1,0,0,0,3578,835,1,
  	0,0,0,3579,3582,3,840,420,0,3580,3582,3,838,419,0,3581,3579,1,0,0,0,3581,
  	3580,1,0,0,0,3582,837,1,0,0,0,3583,3585,5,208,0,0,3584,3583,1,0,0,0,3584,
  	3585,1,0,0,0,3585,3586,1,0,0,0,3586,3587,5,119,0,0,3587,3589,3,680,340,
  	0,3588,3590,3,866,433,0,3589,3588,1,0,0,0,3589,3590,1,0,0,0,3590,839,
  	1,0,0,0,3591,3593,5,34,0,0,3592,3594,5,208,0,0,3593,3592,1,0,0,0,3593,
  	3594,1,0,0,0,3594,3595,1,0,0,0,3595,3597,5,119,0,0,3596,3598,3,866,433,
  	0,3597,3596,1,0,0,0,3597,3598,1,0,0,0,3598,841,1,0,0,0,3599,3601,3,776,
  	388,0,3600,3602,3,866,433,0,3601,3600,1,0,0,0,3601,3602,1,0,0,0,3602,
  	843,1,0,0,0,3603,3606,3,848,424,0,3604,3606,3,846,423,0,3605,3603,1,0,
  	0,0,3605,3604,1,0,0,0,3606,845,1,0,0,0,3607,3609,3,688,344,0,3608,3610,
  	3,866,433,0,3609,3608,1,0,0,0,3609,3610,1,0,0,0,3610,847,1,0,0,0,3611,
  	3613,5,34,0,0,3612,3611,1,0,0,0,3612,3613,1,0,0,0,3613,3614,1,0,0,0,3614,
  	3616,5,294,0,0,3615,3617,3,866,433,0,3616,3615,1,0,0,0,3616,3617,1,0,
  	0,0,3617,849,1,0,0,0,3618,3621,3,854,427,0,3619,3621,3,852,426,0,3620,
  	3618,1,0,0,0,3620,3619,1,0,0,0,3621,851,1,0,0,0,3622,3624,3,702,351,0,
  	3623,3625,3,866,433,0,3624,3623,1,0,0,0,3624,3625,1,0,0,0,3625,853,1,
  	0,0,0,3626,3628,5,34,0,0,3627,3626,1,0,0,0,3627,3628,1,0,0,0,3628,3629,
  	1,0,0,0,3629,3631,5,292,0,0,3630,3632,3,866,433,0,3631,3630,1,0,0,0,3631,
  	3632,1,0,0,0,3632,855,1,0,0,0,3633,3635,5,120,0,0,3634,3633,1,0,0,0,3634,
  	3635,1,0,0,0,3635,3636,1,0,0,0,3636,3637,3,858,429,0,3637,857,1,0,0,0,
  	3638,3639,7,25,0,0,3639,859,1,0,0,0,3640,3642,5,10,0,0,3641,3643,3,862,
  	431,0,3642,3641,1,0,0,0,3642,3643,1,0,0,0,3643,3644,1,0,0,0,3644,3645,
  	5,20,0,0,3645,861,1,0,0,0,3646,3651,3,868,434,0,3647,3648,5,5,0,0,3648,
  	3650,3,868,434,0,3649,3647,1,0,0,0,3650,3653,1,0,0,0,3651,3649,1,0,0,
  	0,3651,3652,1,0,0,0,3652,863,1,0,0,0,3653,3651,1,0,0,0,3654,3656,5,200,
  	0,0,3655,3657,3,866,433,0,3656,3655,1,0,0,0,3656,3657,1,0,0,0,3657,865,
  	1,0,0,0,3658,3659,5,183,0,0,3659,3660,5,184,0,0,3660,867,1,0,0,0,3661,
  	3663,3,138,69,0,3662,3664,3,780,390,0,3663,3662,1,0,0,0,3663,3664,1,0,
  	0,0,3664,3665,1,0,0,0,3665,3666,3,778,389,0,3666,869,1,0,0,0,3667,3671,
  	3,872,436,0,3668,3671,3,876,438,0,3669,3671,3,906,453,0,3670,3667,1,0,
  	0,0,3670,3668,1,0,0,0,3670,3669,1,0,0,0,3671,871,1,0,0,0,3672,3677,5,
  	24,0,0,3673,3674,3,880,440,0,3674,3675,3,116,58,0,3675,3677,1,0,0,0,3676,
  	3672,1,0,0,0,3676,3673,1,0,0,0,3677,873,1,0,0,0,3678,3679,3,880,440,0,
  	3679,3680,3,116,58,0,3680,875,1,0,0,0,3681,3686,3,878,439,0,3682,3683,
  	3,882,441,0,3683,3684,3,116,58,0,3684,3686,1,0,0,0,3685,3681,1,0,0,0,
  	3685,3682,1,0,0,0,3686,877,1,0,0,0,3687,3688,7,26,0,0,3688,879,1,0,0,
  	0,3689,3691,5,24,0,0,3690,3692,3,884,442,0,3691,3690,1,0,0,0,3691,3692,
  	1,0,0,0,3692,881,1,0,0,0,3693,3705,5,302,0,0,3694,3695,5,24,0,0,3695,
  	3697,5,302,0,0,3696,3694,1,0,0,0,3697,3700,1,0,0,0,3698,3696,1,0,0,0,
  	3698,3699,1,0,0,0,3699,3701,1,0,0,0,3700,3698,1,0,0,0,3701,3703,5,24,
  	0,0,3702,3704,3,884,442,0,3703,3702,1,0,0,0,3703,3704,1,0,0,0,3704,3706,
  	1,0,0,0,3705,3698,1,0,0,0,3705,3706,1,0,0,0,3706,883,1,0,0,0,3707,3708,
  	3,114,57,0,3708,3709,5,24,0,0,3709,3711,1,0,0,0,3710,3707,1,0,0,0,3711,
  	3712,1,0,0,0,3712,3710,1,0,0,0,3712,3713,1,0,0,0,3713,885,1,0,0,0,3714,
  	3715,3,904,452,0,3715,3716,3,118,59,0,3716,3721,1,0,0,0,3717,3721,3,120,
  	60,0,3718,3721,3,890,445,0,3719,3721,3,906,453,0,3720,3714,1,0,0,0,3720,
  	3717,1,0,0,0,3720,3718,1,0,0,0,3720,3719,1,0,0,0,3721,887,1,0,0,0,3722,
  	3724,3,904,452,0,3723,3722,1,0,0,0,3723,3724,1,0,0,0,3724,3725,1,0,0,
  	0,3725,3726,3,118,59,0,3726,889,1,0,0,0,3727,3728,7,27,0,0,3728,891,1,
  	0,0,0,3729,3732,3,894,447,0,3730,3732,3,906,453,0,3731,3729,1,0,0,0,3731,
  	3730,1,0,0,0,3732,893,1,0,0,0,3733,3735,3,904,452,0,3734,3733,1,0,0,0,
  	3734,3735,1,0,0,0,3735,3736,1,0,0,0,3736,3737,3,122,61,0,3737,895,1,0,
  	0,0,3738,3739,3,904,452,0,3739,3740,3,126,63,0,3740,3744,1,0,0,0,3741,
  	3744,3,128,64,0,3742,3744,3,906,453,0,3743,3738,1,0,0,0,3743,3741,1,0,
  	0,0,3743,3742,1,0,0,0,3744,897,1,0,0,0,3745,3747,3,904,452,0,3746,3745,
  	1,0,0,0,3746,3747,1,0,0,0,3747,3748,1,0,0,0,3748,3749,3,126,63,0,3749,
  	899,1,0,0,0,3750,3753,3,902,451,0,3751,3753,3,906,453,0,3752,3750,1,0,
  	0,0,3752,3751,1,0,0,0,3753,901,1,0,0,0,3754,3756,3,904,452,0,3755,3754,
  	1,0,0,0,3755,3756,1,0,0,0,3756,3757,1,0,0,0,3757,3758,3,130,65,0,3758,
  	903,1,0,0,0,3759,3761,3,870,435,0,3760,3762,5,24,0,0,3761,3760,1,0,0,
  	0,3761,3762,1,0,0,0,3762,3768,1,0,0,0,3763,3764,3,110,55,0,3764,3765,
  	5,16,0,0,3765,3767,1,0,0,0,3766,3763,1,0,0,0,3767,3770,1,0,0,0,3768,3766,
  	1,0,0,0,3768,3769,1,0,0,0,3769,3779,1,0,0,0,3770,3768,1,0,0,0,3771,3772,
  	3,110,55,0,3772,3773,5,16,0,0,3773,3775,1,0,0,0,3774,3771,1,0,0,0,3775,
  	3776,1,0,0,0,3776,3774,1,0,0,0,3776,3777,1,0,0,0,3777,3779,1,0,0,0,3778,
  	3759,1,0,0,0,3778,3774,1,0,0,0,3779,905,1,0,0,0,3780,3781,3,412,206,0,
  	3781,907,1,0,0,0,3782,3783,5,128,0,0,3783,909,1,0,0,0,3784,3785,3,912,
  	456,0,3785,3786,3,932,466,0,3786,911,1,0,0,0,3787,3788,7,28,0,0,3788,
  	913,1,0,0,0,3789,3791,5,149,0,0,3790,3792,5,183,0,0,3791,3790,1,0,0,0,
  	3791,3792,1,0,0,0,3792,3793,1,0,0,0,3793,3794,5,184,0,0,3794,915,1,0,
  	0,0,3795,3797,5,149,0,0,3796,3798,5,183,0,0,3797,3796,1,0,0,0,3797,3798,
  	1,0,0,0,3798,3800,1,0,0,0,3799,3801,3,1008,504,0,3800,3799,1,0,0,0,3800,
  	3801,1,0,0,0,3801,3802,1,0,0,0,3802,3803,5,182,0,0,3803,917,1,0,0,0,3804,
  	3806,5,149,0,0,3805,3807,5,183,0,0,3806,3805,1,0,0,0,3806,3807,1,0,0,
  	0,3807,3808,1,0,0,0,3808,3809,5,92,0,0,3809,919,1,0,0,0,3810,3812,5,149,
  	0,0,3811,3813,5,183,0,0,3812,3811,1,0,0,0,3812,3813,1,0,0,0,3813,3814,
  	1,0,0,0,3814,3817,5,152,0,0,3815,3817,5,4,0,0,3816,3810,1,0,0,0,3816,
  	3815,1,0,0,0,3817,3818,1,0,0,0,3818,3819,3,556,278,0,3819,921,1,0,0,0,
  	3820,3822,5,149,0,0,3821,3823,5,183,0,0,3822,3821,1,0,0,0,3822,3823,1,
  	0,0,0,3823,3824,1,0,0,0,3824,3825,7,29,0,0,3825,3826,5,188,0,0,3826,3827,
  	3,408,204,0,3827,923,1,0,0,0,3828,3831,3,1018,509,0,3829,3831,3,928,464,
  	0,3830,3828,1,0,0,0,3830,3829,1,0,0,0,3831,925,1,0,0,0,3832,3835,3,70,
  	35,0,3833,3835,3,412,206,0,3834,3832,1,0,0,0,3834,3833,1,0,0,0,3835,927,
  	1,0,0,0,3836,3839,3,412,206,0,3837,3839,3,930,465,0,3838,3836,1,0,0,0,
  	3838,3837,1,0,0,0,3839,929,1,0,0,0,3840,3841,5,80,0,0,3841,931,1,0,0,
  	0,3842,3843,6,466,-1,0,3843,3844,5,183,0,0,3844,3847,3,932,466,5,3845,
  	3847,3,934,467,0,3846,3842,1,0,0,0,3846,3845,1,0,0,0,3847,3859,1,0,0,
  	0,3848,3849,10,4,0,0,3849,3850,5,33,0,0,3850,3858,3,932,466,5,3851,3852,
  	10,3,0,0,3852,3853,5,282,0,0,3853,3858,3,932,466,4,3854,3855,10,2,0,0,
  	3855,3856,5,194,0,0,3856,3858,3,932,466,3,3857,3848,1,0,0,0,3857,3851,
  	1,0,0,0,3857,3854,1,0,0,0,3858,3861,1,0,0,0,3859,3857,1,0,0,0,3859,3860,
  	1,0,0,0,3860,933,1,0,0,0,3861,3859,1,0,0,0,3862,3863,6,467,-1,0,3863,
  	3881,5,104,0,0,3864,3865,5,10,0,0,3865,3866,3,422,211,0,3866,3867,5,20,
  	0,0,3867,3882,1,0,0,0,3868,3869,5,12,0,0,3869,3870,3,422,211,0,3870,3871,
  	5,22,0,0,3871,3882,1,0,0,0,3872,3873,5,10,0,0,3873,3874,3,334,167,0,3874,
  	3875,5,20,0,0,3875,3882,1,0,0,0,3876,3877,5,12,0,0,3877,3878,3,334,167,
  	0,3878,3879,5,22,0,0,3879,3882,1,0,0,0,3880,3882,3,64,32,0,3881,3864,
  	1,0,0,0,3881,3868,1,0,0,0,3881,3872,1,0,0,0,3881,3876,1,0,0,0,3881,3880,
  	1,0,0,0,3882,3939,1,0,0,0,3883,3884,3,408,204,0,3884,3885,3,918,459,0,
  	3885,3939,1,0,0,0,3886,3887,3,408,204,0,3887,3888,3,920,460,0,3888,3939,
  	1,0,0,0,3889,3890,3,408,204,0,3890,3891,3,922,461,0,3891,3939,1,0,0,0,
  	3892,3893,5,32,0,0,3893,3894,5,12,0,0,3894,3897,3,408,204,0,3895,3896,
  	5,5,0,0,3896,3898,3,408,204,0,3897,3895,1,0,0,0,3898,3899,1,0,0,0,3899,
  	3897,1,0,0,0,3899,3900,1,0,0,0,3900,3901,1,0,0,0,3901,3902,5,22,0,0,3902,
  	3939,1,0,0,0,3903,3904,5,222,0,0,3904,3905,5,12,0,0,3905,3908,3,408,204,
  	0,3906,3907,5,5,0,0,3907,3909,3,408,204,0,3908,3906,1,0,0,0,3909,3910,
  	1,0,0,0,3910,3908,1,0,0,0,3910,3911,1,0,0,0,3911,3912,1,0,0,0,3912,3913,
  	5,22,0,0,3913,3939,1,0,0,0,3914,3915,5,209,0,0,3915,3916,5,12,0,0,3916,
  	3917,3,408,204,0,3917,3918,5,5,0,0,3918,3919,3,136,68,0,3919,3920,5,22,
  	0,0,3920,3939,1,0,0,0,3921,3923,5,208,0,0,3922,3921,1,0,0,0,3922,3923,
  	1,0,0,0,3923,3924,1,0,0,0,3924,3925,5,119,0,0,3925,3939,3,198,99,0,3926,
  	3928,5,46,0,0,3927,3926,1,0,0,0,3927,3928,1,0,0,0,3928,3929,1,0,0,0,3929,
  	3930,5,241,0,0,3930,3939,3,204,102,0,3931,3932,5,157,0,0,3932,3933,3,
  	342,171,0,3933,3934,5,132,0,0,3934,3935,3,932,466,0,3935,3936,5,102,0,
  	0,3936,3939,1,0,0,0,3937,3939,3,936,468,0,3938,3862,1,0,0,0,3938,3883,
  	1,0,0,0,3938,3886,1,0,0,0,3938,3889,1,0,0,0,3938,3892,1,0,0,0,3938,3903,
  	1,0,0,0,3938,3914,1,0,0,0,3938,3922,1,0,0,0,3938,3927,1,0,0,0,3938,3931,
  	1,0,0,0,3938,3937,1,0,0,0,3939,3956,1,0,0,0,3940,3941,10,14,0,0,3941,
  	3942,3,912,456,0,3942,3943,3,934,467,15,3943,3955,1,0,0,0,3944,3945,10,
  	15,0,0,3945,3947,5,149,0,0,3946,3948,5,183,0,0,3947,3946,1,0,0,0,3947,
  	3948,1,0,0,0,3948,3949,1,0,0,0,3949,3955,3,938,469,0,3950,3951,10,12,
  	0,0,3951,3955,3,914,457,0,3952,3953,10,11,0,0,3953,3955,3,916,458,0,3954,
  	3940,1,0,0,0,3954,3944,1,0,0,0,3954,3950,1,0,0,0,3954,3952,1,0,0,0,3955,
  	3958,1,0,0,0,3956,3954,1,0,0,0,3956,3957,1,0,0,0,3957,935,1,0,0,0,3958,
  	3956,1,0,0,0,3959,3960,6,468,-1,0,3960,3961,5,12,0,0,3961,3962,3,932,
  	466,0,3962,3963,5,22,0,0,3963,3975,1,0,0,0,3964,3975,3,1018,509,0,3965,
  	3966,3,940,470,0,3966,3967,3,936,468,8,3967,3975,1,0,0,0,3968,3975,3,
  	942,471,0,3969,3975,3,1004,502,0,3970,3971,5,272,0,0,3971,3975,3,64,32,
  	0,3972,3975,3,928,464,0,3973,3975,3,142,71,0,3974,3959,1,0,0,0,3974,3964,
  	1,0,0,0,3974,3965,1,0,0,0,3974,3968,1,0,0,0,3974,3969,1,0,0,0,3974,3970,
  	1,0,0,0,3974,3972,1,0,0,0,3974,3973,1,0,0,0,3975,3990,1,0,0,0,3976,3977,
  	10,10,0,0,3977,3978,5,300,0,0,3978,3989,3,936,468,11,3979,3980,10,4,0,
  	0,3980,3981,7,30,0,0,3981,3989,3,936,468,5,3982,3983,10,3,0,0,3983,3984,
  	7,31,0,0,3984,3989,3,936,468,4,3985,3986,10,11,0,0,3986,3987,5,16,0,0,
  	3987,3989,3,136,68,0,3988,3976,1,0,0,0,3988,3979,1,0,0,0,3988,3982,1,
  	0,0,0,3988,3985,1,0,0,0,3989,3992,1,0,0,0,3990,3988,1,0,0,0,3990,3991,
  	1,0,0,0,3991,937,1,0,0,0,3992,3990,1,0,0,0,3993,3994,7,5,0,0,3994,939,
  	1,0,0,0,3995,3996,7,32,0,0,3996,941,1,0,0,0,3997,4007,3,944,472,0,3998,
  	4007,3,656,328,0,3999,4007,3,958,479,0,4000,4007,3,968,484,0,4001,4007,
  	3,970,485,0,4002,4007,3,972,486,0,4003,4007,3,996,498,0,4004,4007,3,956,
  	478,0,4005,4007,3,954,477,0,4006,3997,1,0,0,0,4006,3998,1,0,0,0,4006,
  	3999,1,0,0,0,4006,4000,1,0,0,0,4006,4001,1,0,0,0,4006,4002,1,0,0,0,4006,
  	4003,1,0,0,0,4006,4004,1,0,0,0,4006,4005,1,0,0,0,4007,943,1,0,0,0,4008,
  	4009,3,950,475,0,4009,4010,5,12,0,0,4010,4011,3,946,473,0,4011,4012,5,
  	22,0,0,4012,4021,1,0,0,0,4013,4014,3,952,476,0,4014,4015,5,12,0,0,4015,
  	4016,3,946,473,0,4016,4017,5,5,0,0,4017,4018,3,946,473,0,4018,4019,5,
  	22,0,0,4019,4021,1,0,0,0,4020,4008,1,0,0,0,4020,4013,1,0,0,0,4021,945,
  	1,0,0,0,4022,4028,3,1018,509,0,4023,4028,3,142,71,0,4024,4028,3,948,474,
  	0,4025,4028,3,942,471,0,4026,4028,3,932,466,0,4027,4022,1,0,0,0,4027,
  	4023,1,0,0,0,4027,4024,1,0,0,0,4027,4025,1,0,0,0,4027,4026,1,0,0,0,4028,
  	947,1,0,0,0,4029,4030,3,142,71,0,4030,4031,5,16,0,0,4031,4032,3,136,68,
  	0,4032,949,1,0,0,0,4033,4034,7,33,0,0,4034,951,1,0,0,0,4035,4036,7,34,
  	0,0,4036,953,1,0,0,0,4037,4038,7,35,0,0,4038,4039,5,12,0,0,4039,4040,
  	3,936,468,0,4040,4041,5,5,0,0,4041,4042,3,936,468,0,4042,4043,5,22,0,
  	0,4043,4082,1,0,0,0,4044,4045,7,36,0,0,4045,4046,5,12,0,0,4046,4047,3,
  	936,468,0,4047,4048,5,22,0,0,4048,4082,1,0,0,0,4049,4050,5,253,0,0,4050,
  	4058,5,12,0,0,4051,4053,3,1006,503,0,4052,4051,1,0,0,0,4052,4053,1,0,
  	0,0,4053,4055,1,0,0,0,4054,4056,3,936,468,0,4055,4054,1,0,0,0,4055,4056,
  	1,0,0,0,4056,4057,1,0,0,0,4057,4059,5,118,0,0,4058,4052,1,0,0,0,4058,
  	4059,1,0,0,0,4059,4060,1,0,0,0,4060,4061,3,936,468,0,4061,4062,5,22,0,
  	0,4062,4082,1,0,0,0,4063,4064,7,37,0,0,4064,4065,5,12,0,0,4065,4068,3,
  	936,468,0,4066,4067,5,5,0,0,4067,4069,3,936,468,0,4068,4066,1,0,0,0,4068,
  	4069,1,0,0,0,4069,4070,1,0,0,0,4070,4071,5,22,0,0,4071,4082,1,0,0,0,4072,
  	4073,5,181,0,0,4073,4074,5,12,0,0,4074,4077,3,936,468,0,4075,4076,5,5,
  	0,0,4076,4078,3,1008,504,0,4077,4075,1,0,0,0,4077,4078,1,0,0,0,4078,4079,
  	1,0,0,0,4079,4080,5,22,0,0,4080,4082,1,0,0,0,4081,4037,1,0,0,0,4081,4044,
  	1,0,0,0,4081,4049,1,0,0,0,4081,4063,1,0,0,0,4081,4072,1,0,0,0,4082,955,
  	1,0,0,0,4083,4084,5,253,0,0,4084,4085,5,12,0,0,4085,4086,3,936,468,0,
  	4086,4087,5,5,0,0,4087,4088,3,936,468,0,4088,4089,5,22,0,0,4089,4096,
  	1,0,0,0,4090,4091,5,100,0,0,4091,4092,5,12,0,0,4092,4093,3,936,468,0,
  	4093,4094,5,22,0,0,4094,4096,1,0,0,0,4095,4083,1,0,0,0,4095,4090,1,0,
  	0,0,4096,957,1,0,0,0,4097,4098,5,185,0,0,4098,4099,5,12,0,0,4099,4100,
  	3,932,466,0,4100,4101,5,5,0,0,4101,4102,3,932,466,0,4102,4103,5,22,0,
  	0,4103,4139,1,0,0,0,4104,4105,5,64,0,0,4105,4106,5,12,0,0,4106,4109,3,
  	932,466,0,4107,4108,5,5,0,0,4108,4110,3,932,466,0,4109,4107,1,0,0,0,4110,
  	4111,1,0,0,0,4111,4109,1,0,0,0,4111,4112,1,0,0,0,4112,4113,1,0,0,0,4113,
  	4114,5,22,0,0,4114,4139,1,0,0,0,4115,4116,5,56,0,0,4116,4118,3,936,468,
  	0,4117,4119,3,960,480,0,4118,4117,1,0,0,0,4119,4120,1,0,0,0,4120,4118,
  	1,0,0,0,4120,4121,1,0,0,0,4121,4123,1,0,0,0,4122,4124,3,964,482,0,4123,
  	4122,1,0,0,0,4123,4124,1,0,0,0,4124,4125,1,0,0,0,4125,4126,5,102,0,0,
  	4126,4139,1,0,0,0,4127,4129,5,56,0,0,4128,4130,3,962,481,0,4129,4128,
  	1,0,0,0,4130,4131,1,0,0,0,4131,4129,1,0,0,0,4131,4132,1,0,0,0,4132,4134,
  	1,0,0,0,4133,4135,3,964,482,0,4134,4133,1,0,0,0,4134,4135,1,0,0,0,4135,
  	4136,1,0,0,0,4136,4137,5,102,0,0,4137,4139,1,0,0,0,4138,4097,1,0,0,0,
  	4138,4104,1,0,0,0,4138,4115,1,0,0,0,4138,4127,1,0,0,0,4139,959,1,0,0,
  	0,4140,4141,5,277,0,0,4141,4146,3,966,483,0,4142,4143,5,5,0,0,4143,4145,
  	3,966,483,0,4144,4142,1,0,0,0,4145,4148,1,0,0,0,4146,4144,1,0,0,0,4146,
  	4147,1,0,0,0,4147,4149,1,0,0,0,4148,4146,1,0,0,0,4149,4150,5,245,0,0,
  	4150,4151,3,932,466,0,4151,961,1,0,0,0,4152,4153,5,277,0,0,4153,4154,
  	3,932,466,0,4154,4155,5,245,0,0,4155,4156,3,932,466,0,4156,963,1,0,0,
  	0,4157,4158,5,101,0,0,4158,4159,3,932,466,0,4159,965,1,0,0,0,4160,4167,
  	3,936,468,0,4161,4167,3,910,455,0,4162,4167,3,914,457,0,4163,4167,3,918,
  	459,0,4164,4167,3,920,460,0,4165,4167,3,922,461,0,4166,4160,1,0,0,0,4166,
  	4161,1,0,0,0,4166,4162,1,0,0,0,4166,4163,1,0,0,0,4166,4164,1,0,0,0,4166,
  	4165,1,0,0,0,4167,967,1,0,0,0,4168,4169,5,57,0,0,4169,4170,5,12,0,0,4170,
  	4171,3,932,466,0,4171,4172,5,36,0,0,4172,4173,3,778,389,0,4173,4174,5,
  	22,0,0,4174,969,1,0,0,0,4175,4176,5,99,0,0,4176,4177,5,12,0,0,4177,4178,
  	3,142,71,0,4178,4179,5,22,0,0,4179,971,1,0,0,0,4180,4186,3,974,487,0,
  	4181,4186,3,976,488,0,4182,4186,3,980,490,0,4183,4186,3,978,489,0,4184,
  	4186,3,982,491,0,4185,4180,1,0,0,0,4185,4181,1,0,0,0,4185,4182,1,0,0,
  	0,4185,4183,1,0,0,0,4185,4184,1,0,0,0,4186,973,1,0,0,0,4187,4195,5,74,
  	0,0,4188,4189,5,81,0,0,4189,4191,5,12,0,0,4190,4192,3,984,492,0,4191,
  	4190,1,0,0,0,4191,4192,1,0,0,0,4192,4193,1,0,0,0,4193,4195,5,22,0,0,4194,
  	4187,1,0,0,0,4194,4188,1,0,0,0,4195,975,1,0,0,0,4196,4204,5,78,0,0,4197,
  	4198,5,287,0,0,4198,4200,5,12,0,0,4199,4201,3,986,493,0,4200,4199,1,0,
  	0,0,4200,4201,1,0,0,0,4201,4202,1,0,0,0,4202,4204,5,22,0,0,4203,4196,
  	1,0,0,0,4203,4197,1,0,0,0,4204,977,1,0,0,0,4205,4211,5,164,0,0,4206,4208,
  	5,12,0,0,4207,4209,3,986,493,0,4208,4207,1,0,0,0,4208,4209,1,0,0,0,4209,
  	4210,1,0,0,0,4210,4212,5,22,0,0,4211,4206,1,0,0,0,4211,4212,1,0,0,0,4212,
  	979,1,0,0,0,4213,4221,5,79,0,0,4214,4215,5,286,0,0,4215,4217,5,12,0,0,
  	4216,4218,3,988,494,0,4217,4216,1,0,0,0,4217,4218,1,0,0,0,4218,4219,1,
  	0,0,0,4219,4221,5,22,0,0,4220,4213,1,0,0,0,4220,4214,1,0,0,0,4221,981,
  	1,0,0,0,4222,4230,5,165,0,0,4223,4224,5,163,0,0,4224,4226,5,12,0,0,4225,
  	4227,3,988,494,0,4226,4225,1,0,0,0,4226,4227,1,0,0,0,4227,4228,1,0,0,
  	0,4228,4230,5,22,0,0,4229,4222,1,0,0,0,4229,4223,1,0,0,0,4230,983,1,0,
  	0,0,4231,4234,3,990,495,0,4232,4234,3,1012,506,0,4233,4231,1,0,0,0,4233,
  	4232,1,0,0,0,4234,985,1,0,0,0,4235,4238,3,992,496,0,4236,4238,3,1012,
  	506,0,4237,4235,1,0,0,0,4237,4236,1,0,0,0,4238,987,1,0,0,0,4239,4242,
  	3,994,497,0,4240,4242,3,1012,506,0,4241,4239,1,0,0,0,4241,4240,1,0,0,
  	0,4242,989,1,0,0,0,4243,4244,3,86,43,0,4244,991,1,0,0,0,4245,4246,3,86,
  	43,0,4246,993,1,0,0,0,4247,4248,3,86,43,0,4248,995,1,0,0,0,4249,4250,
  	5,97,0,0,4250,4251,5,12,0,0,4251,4252,3,936,468,0,4252,4253,5,5,0,0,4253,
  	4254,3,936,468,0,4254,4255,5,22,0,0,4255,4262,1,0,0,0,4256,4257,5,96,
  	0,0,4257,4258,5,12,0,0,4258,4259,3,998,499,0,4259,4260,5,22,0,0,4260,
  	4262,1,0,0,0,4261,4249,1,0,0,0,4261,4256,1,0,0,0,4262,997,1,0,0,0,4263,
  	4266,3,1000,500,0,4264,4266,3,1012,506,0,4265,4263,1,0,0,0,4265,4264,
  	1,0,0,0,4266,999,1,0,0,0,4267,4268,3,86,43,0,4268,1001,1,0,0,0,4269,4270,
  	3,134,67,0,4270,4272,5,12,0,0,4271,4273,3,398,199,0,4272,4271,1,0,0,0,
  	4272,4273,1,0,0,0,4273,4274,1,0,0,0,4274,4275,5,22,0,0,4275,1003,1,0,
  	0,0,4276,4280,3,1010,505,0,4277,4280,3,1012,506,0,4278,4280,3,1016,508,
  	0,4279,4276,1,0,0,0,4279,4277,1,0,0,0,4279,4278,1,0,0,0,4280,1005,1,0,
  	0,0,4281,4282,7,38,0,0,4282,1007,1,0,0,0,4283,4284,7,39,0,0,4284,1009,
  	1,0,0,0,4285,4287,3,856,428,0,4286,4285,1,0,0,0,4286,4287,1,0,0,0,4287,
  	4288,1,0,0,0,4288,4297,5,11,0,0,4289,4294,3,932,466,0,4290,4291,5,5,0,
  	0,4291,4293,3,932,466,0,4292,4290,1,0,0,0,4293,4296,1,0,0,0,4294,4292,
  	1,0,0,0,4294,4295,1,0,0,0,4295,4298,1,0,0,0,4296,4294,1,0,0,0,4297,4289,
  	1,0,0,0,4297,4298,1,0,0,0,4298,4299,1,0,0,0,4299,4300,5,21,0,0,4300,1011,
  	1,0,0,0,4301,4303,5,213,0,0,4302,4301,1,0,0,0,4302,4303,1,0,0,0,4303,
  	4304,1,0,0,0,4304,4313,5,10,0,0,4305,4310,3,1014,507,0,4306,4307,5,5,
  	0,0,4307,4309,3,1014,507,0,4308,4306,1,0,0,0,4309,4312,1,0,0,0,4310,4308,
  	1,0,0,0,4310,4311,1,0,0,0,4311,4314,1,0,0,0,4312,4310,1,0,0,0,4313,4305,
  	1,0,0,0,4313,4314,1,0,0,0,4314,4315,1,0,0,0,4315,4316,5,20,0,0,4316,1013,
  	1,0,0,0,4317,4318,3,138,69,0,4318,4319,5,4,0,0,4319,4320,3,932,466,0,
  	4320,1015,1,0,0,0,4321,4322,5,200,0,0,4322,4323,5,11,0,0,4323,4331,3,
  	936,468,0,4324,4325,5,5,0,0,4325,4326,3,936,468,0,4326,4327,5,5,0,0,4327,
  	4328,3,936,468,0,4328,4330,1,0,0,0,4329,4324,1,0,0,0,4330,4333,1,0,0,
  	0,4331,4329,1,0,0,0,4331,4332,1,0,0,0,4332,4334,1,0,0,0,4333,4331,1,0,
  	0,0,4334,4335,5,21,0,0,4335,1017,1,0,0,0,4336,4339,3,68,34,0,4337,4339,
  	3,1020,510,0,4338,4336,1,0,0,0,4338,4337,1,0,0,0,4339,1019,1,0,0,0,4340,
  	4344,3,162,81,0,4341,4344,3,1022,511,0,4342,4344,3,1024,512,0,4343,4340,
  	1,0,0,0,4343,4341,1,0,0,0,4343,4342,1,0,0,0,4344,1021,1,0,0,0,4345,4347,
  	3,856,428,0,4346,4345,1,0,0,0,4346,4347,1,0,0,0,4347,4348,1,0,0,0,4348,
  	4357,5,11,0,0,4349,4354,3,1020,510,0,4350,4351,5,5,0,0,4351,4353,3,1020,
  	510,0,4352,4350,1,0,0,0,4353,4356,1,0,0,0,4354,4352,1,0,0,0,4354,4355,
  	1,0,0,0,4355,4358,1,0,0,0,4356,4354,1,0,0,0,4357,4349,1,0,0,0,4357,4358,
  	1,0,0,0,4358,4359,1,0,0,0,4359,4360,5,21,0,0,4360,1023,1,0,0,0,4361,4363,
  	5,213,0,0,4362,4361,1,0,0,0,4362,4363,1,0,0,0,4363,4364,1,0,0,0,4364,
  	4373,5,10,0,0,4365,4370,3,1026,513,0,4366,4367,5,5,0,0,4367,4369,3,1026,
  	513,0,4368,4366,1,0,0,0,4369,4372,1,0,0,0,4370,4368,1,0,0,0,4370,4371,
  	1,0,0,0,4371,4374,1,0,0,0,4372,4370,1,0,0,0,4373,4365,1,0,0,0,4373,4374,
  	1,0,0,0,4374,4375,1,0,0,0,4375,4376,5,20,0,0,4376,1025,1,0,0,0,4377,4378,
  	3,142,71,0,4378,4379,5,4,0,0,4379,4380,3,1020,510,0,4380,1027,1,0,0,0,
  	4381,4382,7,40,0,0,4382,1029,1,0,0,0,506,1032,1038,1041,1045,1050,1054,
  	1059,1061,1065,1068,1072,1080,1086,1100,1103,1110,1123,1130,1133,1138,
  	1144,1147,1155,1162,1167,1173,1203,1220,1228,1236,1241,1249,1293,1307,
  	1316,1320,1324,1334,1344,1350,1354,1360,1364,1369,1377,1381,1395,1403,
  	1409,1414,1417,1424,1429,1435,1441,1445,1450,1457,1460,1468,1475,1478,
  	1490,1493,1503,1513,1524,1529,1533,1541,1548,1556,1562,1568,1573,1576,
  	1581,1584,1587,1591,1594,1598,1602,1605,1608,1611,1623,1628,1634,1641,
  	1646,1650,1656,1661,1664,1670,1674,1680,1688,1692,1697,1704,1708,1713,
  	1717,1721,1727,1740,1746,1758,1771,1782,1787,1798,1808,1826,1831,1835,
  	1839,1843,1845,1851,1856,1863,1879,1883,1888,1892,1899,1903,1920,1925,
  	1932,1942,1950,1955,1969,1972,1976,1979,1983,1986,1992,1996,1999,2003,
  	2010,2015,2022,2026,2030,2033,2036,2039,2042,2045,2047,2054,2059,2071,
  	2078,2088,2091,2098,2101,2107,2116,2122,2126,2133,2154,2164,2169,2173,
  	2176,2180,2183,2187,2197,2200,2204,2207,2214,2218,2221,2236,2240,2247,
  	2251,2254,2260,2263,2266,2274,2279,2282,2287,2290,2295,2298,2303,2306,
  	2315,2324,2334,2340,2345,2356,2360,2367,2370,2373,2376,2387,2401,2410,
  	2419,2475,2479,2482,2486,2503,2512,2517,2524,2530,2538,2546,2556,2566,
  	2573,2581,2585,2592,2604,2612,2616,2631,2668,2677,2687,2693,2700,2706,
  	2716,2725,2753,2763,2776,2781,2795,2798,2816,2824,2831,2844,2849,2852,
  	2862,2883,2888,2893,2897,2900,2905,2909,2912,2921,2929,2933,2937,2940,
  	2946,2951,2960,2969,3003,3006,3011,3028,3036,3039,3047,3050,3061,3097,
  	3101,3110,3115,3122,3138,3141,3144,3148,3151,3155,3159,3162,3165,3170,
  	3174,3182,3187,3195,3198,3205,3207,3209,3220,3224,3231,3234,3241,3246,
  	3249,3256,3259,3266,3269,3271,3281,3285,3289,3293,3297,3301,3305,3309,
  	3313,3317,3324,3327,3331,3335,3337,3341,3345,3349,3353,3357,3361,3365,
  	3372,3375,3379,3384,3386,3390,3394,3398,3402,3406,3410,3415,3422,3425,
  	3430,3432,3439,3443,3445,3453,3457,3461,3465,3469,3476,3480,3483,3487,
  	3491,3494,3496,3500,3507,3514,3520,3522,3527,3532,3535,3537,3541,3546,
  	3552,3554,3559,3565,3567,3571,3577,3581,3584,3589,3593,3597,3601,3605,
  	3609,3612,3616,3620,3624,3627,3631,3634,3642,3651,3656,3663,3670,3676,
  	3685,3691,3698,3703,3705,3712,3720,3723,3731,3734,3743,3746,3752,3755,
  	3761,3768,3776,3778,3791,3797,3800,3806,3812,3816,3822,3830,3834,3838,
  	3846,3857,3859,3881,3899,3910,3922,3927,3938,3947,3954,3956,3974,3988,
  	3990,4006,4020,4027,4052,4055,4058,4068,4077,4081,4095,4111,4120,4123,
  	4131,4134,4138,4146,4166,4185,4191,4194,4200,4203,4208,4211,4217,4220,
  	4226,4229,4233,4237,4241,4261,4265,4272,4279,4286,4294,4297,4302,4310,
  	4313,4331,4338,4343,4346,4354,4357,4362,4370,4373
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  gqlparserParserStaticData = staticData.release();
}

}

GQLParser::GQLParser(TokenStream *input) : GQLParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

GQLParser::GQLParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  GQLParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *gqlparserParserStaticData->atn, gqlparserParserStaticData->decisionToDFA, gqlparserParserStaticData->sharedContextCache, options);
}

GQLParser::~GQLParser() {
  delete _interpreter;
}

const atn::ATN& GQLParser::getATN() const {
  return *gqlparserParserStaticData->atn;
}

std::string GQLParser::getGrammarFileName() const {
  return "GQLParser.g4";
}

const std::vector<std::string>& GQLParser::getRuleNames() const {
  return gqlparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& GQLParser::getVocabulary() const {
  return gqlparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView GQLParser::getSerializedATN() const {
  return gqlparserParserStaticData->serializedATN;
}


//----------------- RootContext ------------------------------------------------------------------

GQLParser::RootContext::RootContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GqlProgramContext* GQLParser::RootContext::gqlProgram() {
  return getRuleContext<GQLParser::GqlProgramContext>(0);
}

tree::TerminalNode* GQLParser::RootContext::EOF() {
  return getToken(GQLParser::EOF, 0);
}

tree::TerminalNode* GQLParser::RootContext::SEMICOLON() {
  return getToken(GQLParser::SEMICOLON, 0);
}


size_t GQLParser::RootContext::getRuleIndex() const {
  return GQLParser::RuleRoot;
}


std::any GQLParser::RootContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitRoot(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::RootContext* GQLParser::root() {
  RootContext *_localctx = _tracker.createInstance<RootContext>(_ctx, getState());
  enterRule(_localctx, 0, GQLParser::RuleRoot);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1030);
    gqlProgram();
    setState(1032);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::SEMICOLON) {
      setState(1031);
      match(GQLParser::SEMICOLON);
    }
    setState(1034);
    match(GQLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GqlProgramContext ------------------------------------------------------------------

GQLParser::GqlProgramContext::GqlProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ProgramActivityContext* GQLParser::GqlProgramContext::programActivity() {
  return getRuleContext<GQLParser::ProgramActivityContext>(0);
}

GQLParser::SessionCloseCommandContext* GQLParser::GqlProgramContext::sessionCloseCommand() {
  return getRuleContext<GQLParser::SessionCloseCommandContext>(0);
}


size_t GQLParser::GqlProgramContext::getRuleIndex() const {
  return GQLParser::RuleGqlProgram;
}


std::any GQLParser::GqlProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlProgram(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GqlProgramContext* GQLParser::gqlProgram() {
  GqlProgramContext *_localctx = _tracker.createInstance<GqlProgramContext>(_ctx, getState());
  enterRule(_localctx, 2, GQLParser::RuleGqlProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1041);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1036);
      programActivity();
      setState(1038);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::SESSION) {
        setState(1037);
        sessionCloseCommand();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1040);
      sessionCloseCommand();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramActivityContext ------------------------------------------------------------------

GQLParser::ProgramActivityContext::ProgramActivityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SessionActivityContext* GQLParser::ProgramActivityContext::sessionActivity() {
  return getRuleContext<GQLParser::SessionActivityContext>(0);
}

GQLParser::TransactionActivityContext* GQLParser::ProgramActivityContext::transactionActivity() {
  return getRuleContext<GQLParser::TransactionActivityContext>(0);
}


size_t GQLParser::ProgramActivityContext::getRuleIndex() const {
  return GQLParser::RuleProgramActivity;
}


std::any GQLParser::ProgramActivityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitProgramActivity(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ProgramActivityContext* GQLParser::programActivity() {
  ProgramActivityContext *_localctx = _tracker.createInstance<ProgramActivityContext>(_ctx, getState());
  enterRule(_localctx, 4, GQLParser::RuleProgramActivity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1045);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::SESSION: {
        enterOuterAlt(_localctx, 1);
        setState(1043);
        sessionActivity();
        break;
      }

      case GQLParser::LEFT_BRACE:
      case GQLParser::AT:
      case GQLParser::BINDING:
      case GQLParser::CALL:
      case GQLParser::COMMIT:
      case GQLParser::CREATE:
      case GQLParser::DELETE:
      case GQLParser::DETACH:
      case GQLParser::DROP:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FOR:
      case GQLParser::GRAPH:
      case GQLParser::INSERT:
      case GQLParser::LET:
      case GQLParser::LIMIT:
      case GQLParser::MATCH:
      case GQLParser::NODETACH:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::OPTIONAL:
      case GQLParser::ORDER:
      case GQLParser::PROPERTY:
      case GQLParser::REMOVE:
      case GQLParser::RETURN:
      case GQLParser::ROLLBACK:
      case GQLParser::SELECT:
      case GQLParser::SET:
      case GQLParser::START:
      case GQLParser::TABLE:
      case GQLParser::USE:
      case GQLParser::VALUE: {
        enterOuterAlt(_localctx, 2);
        setState(1044);
        transactionActivity();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionActivityContext ------------------------------------------------------------------

GQLParser::SessionActivityContext::SessionActivityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SessionActivityCommandContext *> GQLParser::SessionActivityContext::sessionActivityCommand() {
  return getRuleContexts<GQLParser::SessionActivityCommandContext>();
}

GQLParser::SessionActivityCommandContext* GQLParser::SessionActivityContext::sessionActivityCommand(size_t i) {
  return getRuleContext<GQLParser::SessionActivityCommandContext>(i);
}


size_t GQLParser::SessionActivityContext::getRuleIndex() const {
  return GQLParser::RuleSessionActivity;
}


std::any GQLParser::SessionActivityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSessionActivity(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SessionActivityContext* GQLParser::sessionActivity() {
  SessionActivityContext *_localctx = _tracker.createInstance<SessionActivityContext>(_ctx, getState());
  enterRule(_localctx, 6, GQLParser::RuleSessionActivity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1048); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1047);
              sessionActivityCommand();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1050); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionActivityCommandContext ------------------------------------------------------------------

GQLParser::SessionActivityCommandContext::SessionActivityCommandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SessionSetCommandContext* GQLParser::SessionActivityCommandContext::sessionSetCommand() {
  return getRuleContext<GQLParser::SessionSetCommandContext>(0);
}

GQLParser::SessionResetCommandContext* GQLParser::SessionActivityCommandContext::sessionResetCommand() {
  return getRuleContext<GQLParser::SessionResetCommandContext>(0);
}


size_t GQLParser::SessionActivityCommandContext::getRuleIndex() const {
  return GQLParser::RuleSessionActivityCommand;
}


std::any GQLParser::SessionActivityCommandContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSessionActivityCommand(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SessionActivityCommandContext* GQLParser::sessionActivityCommand() {
  SessionActivityCommandContext *_localctx = _tracker.createInstance<SessionActivityCommandContext>(_ctx, getState());
  enterRule(_localctx, 8, GQLParser::RuleSessionActivityCommand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1054);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1052);
      sessionSetCommand();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1053);
      sessionResetCommand();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionActivityContext ------------------------------------------------------------------

GQLParser::TransactionActivityContext::TransactionActivityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::StartTransactionCommandContext* GQLParser::TransactionActivityContext::startTransactionCommand() {
  return getRuleContext<GQLParser::StartTransactionCommandContext>(0);
}

GQLParser::ProcedureSpecificationContext* GQLParser::TransactionActivityContext::procedureSpecification() {
  return getRuleContext<GQLParser::ProcedureSpecificationContext>(0);
}

GQLParser::EndTransactionCommandContext* GQLParser::TransactionActivityContext::endTransactionCommand() {
  return getRuleContext<GQLParser::EndTransactionCommandContext>(0);
}


size_t GQLParser::TransactionActivityContext::getRuleIndex() const {
  return GQLParser::RuleTransactionActivity;
}


std::any GQLParser::TransactionActivityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTransactionActivity(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TransactionActivityContext* GQLParser::transactionActivity() {
  TransactionActivityContext *_localctx = _tracker.createInstance<TransactionActivityContext>(_ctx, getState());
  enterRule(_localctx, 10, GQLParser::RuleTransactionActivity);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1068);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::START: {
        enterOuterAlt(_localctx, 1);
        setState(1056);
        startTransactionCommand();
        setState(1061);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 36100265274770432) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 73)) & 1153009517081010177) != 0) || ((((_la - 157) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 157)) & 2452210353593917445) != 0) || ((((_la - 224) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 224)) & 351843721019397) != 0)) {
          setState(1057);
          procedureSpecification();
          setState(1059);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == GQLParser::COMMIT || _la == GQLParser::ROLLBACK) {
            setState(1058);
            endTransactionCommand();
          }
        }
        break;
      }

      case GQLParser::LEFT_BRACE:
      case GQLParser::AT:
      case GQLParser::BINDING:
      case GQLParser::CALL:
      case GQLParser::CREATE:
      case GQLParser::DELETE:
      case GQLParser::DETACH:
      case GQLParser::DROP:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FOR:
      case GQLParser::GRAPH:
      case GQLParser::INSERT:
      case GQLParser::LET:
      case GQLParser::LIMIT:
      case GQLParser::MATCH:
      case GQLParser::NODETACH:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::OPTIONAL:
      case GQLParser::ORDER:
      case GQLParser::PROPERTY:
      case GQLParser::REMOVE:
      case GQLParser::RETURN:
      case GQLParser::SELECT:
      case GQLParser::SET:
      case GQLParser::TABLE:
      case GQLParser::USE:
      case GQLParser::VALUE: {
        enterOuterAlt(_localctx, 2);
        setState(1063);
        procedureSpecification();
        setState(1065);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::COMMIT || _la == GQLParser::ROLLBACK) {
          setState(1064);
          endTransactionCommand();
        }
        break;
      }

      case GQLParser::COMMIT:
      case GQLParser::ROLLBACK: {
        enterOuterAlt(_localctx, 3);
        setState(1067);
        endTransactionCommand();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndTransactionCommandContext ------------------------------------------------------------------

GQLParser::EndTransactionCommandContext::EndTransactionCommandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::RollbackCommandContext* GQLParser::EndTransactionCommandContext::rollbackCommand() {
  return getRuleContext<GQLParser::RollbackCommandContext>(0);
}

GQLParser::CommitCommandContext* GQLParser::EndTransactionCommandContext::commitCommand() {
  return getRuleContext<GQLParser::CommitCommandContext>(0);
}


size_t GQLParser::EndTransactionCommandContext::getRuleIndex() const {
  return GQLParser::RuleEndTransactionCommand;
}


std::any GQLParser::EndTransactionCommandContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEndTransactionCommand(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EndTransactionCommandContext* GQLParser::endTransactionCommand() {
  EndTransactionCommandContext *_localctx = _tracker.createInstance<EndTransactionCommandContext>(_ctx, getState());
  enterRule(_localctx, 12, GQLParser::RuleEndTransactionCommand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1072);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ROLLBACK: {
        enterOuterAlt(_localctx, 1);
        setState(1070);
        rollbackCommand();
        break;
      }

      case GQLParser::COMMIT: {
        enterOuterAlt(_localctx, 2);
        setState(1071);
        commitCommand();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetCommandContext ------------------------------------------------------------------

GQLParser::SessionSetCommandContext::SessionSetCommandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionSetCommandContext::SESSION() {
  return getToken(GQLParser::SESSION, 0);
}

tree::TerminalNode* GQLParser::SessionSetCommandContext::SET() {
  return getToken(GQLParser::SET, 0);
}

GQLParser::SessionSetSchemaClauseContext* GQLParser::SessionSetCommandContext::sessionSetSchemaClause() {
  return getRuleContext<GQLParser::SessionSetSchemaClauseContext>(0);
}

GQLParser::SessionSetGraphClauseContext* GQLParser::SessionSetCommandContext::sessionSetGraphClause() {
  return getRuleContext<GQLParser::SessionSetGraphClauseContext>(0);
}

GQLParser::SessionSetTimeZoneClauseContext* GQLParser::SessionSetCommandContext::sessionSetTimeZoneClause() {
  return getRuleContext<GQLParser::SessionSetTimeZoneClauseContext>(0);
}

GQLParser::SessionSetParameterClauseContext* GQLParser::SessionSetCommandContext::sessionSetParameterClause() {
  return getRuleContext<GQLParser::SessionSetParameterClauseContext>(0);
}


size_t GQLParser::SessionSetCommandContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetCommand;
}


std::any GQLParser::SessionSetCommandContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSessionSetCommand(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SessionSetCommandContext* GQLParser::sessionSetCommand() {
  SessionSetCommandContext *_localctx = _tracker.createInstance<SessionSetCommandContext>(_ctx, getState());
  enterRule(_localctx, 14, GQLParser::RuleSessionSetCommand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1074);
    match(GQLParser::SESSION);
    setState(1075);
    match(GQLParser::SET);
    setState(1080);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(1076);
      sessionSetSchemaClause();
      break;
    }

    case 2: {
      setState(1077);
      sessionSetGraphClause();
      break;
    }

    case 3: {
      setState(1078);
      sessionSetTimeZoneClause();
      break;
    }

    case 4: {
      setState(1079);
      sessionSetParameterClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetSchemaClauseContext ------------------------------------------------------------------

GQLParser::SessionSetSchemaClauseContext::SessionSetSchemaClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionSetSchemaClauseContext::SCHEMA() {
  return getToken(GQLParser::SCHEMA, 0);
}

GQLParser::SchemaReferenceContext* GQLParser::SessionSetSchemaClauseContext::schemaReference() {
  return getRuleContext<GQLParser::SchemaReferenceContext>(0);
}


size_t GQLParser::SessionSetSchemaClauseContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetSchemaClause;
}


std::any GQLParser::SessionSetSchemaClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSessionSetSchemaClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SessionSetSchemaClauseContext* GQLParser::sessionSetSchemaClause() {
  SessionSetSchemaClauseContext *_localctx = _tracker.createInstance<SessionSetSchemaClauseContext>(_ctx, getState());
  enterRule(_localctx, 16, GQLParser::RuleSessionSetSchemaClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1082);
    match(GQLParser::SCHEMA);
    setState(1083);
    schemaReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetGraphClauseContext ------------------------------------------------------------------

GQLParser::SessionSetGraphClauseContext::SessionSetGraphClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionSetGraphClauseContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

GQLParser::GraphExpressionContext* GQLParser::SessionSetGraphClauseContext::graphExpression() {
  return getRuleContext<GQLParser::GraphExpressionContext>(0);
}

tree::TerminalNode* GQLParser::SessionSetGraphClauseContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}


size_t GQLParser::SessionSetGraphClauseContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetGraphClause;
}


std::any GQLParser::SessionSetGraphClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSessionSetGraphClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SessionSetGraphClauseContext* GQLParser::sessionSetGraphClause() {
  SessionSetGraphClauseContext *_localctx = _tracker.createInstance<SessionSetGraphClauseContext>(_ctx, getState());
  enterRule(_localctx, 18, GQLParser::RuleSessionSetGraphClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1086);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::PROPERTY) {
      setState(1085);
      match(GQLParser::PROPERTY);
    }
    setState(1088);
    match(GQLParser::GRAPH);
    setState(1089);
    graphExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetTimeZoneClauseContext ------------------------------------------------------------------

GQLParser::SessionSetTimeZoneClauseContext::SessionSetTimeZoneClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionSetTimeZoneClauseContext::TIME() {
  return getToken(GQLParser::TIME, 0);
}

tree::TerminalNode* GQLParser::SessionSetTimeZoneClauseContext::ZONE() {
  return getToken(GQLParser::ZONE, 0);
}

GQLParser::SetTimeZoneValueContext* GQLParser::SessionSetTimeZoneClauseContext::setTimeZoneValue() {
  return getRuleContext<GQLParser::SetTimeZoneValueContext>(0);
}


size_t GQLParser::SessionSetTimeZoneClauseContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetTimeZoneClause;
}


std::any GQLParser::SessionSetTimeZoneClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSessionSetTimeZoneClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SessionSetTimeZoneClauseContext* GQLParser::sessionSetTimeZoneClause() {
  SessionSetTimeZoneClauseContext *_localctx = _tracker.createInstance<SessionSetTimeZoneClauseContext>(_ctx, getState());
  enterRule(_localctx, 20, GQLParser::RuleSessionSetTimeZoneClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1091);
    match(GQLParser::TIME);
    setState(1092);
    match(GQLParser::ZONE);
    setState(1093);
    setTimeZoneValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetTimeZoneValueContext ------------------------------------------------------------------

GQLParser::SetTimeZoneValueContext::SetTimeZoneValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ExpressionAtomContext* GQLParser::SetTimeZoneValueContext::expressionAtom() {
  return getRuleContext<GQLParser::ExpressionAtomContext>(0);
}


size_t GQLParser::SetTimeZoneValueContext::getRuleIndex() const {
  return GQLParser::RuleSetTimeZoneValue;
}


std::any GQLParser::SetTimeZoneValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSetTimeZoneValue(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SetTimeZoneValueContext* GQLParser::setTimeZoneValue() {
  SetTimeZoneValueContext *_localctx = _tracker.createInstance<SetTimeZoneValueContext>(_ctx, getState());
  enterRule(_localctx, 22, GQLParser::RuleSetTimeZoneValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1095);
    expressionAtom(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetParameterClauseContext ------------------------------------------------------------------

GQLParser::SessionSetParameterClauseContext::SessionSetParameterClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SessionSetGraphParameterClauseContext* GQLParser::SessionSetParameterClauseContext::sessionSetGraphParameterClause() {
  return getRuleContext<GQLParser::SessionSetGraphParameterClauseContext>(0);
}

GQLParser::SessionSetBindingTableParameterClauseContext* GQLParser::SessionSetParameterClauseContext::sessionSetBindingTableParameterClause() {
  return getRuleContext<GQLParser::SessionSetBindingTableParameterClauseContext>(0);
}

GQLParser::SessionSetValueParameterClauseContext* GQLParser::SessionSetParameterClauseContext::sessionSetValueParameterClause() {
  return getRuleContext<GQLParser::SessionSetValueParameterClauseContext>(0);
}


size_t GQLParser::SessionSetParameterClauseContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetParameterClause;
}


std::any GQLParser::SessionSetParameterClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSessionSetParameterClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SessionSetParameterClauseContext* GQLParser::sessionSetParameterClause() {
  SessionSetParameterClauseContext *_localctx = _tracker.createInstance<SessionSetParameterClauseContext>(_ctx, getState());
  enterRule(_localctx, 24, GQLParser::RuleSessionSetParameterClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1100);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::GRAPH:
      case GQLParser::PROPERTY: {
        enterOuterAlt(_localctx, 1);
        setState(1097);
        sessionSetGraphParameterClause();
        break;
      }

      case GQLParser::BINDING:
      case GQLParser::TABLE: {
        enterOuterAlt(_localctx, 2);
        setState(1098);
        sessionSetBindingTableParameterClause();
        break;
      }

      case GQLParser::VALUE: {
        enterOuterAlt(_localctx, 3);
        setState(1099);
        sessionSetValueParameterClause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetGraphParameterClauseContext ------------------------------------------------------------------

GQLParser::SessionSetGraphParameterClauseContext::SessionSetGraphParameterClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionSetGraphParameterClauseContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

GQLParser::SessionSetParameterNameContext* GQLParser::SessionSetGraphParameterClauseContext::sessionSetParameterName() {
  return getRuleContext<GQLParser::SessionSetParameterNameContext>(0);
}

GQLParser::OptTypedGraphInitializerContext* GQLParser::SessionSetGraphParameterClauseContext::optTypedGraphInitializer() {
  return getRuleContext<GQLParser::OptTypedGraphInitializerContext>(0);
}

tree::TerminalNode* GQLParser::SessionSetGraphParameterClauseContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}


size_t GQLParser::SessionSetGraphParameterClauseContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetGraphParameterClause;
}


std::any GQLParser::SessionSetGraphParameterClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSessionSetGraphParameterClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SessionSetGraphParameterClauseContext* GQLParser::sessionSetGraphParameterClause() {
  SessionSetGraphParameterClauseContext *_localctx = _tracker.createInstance<SessionSetGraphParameterClauseContext>(_ctx, getState());
  enterRule(_localctx, 26, GQLParser::RuleSessionSetGraphParameterClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1103);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::PROPERTY) {
      setState(1102);
      match(GQLParser::PROPERTY);
    }
    setState(1105);
    match(GQLParser::GRAPH);
    setState(1106);
    sessionSetParameterName();
    setState(1107);
    optTypedGraphInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetBindingTableParameterClauseContext ------------------------------------------------------------------

GQLParser::SessionSetBindingTableParameterClauseContext::SessionSetBindingTableParameterClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionSetBindingTableParameterClauseContext::TABLE() {
  return getToken(GQLParser::TABLE, 0);
}

GQLParser::SessionSetParameterNameContext* GQLParser::SessionSetBindingTableParameterClauseContext::sessionSetParameterName() {
  return getRuleContext<GQLParser::SessionSetParameterNameContext>(0);
}

GQLParser::OptTypedBindingTableInitializerContext* GQLParser::SessionSetBindingTableParameterClauseContext::optTypedBindingTableInitializer() {
  return getRuleContext<GQLParser::OptTypedBindingTableInitializerContext>(0);
}

tree::TerminalNode* GQLParser::SessionSetBindingTableParameterClauseContext::BINDING() {
  return getToken(GQLParser::BINDING, 0);
}


size_t GQLParser::SessionSetBindingTableParameterClauseContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetBindingTableParameterClause;
}


std::any GQLParser::SessionSetBindingTableParameterClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSessionSetBindingTableParameterClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SessionSetBindingTableParameterClauseContext* GQLParser::sessionSetBindingTableParameterClause() {
  SessionSetBindingTableParameterClauseContext *_localctx = _tracker.createInstance<SessionSetBindingTableParameterClauseContext>(_ctx, getState());
  enterRule(_localctx, 28, GQLParser::RuleSessionSetBindingTableParameterClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1110);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::BINDING) {
      setState(1109);
      match(GQLParser::BINDING);
    }
    setState(1112);
    match(GQLParser::TABLE);
    setState(1113);
    sessionSetParameterName();
    setState(1114);
    optTypedBindingTableInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetValueParameterClauseContext ------------------------------------------------------------------

GQLParser::SessionSetValueParameterClauseContext::SessionSetValueParameterClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionSetValueParameterClauseContext::VALUE() {
  return getToken(GQLParser::VALUE, 0);
}

GQLParser::SessionSetParameterNameContext* GQLParser::SessionSetValueParameterClauseContext::sessionSetParameterName() {
  return getRuleContext<GQLParser::SessionSetParameterNameContext>(0);
}

GQLParser::OptTypedValueInitializerContext* GQLParser::SessionSetValueParameterClauseContext::optTypedValueInitializer() {
  return getRuleContext<GQLParser::OptTypedValueInitializerContext>(0);
}


size_t GQLParser::SessionSetValueParameterClauseContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetValueParameterClause;
}


std::any GQLParser::SessionSetValueParameterClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSessionSetValueParameterClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SessionSetValueParameterClauseContext* GQLParser::sessionSetValueParameterClause() {
  SessionSetValueParameterClauseContext *_localctx = _tracker.createInstance<SessionSetValueParameterClauseContext>(_ctx, getState());
  enterRule(_localctx, 30, GQLParser::RuleSessionSetValueParameterClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1116);
    match(GQLParser::VALUE);
    setState(1117);
    sessionSetParameterName();
    setState(1118);
    optTypedValueInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetParameterNameContext ------------------------------------------------------------------

GQLParser::SessionSetParameterNameContext::SessionSetParameterNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ParameterNameContext* GQLParser::SessionSetParameterNameContext::parameterName() {
  return getRuleContext<GQLParser::ParameterNameContext>(0);
}

tree::TerminalNode* GQLParser::SessionSetParameterNameContext::IF() {
  return getToken(GQLParser::IF, 0);
}

tree::TerminalNode* GQLParser::SessionSetParameterNameContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

tree::TerminalNode* GQLParser::SessionSetParameterNameContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}


size_t GQLParser::SessionSetParameterNameContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetParameterName;
}


std::any GQLParser::SessionSetParameterNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSessionSetParameterName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SessionSetParameterNameContext* GQLParser::sessionSetParameterName() {
  SessionSetParameterNameContext *_localctx = _tracker.createInstance<SessionSetParameterNameContext>(_ctx, getState());
  enterRule(_localctx, 32, GQLParser::RuleSessionSetParameterName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1123);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::IF) {
      setState(1120);
      match(GQLParser::IF);
      setState(1121);
      match(GQLParser::NOT);
      setState(1122);
      match(GQLParser::EXISTS);
    }
    setState(1125);
    parameterName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionResetCommandContext ------------------------------------------------------------------

GQLParser::SessionResetCommandContext::SessionResetCommandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionResetCommandContext::SESSION() {
  return getToken(GQLParser::SESSION, 0);
}

tree::TerminalNode* GQLParser::SessionResetCommandContext::RESET() {
  return getToken(GQLParser::RESET, 0);
}

GQLParser::SessionResetArgumentsContext* GQLParser::SessionResetCommandContext::sessionResetArguments() {
  return getRuleContext<GQLParser::SessionResetArgumentsContext>(0);
}


size_t GQLParser::SessionResetCommandContext::getRuleIndex() const {
  return GQLParser::RuleSessionResetCommand;
}


std::any GQLParser::SessionResetCommandContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSessionResetCommand(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SessionResetCommandContext* GQLParser::sessionResetCommand() {
  SessionResetCommandContext *_localctx = _tracker.createInstance<SessionResetCommandContext>(_ctx, getState());
  enterRule(_localctx, 34, GQLParser::RuleSessionResetCommand);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1127);
    match(GQLParser::SESSION);
    setState(1128);
    match(GQLParser::RESET);
    setState(1130);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4611686020574871616) != 0) || _la == GQLParser::GRAPH || ((((_la - 198) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 198)) & 281475010266115) != 0)) {
      setState(1129);
      sessionResetArguments();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionResetArgumentsContext ------------------------------------------------------------------

GQLParser::SessionResetArgumentsContext::SessionResetArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::PARAMETERS() {
  return getToken(GQLParser::PARAMETERS, 0);
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::CHARACTERISTICS() {
  return getToken(GQLParser::CHARACTERISTICS, 0);
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::ALL() {
  return getToken(GQLParser::ALL, 0);
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::SCHEMA() {
  return getToken(GQLParser::SCHEMA, 0);
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::TIME() {
  return getToken(GQLParser::TIME, 0);
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::ZONE() {
  return getToken(GQLParser::ZONE, 0);
}

GQLParser::ParameterNameContext* GQLParser::SessionResetArgumentsContext::parameterName() {
  return getRuleContext<GQLParser::ParameterNameContext>(0);
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::PARAMETER() {
  return getToken(GQLParser::PARAMETER, 0);
}


size_t GQLParser::SessionResetArgumentsContext::getRuleIndex() const {
  return GQLParser::RuleSessionResetArguments;
}


std::any GQLParser::SessionResetArgumentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSessionResetArguments(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SessionResetArgumentsContext* GQLParser::sessionResetArguments() {
  SessionResetArgumentsContext *_localctx = _tracker.createInstance<SessionResetArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 36, GQLParser::RuleSessionResetArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1147);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ALL:
      case GQLParser::CHARACTERISTICS:
      case GQLParser::PARAMETERS: {
        enterOuterAlt(_localctx, 1);
        setState(1133);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::ALL) {
          setState(1132);
          match(GQLParser::ALL);
        }
        setState(1135);
        _la = _input->LA(1);
        if (!(_la == GQLParser::CHARACTERISTICS || _la == GQLParser::PARAMETERS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case GQLParser::SCHEMA: {
        enterOuterAlt(_localctx, 2);
        setState(1136);
        match(GQLParser::SCHEMA);
        break;
      }

      case GQLParser::GRAPH:
      case GQLParser::PROPERTY: {
        enterOuterAlt(_localctx, 3);
        setState(1138);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::PROPERTY) {
          setState(1137);
          match(GQLParser::PROPERTY);
        }
        setState(1140);
        match(GQLParser::GRAPH);
        break;
      }

      case GQLParser::TIME: {
        enterOuterAlt(_localctx, 4);
        setState(1141);
        match(GQLParser::TIME);
        setState(1142);
        match(GQLParser::ZONE);
        break;
      }

      case GQLParser::DOLLAR_SIGN:
      case GQLParser::PARAMETER: {
        enterOuterAlt(_localctx, 5);
        setState(1144);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::PARAMETER) {
          setState(1143);
          match(GQLParser::PARAMETER);
        }
        setState(1146);
        parameterName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionCloseCommandContext ------------------------------------------------------------------

GQLParser::SessionCloseCommandContext::SessionCloseCommandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionCloseCommandContext::SESSION() {
  return getToken(GQLParser::SESSION, 0);
}

tree::TerminalNode* GQLParser::SessionCloseCommandContext::CLOSE() {
  return getToken(GQLParser::CLOSE, 0);
}


size_t GQLParser::SessionCloseCommandContext::getRuleIndex() const {
  return GQLParser::RuleSessionCloseCommand;
}


std::any GQLParser::SessionCloseCommandContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSessionCloseCommand(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SessionCloseCommandContext* GQLParser::sessionCloseCommand() {
  SessionCloseCommandContext *_localctx = _tracker.createInstance<SessionCloseCommandContext>(_ctx, getState());
  enterRule(_localctx, 38, GQLParser::RuleSessionCloseCommand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1149);
    match(GQLParser::SESSION);
    setState(1150);
    match(GQLParser::CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StartTransactionCommandContext ------------------------------------------------------------------

GQLParser::StartTransactionCommandContext::StartTransactionCommandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::StartTransactionCommandContext::START() {
  return getToken(GQLParser::START, 0);
}

tree::TerminalNode* GQLParser::StartTransactionCommandContext::TRANSACTION() {
  return getToken(GQLParser::TRANSACTION, 0);
}

GQLParser::TransactionCharacteristicsContext* GQLParser::StartTransactionCommandContext::transactionCharacteristics() {
  return getRuleContext<GQLParser::TransactionCharacteristicsContext>(0);
}


size_t GQLParser::StartTransactionCommandContext::getRuleIndex() const {
  return GQLParser::RuleStartTransactionCommand;
}


std::any GQLParser::StartTransactionCommandContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitStartTransactionCommand(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::StartTransactionCommandContext* GQLParser::startTransactionCommand() {
  StartTransactionCommandContext *_localctx = _tracker.createInstance<StartTransactionCommandContext>(_ctx, getState());
  enterRule(_localctx, 40, GQLParser::RuleStartTransactionCommand);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1152);
    match(GQLParser::START);
    setState(1153);
    match(GQLParser::TRANSACTION);
    setState(1155);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::I_DONT_KNOW_1 || _la == GQLParser::READ) {
      setState(1154);
      transactionCharacteristics();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionCharacteristicsContext ------------------------------------------------------------------

GQLParser::TransactionCharacteristicsContext::TransactionCharacteristicsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::TransactionModeContext *> GQLParser::TransactionCharacteristicsContext::transactionMode() {
  return getRuleContexts<GQLParser::TransactionModeContext>();
}

GQLParser::TransactionModeContext* GQLParser::TransactionCharacteristicsContext::transactionMode(size_t i) {
  return getRuleContext<GQLParser::TransactionModeContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::TransactionCharacteristicsContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::TransactionCharacteristicsContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::TransactionCharacteristicsContext::getRuleIndex() const {
  return GQLParser::RuleTransactionCharacteristics;
}


std::any GQLParser::TransactionCharacteristicsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTransactionCharacteristics(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TransactionCharacteristicsContext* GQLParser::transactionCharacteristics() {
  TransactionCharacteristicsContext *_localctx = _tracker.createInstance<TransactionCharacteristicsContext>(_ctx, getState());
  enterRule(_localctx, 42, GQLParser::RuleTransactionCharacteristics);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1157);
    transactionMode();
    setState(1162);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(1158);
      match(GQLParser::COMMA);
      setState(1159);
      transactionMode();
      setState(1164);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionModeContext ------------------------------------------------------------------

GQLParser::TransactionModeContext::TransactionModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::TransactionAccessModeContext* GQLParser::TransactionModeContext::transactionAccessMode() {
  return getRuleContext<GQLParser::TransactionAccessModeContext>(0);
}

GQLParser::ImplementationDefinedAccessModeContext* GQLParser::TransactionModeContext::implementationDefinedAccessMode() {
  return getRuleContext<GQLParser::ImplementationDefinedAccessModeContext>(0);
}


size_t GQLParser::TransactionModeContext::getRuleIndex() const {
  return GQLParser::RuleTransactionMode;
}


std::any GQLParser::TransactionModeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTransactionMode(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TransactionModeContext* GQLParser::transactionMode() {
  TransactionModeContext *_localctx = _tracker.createInstance<TransactionModeContext>(_ctx, getState());
  enterRule(_localctx, 44, GQLParser::RuleTransactionMode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1167);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::READ: {
        enterOuterAlt(_localctx, 1);
        setState(1165);
        transactionAccessMode();
        break;
      }

      case GQLParser::I_DONT_KNOW_1: {
        enterOuterAlt(_localctx, 2);
        setState(1166);
        implementationDefinedAccessMode();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionAccessModeContext ------------------------------------------------------------------

GQLParser::TransactionAccessModeContext::TransactionAccessModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TransactionAccessModeContext::READ() {
  return getToken(GQLParser::READ, 0);
}

tree::TerminalNode* GQLParser::TransactionAccessModeContext::ONLY() {
  return getToken(GQLParser::ONLY, 0);
}

tree::TerminalNode* GQLParser::TransactionAccessModeContext::WRITE() {
  return getToken(GQLParser::WRITE, 0);
}


size_t GQLParser::TransactionAccessModeContext::getRuleIndex() const {
  return GQLParser::RuleTransactionAccessMode;
}


std::any GQLParser::TransactionAccessModeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTransactionAccessMode(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TransactionAccessModeContext* GQLParser::transactionAccessMode() {
  TransactionAccessModeContext *_localctx = _tracker.createInstance<TransactionAccessModeContext>(_ctx, getState());
  enterRule(_localctx, 46, GQLParser::RuleTransactionAccessMode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1173);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1169);
      match(GQLParser::READ);
      setState(1170);
      match(GQLParser::ONLY);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1171);
      match(GQLParser::READ);
      setState(1172);
      match(GQLParser::WRITE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImplementationDefinedAccessModeContext ------------------------------------------------------------------

GQLParser::ImplementationDefinedAccessModeContext::ImplementationDefinedAccessModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ImplementationDefinedAccessModeContext::I_DONT_KNOW_1() {
  return getToken(GQLParser::I_DONT_KNOW_1, 0);
}


size_t GQLParser::ImplementationDefinedAccessModeContext::getRuleIndex() const {
  return GQLParser::RuleImplementationDefinedAccessMode;
}


std::any GQLParser::ImplementationDefinedAccessModeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitImplementationDefinedAccessMode(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ImplementationDefinedAccessModeContext* GQLParser::implementationDefinedAccessMode() {
  ImplementationDefinedAccessModeContext *_localctx = _tracker.createInstance<ImplementationDefinedAccessModeContext>(_ctx, getState());
  enterRule(_localctx, 48, GQLParser::RuleImplementationDefinedAccessMode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1175);
    match(GQLParser::I_DONT_KNOW_1);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RollbackCommandContext ------------------------------------------------------------------

GQLParser::RollbackCommandContext::RollbackCommandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::RollbackCommandContext::ROLLBACK() {
  return getToken(GQLParser::ROLLBACK, 0);
}


size_t GQLParser::RollbackCommandContext::getRuleIndex() const {
  return GQLParser::RuleRollbackCommand;
}


std::any GQLParser::RollbackCommandContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitRollbackCommand(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::RollbackCommandContext* GQLParser::rollbackCommand() {
  RollbackCommandContext *_localctx = _tracker.createInstance<RollbackCommandContext>(_ctx, getState());
  enterRule(_localctx, 50, GQLParser::RuleRollbackCommand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1177);
    match(GQLParser::ROLLBACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommitCommandContext ------------------------------------------------------------------

GQLParser::CommitCommandContext::CommitCommandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CommitCommandContext::COMMIT() {
  return getToken(GQLParser::COMMIT, 0);
}


size_t GQLParser::CommitCommandContext::getRuleIndex() const {
  return GQLParser::RuleCommitCommand;
}


std::any GQLParser::CommitCommandContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCommitCommand(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CommitCommandContext* GQLParser::commitCommand() {
  CommitCommandContext *_localctx = _tracker.createInstance<CommitCommandContext>(_ctx, getState());
  enterRule(_localctx, 52, GQLParser::RuleCommitCommand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1179);
    match(GQLParser::COMMIT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedProcedureSpecificationContext ------------------------------------------------------------------

GQLParser::NestedProcedureSpecificationContext::NestedProcedureSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NestedProcedureSpecificationContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

GQLParser::ProcedureSpecificationContext* GQLParser::NestedProcedureSpecificationContext::procedureSpecification() {
  return getRuleContext<GQLParser::ProcedureSpecificationContext>(0);
}

tree::TerminalNode* GQLParser::NestedProcedureSpecificationContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}


size_t GQLParser::NestedProcedureSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleNestedProcedureSpecification;
}


std::any GQLParser::NestedProcedureSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNestedProcedureSpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NestedProcedureSpecificationContext* GQLParser::nestedProcedureSpecification() {
  NestedProcedureSpecificationContext *_localctx = _tracker.createInstance<NestedProcedureSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 54, GQLParser::RuleNestedProcedureSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1181);
    match(GQLParser::LEFT_BRACE);
    setState(1182);
    procedureSpecification();
    setState(1183);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureSpecificationContext ------------------------------------------------------------------

GQLParser::ProcedureSpecificationContext::ProcedureSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ProcedureBodyContext* GQLParser::ProcedureSpecificationContext::procedureBody() {
  return getRuleContext<GQLParser::ProcedureBodyContext>(0);
}


size_t GQLParser::ProcedureSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleProcedureSpecification;
}


std::any GQLParser::ProcedureSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitProcedureSpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ProcedureSpecificationContext* GQLParser::procedureSpecification() {
  ProcedureSpecificationContext *_localctx = _tracker.createInstance<ProcedureSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 56, GQLParser::RuleProcedureSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1185);
    procedureBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatalogModifyingProcedureSpecificationContext ------------------------------------------------------------------

GQLParser::CatalogModifyingProcedureSpecificationContext::CatalogModifyingProcedureSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ProcedureBodyContext* GQLParser::CatalogModifyingProcedureSpecificationContext::procedureBody() {
  return getRuleContext<GQLParser::ProcedureBodyContext>(0);
}


size_t GQLParser::CatalogModifyingProcedureSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleCatalogModifyingProcedureSpecification;
}


std::any GQLParser::CatalogModifyingProcedureSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCatalogModifyingProcedureSpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CatalogModifyingProcedureSpecificationContext* GQLParser::catalogModifyingProcedureSpecification() {
  CatalogModifyingProcedureSpecificationContext *_localctx = _tracker.createInstance<CatalogModifyingProcedureSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 58, GQLParser::RuleCatalogModifyingProcedureSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1187);
    procedureBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedDataModifyingProcedureSpecificationContext ------------------------------------------------------------------

GQLParser::NestedDataModifyingProcedureSpecificationContext::NestedDataModifyingProcedureSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NestedDataModifyingProcedureSpecificationContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

GQLParser::DataModifyingProcedureSpecificationContext* GQLParser::NestedDataModifyingProcedureSpecificationContext::dataModifyingProcedureSpecification() {
  return getRuleContext<GQLParser::DataModifyingProcedureSpecificationContext>(0);
}

tree::TerminalNode* GQLParser::NestedDataModifyingProcedureSpecificationContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}


size_t GQLParser::NestedDataModifyingProcedureSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleNestedDataModifyingProcedureSpecification;
}


std::any GQLParser::NestedDataModifyingProcedureSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNestedDataModifyingProcedureSpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NestedDataModifyingProcedureSpecificationContext* GQLParser::nestedDataModifyingProcedureSpecification() {
  NestedDataModifyingProcedureSpecificationContext *_localctx = _tracker.createInstance<NestedDataModifyingProcedureSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 60, GQLParser::RuleNestedDataModifyingProcedureSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1189);
    match(GQLParser::LEFT_BRACE);
    setState(1190);
    dataModifyingProcedureSpecification();
    setState(1191);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataModifyingProcedureSpecificationContext ------------------------------------------------------------------

GQLParser::DataModifyingProcedureSpecificationContext::DataModifyingProcedureSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ProcedureBodyContext* GQLParser::DataModifyingProcedureSpecificationContext::procedureBody() {
  return getRuleContext<GQLParser::ProcedureBodyContext>(0);
}


size_t GQLParser::DataModifyingProcedureSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleDataModifyingProcedureSpecification;
}


std::any GQLParser::DataModifyingProcedureSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDataModifyingProcedureSpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DataModifyingProcedureSpecificationContext* GQLParser::dataModifyingProcedureSpecification() {
  DataModifyingProcedureSpecificationContext *_localctx = _tracker.createInstance<DataModifyingProcedureSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 62, GQLParser::RuleDataModifyingProcedureSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1193);
    procedureBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedQuerySpecificationContext ------------------------------------------------------------------

GQLParser::NestedQuerySpecificationContext::NestedQuerySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NestedQuerySpecificationContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

GQLParser::ProcedureSpecificationContext* GQLParser::NestedQuerySpecificationContext::procedureSpecification() {
  return getRuleContext<GQLParser::ProcedureSpecificationContext>(0);
}

tree::TerminalNode* GQLParser::NestedQuerySpecificationContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}


size_t GQLParser::NestedQuerySpecificationContext::getRuleIndex() const {
  return GQLParser::RuleNestedQuerySpecification;
}


std::any GQLParser::NestedQuerySpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNestedQuerySpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NestedQuerySpecificationContext* GQLParser::nestedQuerySpecification() {
  NestedQuerySpecificationContext *_localctx = _tracker.createInstance<NestedQuerySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 64, GQLParser::RuleNestedQuerySpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1195);
    match(GQLParser::LEFT_BRACE);
    setState(1196);
    procedureSpecification();
    setState(1197);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuerySpecificationContext ------------------------------------------------------------------

GQLParser::QuerySpecificationContext::QuerySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ProcedureBodyContext* GQLParser::QuerySpecificationContext::procedureBody() {
  return getRuleContext<GQLParser::ProcedureBodyContext>(0);
}


size_t GQLParser::QuerySpecificationContext::getRuleIndex() const {
  return GQLParser::RuleQuerySpecification;
}


std::any GQLParser::QuerySpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitQuerySpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::QuerySpecificationContext* GQLParser::querySpecification() {
  QuerySpecificationContext *_localctx = _tracker.createInstance<QuerySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 66, GQLParser::RuleQuerySpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1199);
    procedureBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnsignedNumericLiteralContext ------------------------------------------------------------------

GQLParser::UnsignedNumericLiteralContext::UnsignedNumericLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IntegerLiteralContext* GQLParser::UnsignedNumericLiteralContext::integerLiteral() {
  return getRuleContext<GQLParser::IntegerLiteralContext>(0);
}

GQLParser::FloatLiteralContext* GQLParser::UnsignedNumericLiteralContext::floatLiteral() {
  return getRuleContext<GQLParser::FloatLiteralContext>(0);
}


size_t GQLParser::UnsignedNumericLiteralContext::getRuleIndex() const {
  return GQLParser::RuleUnsignedNumericLiteral;
}


std::any GQLParser::UnsignedNumericLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitUnsignedNumericLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::UnsignedNumericLiteralContext* GQLParser::unsignedNumericLiteral() {
  UnsignedNumericLiteralContext *_localctx = _tracker.createInstance<UnsignedNumericLiteralContext>(_ctx, getState());
  enterRule(_localctx, 68, GQLParser::RuleUnsignedNumericLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1203);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::UNSIGNED_DECIMAL_INTEGER:
      case GQLParser::UNSIGNED_HEXADECIMAL_INTEGER:
      case GQLParser::UNSIGNED_OCTAL_INTEGER:
      case GQLParser::UNSIGNED_BINARY_INTEGER: {
        enterOuterAlt(_localctx, 1);
        setState(1201);
        integerLiteral();
        break;
      }

      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION: {
        enterOuterAlt(_localctx, 2);
        setState(1202);
        floatLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegerLiteralContext ------------------------------------------------------------------

GQLParser::IntegerLiteralContext::IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::IntegerLiteralContext::UNSIGNED_DECIMAL_INTEGER() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_INTEGER, 0);
}

tree::TerminalNode* GQLParser::IntegerLiteralContext::UNSIGNED_OCTAL_INTEGER() {
  return getToken(GQLParser::UNSIGNED_OCTAL_INTEGER, 0);
}

tree::TerminalNode* GQLParser::IntegerLiteralContext::UNSIGNED_HEXADECIMAL_INTEGER() {
  return getToken(GQLParser::UNSIGNED_HEXADECIMAL_INTEGER, 0);
}

tree::TerminalNode* GQLParser::IntegerLiteralContext::UNSIGNED_BINARY_INTEGER() {
  return getToken(GQLParser::UNSIGNED_BINARY_INTEGER, 0);
}


size_t GQLParser::IntegerLiteralContext::getRuleIndex() const {
  return GQLParser::RuleIntegerLiteral;
}


std::any GQLParser::IntegerLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitIntegerLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::IntegerLiteralContext* GQLParser::integerLiteral() {
  IntegerLiteralContext *_localctx = _tracker.createInstance<IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 70, GQLParser::RuleIntegerLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1205);
    _la = _input->LA(1);
    if (!(((((_la - 329) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 329)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatLiteralContext ------------------------------------------------------------------

GQLParser::FloatLiteralContext::FloatLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FloatLiteralContext::UNSIGNED_DECIMAL_IN_COMMON_NOTATION() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION, 0);
}

tree::TerminalNode* GQLParser::FloatLiteralContext::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION, 0);
}


size_t GQLParser::FloatLiteralContext::getRuleIndex() const {
  return GQLParser::RuleFloatLiteral;
}


std::any GQLParser::FloatLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFloatLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FloatLiteralContext* GQLParser::floatLiteral() {
  FloatLiteralContext *_localctx = _tracker.createInstance<FloatLiteralContext>(_ctx, getState());
  enterRule(_localctx, 72, GQLParser::RuleFloatLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1207);
    _la = _input->LA(1);
    if (!(_la == GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION

    || _la == GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnbrokenSingleQuotedCharacterSequenceContext ------------------------------------------------------------------

GQLParser::UnbrokenSingleQuotedCharacterSequenceContext::UnbrokenSingleQuotedCharacterSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::UnbrokenSingleQuotedCharacterSequenceContext::SINGLE_QUOTED_STRING_LITERAL() {
  return getToken(GQLParser::SINGLE_QUOTED_STRING_LITERAL, 0);
}


size_t GQLParser::UnbrokenSingleQuotedCharacterSequenceContext::getRuleIndex() const {
  return GQLParser::RuleUnbrokenSingleQuotedCharacterSequence;
}


std::any GQLParser::UnbrokenSingleQuotedCharacterSequenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitUnbrokenSingleQuotedCharacterSequence(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::UnbrokenSingleQuotedCharacterSequenceContext* GQLParser::unbrokenSingleQuotedCharacterSequence() {
  UnbrokenSingleQuotedCharacterSequenceContext *_localctx = _tracker.createInstance<UnbrokenSingleQuotedCharacterSequenceContext>(_ctx, getState());
  enterRule(_localctx, 74, GQLParser::RuleUnbrokenSingleQuotedCharacterSequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1209);
    match(GQLParser::SINGLE_QUOTED_STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnbrokenDoubleQuotedCharacterSequenceContext ------------------------------------------------------------------

GQLParser::UnbrokenDoubleQuotedCharacterSequenceContext::UnbrokenDoubleQuotedCharacterSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::UnbrokenDoubleQuotedCharacterSequenceContext::DOUBLE_QUOTED_STRING_LITERAL() {
  return getToken(GQLParser::DOUBLE_QUOTED_STRING_LITERAL, 0);
}


size_t GQLParser::UnbrokenDoubleQuotedCharacterSequenceContext::getRuleIndex() const {
  return GQLParser::RuleUnbrokenDoubleQuotedCharacterSequence;
}


std::any GQLParser::UnbrokenDoubleQuotedCharacterSequenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitUnbrokenDoubleQuotedCharacterSequence(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::UnbrokenDoubleQuotedCharacterSequenceContext* GQLParser::unbrokenDoubleQuotedCharacterSequence() {
  UnbrokenDoubleQuotedCharacterSequenceContext *_localctx = _tracker.createInstance<UnbrokenDoubleQuotedCharacterSequenceContext>(_ctx, getState());
  enterRule(_localctx, 76, GQLParser::RuleUnbrokenDoubleQuotedCharacterSequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1211);
    match(GQLParser::DOUBLE_QUOTED_STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnbrokenAccentQuotedCharacterSequenceContext ------------------------------------------------------------------

GQLParser::UnbrokenAccentQuotedCharacterSequenceContext::UnbrokenAccentQuotedCharacterSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::UnbrokenAccentQuotedCharacterSequenceContext::ACCENT_QUOTED_STRING_LITERAL() {
  return getToken(GQLParser::ACCENT_QUOTED_STRING_LITERAL, 0);
}


size_t GQLParser::UnbrokenAccentQuotedCharacterSequenceContext::getRuleIndex() const {
  return GQLParser::RuleUnbrokenAccentQuotedCharacterSequence;
}


std::any GQLParser::UnbrokenAccentQuotedCharacterSequenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitUnbrokenAccentQuotedCharacterSequence(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::UnbrokenAccentQuotedCharacterSequenceContext* GQLParser::unbrokenAccentQuotedCharacterSequence() {
  UnbrokenAccentQuotedCharacterSequenceContext *_localctx = _tracker.createInstance<UnbrokenAccentQuotedCharacterSequenceContext>(_ctx, getState());
  enterRule(_localctx, 78, GQLParser::RuleUnbrokenAccentQuotedCharacterSequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1213);
    match(GQLParser::ACCENT_QUOTED_STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleQuotedCharacterSequenceContext ------------------------------------------------------------------

GQLParser::SingleQuotedCharacterSequenceContext::SingleQuotedCharacterSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::UnbrokenSingleQuotedCharacterSequenceContext *> GQLParser::SingleQuotedCharacterSequenceContext::unbrokenSingleQuotedCharacterSequence() {
  return getRuleContexts<GQLParser::UnbrokenSingleQuotedCharacterSequenceContext>();
}

GQLParser::UnbrokenSingleQuotedCharacterSequenceContext* GQLParser::SingleQuotedCharacterSequenceContext::unbrokenSingleQuotedCharacterSequence(size_t i) {
  return getRuleContext<GQLParser::UnbrokenSingleQuotedCharacterSequenceContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SingleQuotedCharacterSequenceContext::VERTICAL_BAR() {
  return getTokens(GQLParser::VERTICAL_BAR);
}

tree::TerminalNode* GQLParser::SingleQuotedCharacterSequenceContext::VERTICAL_BAR(size_t i) {
  return getToken(GQLParser::VERTICAL_BAR, i);
}


size_t GQLParser::SingleQuotedCharacterSequenceContext::getRuleIndex() const {
  return GQLParser::RuleSingleQuotedCharacterSequence;
}


std::any GQLParser::SingleQuotedCharacterSequenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSingleQuotedCharacterSequence(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SingleQuotedCharacterSequenceContext* GQLParser::singleQuotedCharacterSequence() {
  SingleQuotedCharacterSequenceContext *_localctx = _tracker.createInstance<SingleQuotedCharacterSequenceContext>(_ctx, getState());
  enterRule(_localctx, 80, GQLParser::RuleSingleQuotedCharacterSequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1215);
    unbrokenSingleQuotedCharacterSequence();
    setState(1220);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1216);
        match(GQLParser::VERTICAL_BAR);
        setState(1217);
        unbrokenSingleQuotedCharacterSequence(); 
      }
      setState(1222);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoubleQuotedCharacterSequenceContext ------------------------------------------------------------------

GQLParser::DoubleQuotedCharacterSequenceContext::DoubleQuotedCharacterSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::UnbrokenDoubleQuotedCharacterSequenceContext *> GQLParser::DoubleQuotedCharacterSequenceContext::unbrokenDoubleQuotedCharacterSequence() {
  return getRuleContexts<GQLParser::UnbrokenDoubleQuotedCharacterSequenceContext>();
}

GQLParser::UnbrokenDoubleQuotedCharacterSequenceContext* GQLParser::DoubleQuotedCharacterSequenceContext::unbrokenDoubleQuotedCharacterSequence(size_t i) {
  return getRuleContext<GQLParser::UnbrokenDoubleQuotedCharacterSequenceContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::DoubleQuotedCharacterSequenceContext::VERTICAL_BAR() {
  return getTokens(GQLParser::VERTICAL_BAR);
}

tree::TerminalNode* GQLParser::DoubleQuotedCharacterSequenceContext::VERTICAL_BAR(size_t i) {
  return getToken(GQLParser::VERTICAL_BAR, i);
}


size_t GQLParser::DoubleQuotedCharacterSequenceContext::getRuleIndex() const {
  return GQLParser::RuleDoubleQuotedCharacterSequence;
}


std::any GQLParser::DoubleQuotedCharacterSequenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDoubleQuotedCharacterSequence(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DoubleQuotedCharacterSequenceContext* GQLParser::doubleQuotedCharacterSequence() {
  DoubleQuotedCharacterSequenceContext *_localctx = _tracker.createInstance<DoubleQuotedCharacterSequenceContext>(_ctx, getState());
  enterRule(_localctx, 82, GQLParser::RuleDoubleQuotedCharacterSequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1223);
    unbrokenDoubleQuotedCharacterSequence();
    setState(1228);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1224);
        match(GQLParser::VERTICAL_BAR);
        setState(1225);
        unbrokenDoubleQuotedCharacterSequence(); 
      }
      setState(1230);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AccentQuotedCharacterSequenceContext ------------------------------------------------------------------

GQLParser::AccentQuotedCharacterSequenceContext::AccentQuotedCharacterSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::UnbrokenAccentQuotedCharacterSequenceContext *> GQLParser::AccentQuotedCharacterSequenceContext::unbrokenAccentQuotedCharacterSequence() {
  return getRuleContexts<GQLParser::UnbrokenAccentQuotedCharacterSequenceContext>();
}

GQLParser::UnbrokenAccentQuotedCharacterSequenceContext* GQLParser::AccentQuotedCharacterSequenceContext::unbrokenAccentQuotedCharacterSequence(size_t i) {
  return getRuleContext<GQLParser::UnbrokenAccentQuotedCharacterSequenceContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::AccentQuotedCharacterSequenceContext::VERTICAL_BAR() {
  return getTokens(GQLParser::VERTICAL_BAR);
}

tree::TerminalNode* GQLParser::AccentQuotedCharacterSequenceContext::VERTICAL_BAR(size_t i) {
  return getToken(GQLParser::VERTICAL_BAR, i);
}


size_t GQLParser::AccentQuotedCharacterSequenceContext::getRuleIndex() const {
  return GQLParser::RuleAccentQuotedCharacterSequence;
}


std::any GQLParser::AccentQuotedCharacterSequenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAccentQuotedCharacterSequence(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::AccentQuotedCharacterSequenceContext* GQLParser::accentQuotedCharacterSequence() {
  AccentQuotedCharacterSequenceContext *_localctx = _tracker.createInstance<AccentQuotedCharacterSequenceContext>(_ctx, getState());
  enterRule(_localctx, 84, GQLParser::RuleAccentQuotedCharacterSequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1231);
    unbrokenAccentQuotedCharacterSequence();
    setState(1236);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1232);
        match(GQLParser::VERTICAL_BAR);
        setState(1233);
        unbrokenAccentQuotedCharacterSequence(); 
      }
      setState(1238);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnbrokenCharacterStringLiteralContext ------------------------------------------------------------------

GQLParser::UnbrokenCharacterStringLiteralContext::UnbrokenCharacterStringLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnbrokenSingleQuotedCharacterSequenceContext* GQLParser::UnbrokenCharacterStringLiteralContext::unbrokenSingleQuotedCharacterSequence() {
  return getRuleContext<GQLParser::UnbrokenSingleQuotedCharacterSequenceContext>(0);
}

GQLParser::UnbrokenDoubleQuotedCharacterSequenceContext* GQLParser::UnbrokenCharacterStringLiteralContext::unbrokenDoubleQuotedCharacterSequence() {
  return getRuleContext<GQLParser::UnbrokenDoubleQuotedCharacterSequenceContext>(0);
}


size_t GQLParser::UnbrokenCharacterStringLiteralContext::getRuleIndex() const {
  return GQLParser::RuleUnbrokenCharacterStringLiteral;
}


std::any GQLParser::UnbrokenCharacterStringLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitUnbrokenCharacterStringLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::UnbrokenCharacterStringLiteralContext* GQLParser::unbrokenCharacterStringLiteral() {
  UnbrokenCharacterStringLiteralContext *_localctx = _tracker.createInstance<UnbrokenCharacterStringLiteralContext>(_ctx, getState());
  enterRule(_localctx, 86, GQLParser::RuleUnbrokenCharacterStringLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1241);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::SINGLE_QUOTED_STRING_LITERAL: {
        setState(1239);
        unbrokenSingleQuotedCharacterSequence();
        break;
      }

      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL: {
        setState(1240);
        unbrokenDoubleQuotedCharacterSequence();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullLiteralContext ------------------------------------------------------------------

GQLParser::NullLiteralContext::NullLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NullLiteralContext::NULL_() {
  return getToken(GQLParser::NULL_, 0);
}


size_t GQLParser::NullLiteralContext::getRuleIndex() const {
  return GQLParser::RuleNullLiteral;
}


std::any GQLParser::NullLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNullLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NullLiteralContext* GQLParser::nullLiteral() {
  NullLiteralContext *_localctx = _tracker.createInstance<NullLiteralContext>(_ctx, getState());
  enterRule(_localctx, 88, GQLParser::RuleNullLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1243);
    match(GQLParser::NULL_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemporalLiteralContext ------------------------------------------------------------------

GQLParser::TemporalLiteralContext::TemporalLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DateLiteralContext* GQLParser::TemporalLiteralContext::dateLiteral() {
  return getRuleContext<GQLParser::DateLiteralContext>(0);
}

GQLParser::TimeLiteralContext* GQLParser::TemporalLiteralContext::timeLiteral() {
  return getRuleContext<GQLParser::TimeLiteralContext>(0);
}

GQLParser::DatetimeLiteralContext* GQLParser::TemporalLiteralContext::datetimeLiteral() {
  return getRuleContext<GQLParser::DatetimeLiteralContext>(0);
}

GQLParser::SqlDatetimeLiteralContext* GQLParser::TemporalLiteralContext::sqlDatetimeLiteral() {
  return getRuleContext<GQLParser::SqlDatetimeLiteralContext>(0);
}


size_t GQLParser::TemporalLiteralContext::getRuleIndex() const {
  return GQLParser::RuleTemporalLiteral;
}


std::any GQLParser::TemporalLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTemporalLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TemporalLiteralContext* GQLParser::temporalLiteral() {
  TemporalLiteralContext *_localctx = _tracker.createInstance<TemporalLiteralContext>(_ctx, getState());
  enterRule(_localctx, 90, GQLParser::RuleTemporalLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1249);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1245);
      dateLiteral();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1246);
      timeLiteral();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1247);
      datetimeLiteral();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1248);
      sqlDatetimeLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SqlDatetimeLiteralContext ------------------------------------------------------------------

GQLParser::SqlDatetimeLiteralContext::SqlDatetimeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SqlDatetimeLiteralContext::DATE() {
  return getToken(GQLParser::DATE, 0);
}

std::vector<tree::TerminalNode *> GQLParser::SqlDatetimeLiteralContext::QUOTE() {
  return getTokens(GQLParser::QUOTE);
}

tree::TerminalNode* GQLParser::SqlDatetimeLiteralContext::QUOTE(size_t i) {
  return getToken(GQLParser::QUOTE, i);
}

tree::TerminalNode* GQLParser::SqlDatetimeLiteralContext::FOUR_DIGIT() {
  return getToken(GQLParser::FOUR_DIGIT, 0);
}

std::vector<tree::TerminalNode *> GQLParser::SqlDatetimeLiteralContext::MINUS_SIGN() {
  return getTokens(GQLParser::MINUS_SIGN);
}

tree::TerminalNode* GQLParser::SqlDatetimeLiteralContext::MINUS_SIGN(size_t i) {
  return getToken(GQLParser::MINUS_SIGN, i);
}

std::vector<tree::TerminalNode *> GQLParser::SqlDatetimeLiteralContext::DOUBLE_DIGIT() {
  return getTokens(GQLParser::DOUBLE_DIGIT);
}

tree::TerminalNode* GQLParser::SqlDatetimeLiteralContext::DOUBLE_DIGIT(size_t i) {
  return getToken(GQLParser::DOUBLE_DIGIT, i);
}

tree::TerminalNode* GQLParser::SqlDatetimeLiteralContext::TIME() {
  return getToken(GQLParser::TIME, 0);
}

std::vector<tree::TerminalNode *> GQLParser::SqlDatetimeLiteralContext::COLON() {
  return getTokens(GQLParser::COLON);
}

tree::TerminalNode* GQLParser::SqlDatetimeLiteralContext::COLON(size_t i) {
  return getToken(GQLParser::COLON, i);
}

tree::TerminalNode* GQLParser::SqlDatetimeLiteralContext::TIMESTAMP() {
  return getToken(GQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* GQLParser::SqlDatetimeLiteralContext::DATETIME() {
  return getToken(GQLParser::DATETIME, 0);
}


size_t GQLParser::SqlDatetimeLiteralContext::getRuleIndex() const {
  return GQLParser::RuleSqlDatetimeLiteral;
}


std::any GQLParser::SqlDatetimeLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSqlDatetimeLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SqlDatetimeLiteralContext* GQLParser::sqlDatetimeLiteral() {
  SqlDatetimeLiteralContext *_localctx = _tracker.createInstance<SqlDatetimeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 92, GQLParser::RuleSqlDatetimeLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1293);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DATE: {
        enterOuterAlt(_localctx, 1);
        setState(1251);
        match(GQLParser::DATE);
        setState(1252);
        match(GQLParser::QUOTE);
        setState(1253);
        match(GQLParser::FOUR_DIGIT);
        setState(1254);
        match(GQLParser::MINUS_SIGN);
        setState(1255);
        match(GQLParser::DOUBLE_DIGIT);
        setState(1256);
        match(GQLParser::MINUS_SIGN);
        setState(1257);
        match(GQLParser::DOUBLE_DIGIT);
        setState(1258);
        match(GQLParser::QUOTE);
        break;
      }

      case GQLParser::TIME: {
        enterOuterAlt(_localctx, 2);
        setState(1259);
        match(GQLParser::TIME);
        setState(1260);
        match(GQLParser::QUOTE);
        setState(1261);
        match(GQLParser::DOUBLE_DIGIT);
        setState(1262);
        match(GQLParser::COLON);
        setState(1263);
        match(GQLParser::DOUBLE_DIGIT);
        setState(1264);
        match(GQLParser::COLON);
        setState(1265);
        match(GQLParser::DOUBLE_DIGIT);
        setState(1266);
        match(GQLParser::QUOTE);
        break;
      }

      case GQLParser::TIMESTAMP: {
        enterOuterAlt(_localctx, 3);
        setState(1267);
        match(GQLParser::TIMESTAMP);
        setState(1268);
        match(GQLParser::QUOTE);
        setState(1269);
        match(GQLParser::FOUR_DIGIT);
        setState(1270);
        match(GQLParser::MINUS_SIGN);
        setState(1271);
        match(GQLParser::DOUBLE_DIGIT);
        setState(1272);
        match(GQLParser::MINUS_SIGN);
        setState(1273);
        match(GQLParser::DOUBLE_DIGIT);
        setState(1274);
        match(GQLParser::DOUBLE_DIGIT);
        setState(1275);
        match(GQLParser::COLON);
        setState(1276);
        match(GQLParser::DOUBLE_DIGIT);
        setState(1277);
        match(GQLParser::COLON);
        setState(1278);
        match(GQLParser::DOUBLE_DIGIT);
        setState(1279);
        match(GQLParser::QUOTE);
        break;
      }

      case GQLParser::DATETIME: {
        enterOuterAlt(_localctx, 4);
        setState(1280);
        match(GQLParser::DATETIME);
        setState(1281);
        match(GQLParser::QUOTE);
        setState(1282);
        match(GQLParser::FOUR_DIGIT);
        setState(1283);
        match(GQLParser::MINUS_SIGN);
        setState(1284);
        match(GQLParser::DOUBLE_DIGIT);
        setState(1285);
        match(GQLParser::MINUS_SIGN);
        setState(1286);
        match(GQLParser::DOUBLE_DIGIT);
        setState(1287);
        match(GQLParser::DOUBLE_DIGIT);
        setState(1288);
        match(GQLParser::COLON);
        setState(1289);
        match(GQLParser::DOUBLE_DIGIT);
        setState(1290);
        match(GQLParser::COLON);
        setState(1291);
        match(GQLParser::DOUBLE_DIGIT);
        setState(1292);
        match(GQLParser::QUOTE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DateLiteralContext ------------------------------------------------------------------

GQLParser::DateLiteralContext::DateLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DateLiteralContext::DATE() {
  return getToken(GQLParser::DATE, 0);
}

GQLParser::UnbrokenCharacterStringLiteralContext* GQLParser::DateLiteralContext::unbrokenCharacterStringLiteral() {
  return getRuleContext<GQLParser::UnbrokenCharacterStringLiteralContext>(0);
}


size_t GQLParser::DateLiteralContext::getRuleIndex() const {
  return GQLParser::RuleDateLiteral;
}


std::any GQLParser::DateLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDateLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DateLiteralContext* GQLParser::dateLiteral() {
  DateLiteralContext *_localctx = _tracker.createInstance<DateLiteralContext>(_ctx, getState());
  enterRule(_localctx, 94, GQLParser::RuleDateLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1295);
    match(GQLParser::DATE);
    setState(1296);
    unbrokenCharacterStringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimeLiteralContext ------------------------------------------------------------------

GQLParser::TimeLiteralContext::TimeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TimeLiteralContext::TIME() {
  return getToken(GQLParser::TIME, 0);
}

GQLParser::UnbrokenCharacterStringLiteralContext* GQLParser::TimeLiteralContext::unbrokenCharacterStringLiteral() {
  return getRuleContext<GQLParser::UnbrokenCharacterStringLiteralContext>(0);
}


size_t GQLParser::TimeLiteralContext::getRuleIndex() const {
  return GQLParser::RuleTimeLiteral;
}


std::any GQLParser::TimeLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTimeLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TimeLiteralContext* GQLParser::timeLiteral() {
  TimeLiteralContext *_localctx = _tracker.createInstance<TimeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 96, GQLParser::RuleTimeLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1298);
    match(GQLParser::TIME);
    setState(1299);
    unbrokenCharacterStringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeLiteralContext ------------------------------------------------------------------

GQLParser::DatetimeLiteralContext::DatetimeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnbrokenCharacterStringLiteralContext* GQLParser::DatetimeLiteralContext::unbrokenCharacterStringLiteral() {
  return getRuleContext<GQLParser::UnbrokenCharacterStringLiteralContext>(0);
}

tree::TerminalNode* GQLParser::DatetimeLiteralContext::DATETIME() {
  return getToken(GQLParser::DATETIME, 0);
}

tree::TerminalNode* GQLParser::DatetimeLiteralContext::TIMESTAMP() {
  return getToken(GQLParser::TIMESTAMP, 0);
}


size_t GQLParser::DatetimeLiteralContext::getRuleIndex() const {
  return GQLParser::RuleDatetimeLiteral;
}


std::any GQLParser::DatetimeLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDatetimeLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DatetimeLiteralContext* GQLParser::datetimeLiteral() {
  DatetimeLiteralContext *_localctx = _tracker.createInstance<DatetimeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 98, GQLParser::RuleDatetimeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1301);
    _la = _input->LA(1);
    if (!(_la == GQLParser::DATETIME || _la == GQLParser::TIMESTAMP)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1302);
    unbrokenCharacterStringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DurationLiteralContext ------------------------------------------------------------------

GQLParser::DurationLiteralContext::DurationLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DurationLiteralContext::DURATION() {
  return getToken(GQLParser::DURATION, 0);
}

GQLParser::UnbrokenCharacterStringLiteralContext* GQLParser::DurationLiteralContext::unbrokenCharacterStringLiteral() {
  return getRuleContext<GQLParser::UnbrokenCharacterStringLiteralContext>(0);
}

GQLParser::SqlIntervalLiteralContext* GQLParser::DurationLiteralContext::sqlIntervalLiteral() {
  return getRuleContext<GQLParser::SqlIntervalLiteralContext>(0);
}


size_t GQLParser::DurationLiteralContext::getRuleIndex() const {
  return GQLParser::RuleDurationLiteral;
}


std::any GQLParser::DurationLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDurationLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DurationLiteralContext* GQLParser::durationLiteral() {
  DurationLiteralContext *_localctx = _tracker.createInstance<DurationLiteralContext>(_ctx, getState());
  enterRule(_localctx, 100, GQLParser::RuleDurationLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1307);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DURATION: {
        enterOuterAlt(_localctx, 1);
        setState(1304);
        match(GQLParser::DURATION);
        setState(1305);
        unbrokenCharacterStringLiteral();
        break;
      }

      case GQLParser::UNSIGNED_DECIMAL_INTEGER: {
        enterOuterAlt(_localctx, 2);
        setState(1306);
        sqlIntervalLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SqlIntervalLiteralContext ------------------------------------------------------------------

GQLParser::SqlIntervalLiteralContext::SqlIntervalLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SqlIntervalLiteralContext::UNSIGNED_DECIMAL_INTEGER() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_INTEGER, 0);
}

GQLParser::SqlIntervalTypeContext* GQLParser::SqlIntervalLiteralContext::sqlIntervalType() {
  return getRuleContext<GQLParser::SqlIntervalTypeContext>(0);
}


size_t GQLParser::SqlIntervalLiteralContext::getRuleIndex() const {
  return GQLParser::RuleSqlIntervalLiteral;
}


std::any GQLParser::SqlIntervalLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSqlIntervalLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SqlIntervalLiteralContext* GQLParser::sqlIntervalLiteral() {
  SqlIntervalLiteralContext *_localctx = _tracker.createInstance<SqlIntervalLiteralContext>(_ctx, getState());
  enterRule(_localctx, 102, GQLParser::RuleSqlIntervalLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1309);
    match(GQLParser::UNSIGNED_DECIMAL_INTEGER);
    setState(1310);
    sqlIntervalType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SqlIntervalTypeContext ------------------------------------------------------------------

GQLParser::SqlIntervalTypeContext::SqlIntervalTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SqlIntervalTypeContext::INTERVAL_DAY() {
  return getToken(GQLParser::INTERVAL_DAY, 0);
}

tree::TerminalNode* GQLParser::SqlIntervalTypeContext::INTERVAL_WEEK() {
  return getToken(GQLParser::INTERVAL_WEEK, 0);
}

tree::TerminalNode* GQLParser::SqlIntervalTypeContext::INTERVAL_MONTH() {
  return getToken(GQLParser::INTERVAL_MONTH, 0);
}

tree::TerminalNode* GQLParser::SqlIntervalTypeContext::INTERVAL_YEAR() {
  return getToken(GQLParser::INTERVAL_YEAR, 0);
}


size_t GQLParser::SqlIntervalTypeContext::getRuleIndex() const {
  return GQLParser::RuleSqlIntervalType;
}


std::any GQLParser::SqlIntervalTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSqlIntervalType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SqlIntervalTypeContext* GQLParser::sqlIntervalType() {
  SqlIntervalTypeContext *_localctx = _tracker.createInstance<SqlIntervalTypeContext>(_ctx, getState());
  enterRule(_localctx, 104, GQLParser::RuleSqlIntervalType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1312);
    _la = _input->LA(1);
    if (!(((((_la - 288) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 288)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

GQLParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::IdentifierContext::REGULAR_IDENTIFIER() {
  return getToken(GQLParser::REGULAR_IDENTIFIER, 0);
}

GQLParser::DelimitedIdentifierContext* GQLParser::IdentifierContext::delimitedIdentifier() {
  return getRuleContext<GQLParser::DelimitedIdentifierContext>(0);
}


size_t GQLParser::IdentifierContext::getRuleIndex() const {
  return GQLParser::RuleIdentifier;
}


std::any GQLParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::IdentifierContext* GQLParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 106, GQLParser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1316);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1314);
        match(GQLParser::REGULAR_IDENTIFIER);
        break;
      }

      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1315);
        delimitedIdentifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DelimitedIdentifierContext ------------------------------------------------------------------

GQLParser::DelimitedIdentifierContext::DelimitedIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DoubleQuotedCharacterSequenceContext* GQLParser::DelimitedIdentifierContext::doubleQuotedCharacterSequence() {
  return getRuleContext<GQLParser::DoubleQuotedCharacterSequenceContext>(0);
}

GQLParser::AccentQuotedCharacterSequenceContext* GQLParser::DelimitedIdentifierContext::accentQuotedCharacterSequence() {
  return getRuleContext<GQLParser::AccentQuotedCharacterSequenceContext>(0);
}


size_t GQLParser::DelimitedIdentifierContext::getRuleIndex() const {
  return GQLParser::RuleDelimitedIdentifier;
}


std::any GQLParser::DelimitedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDelimitedIdentifier(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DelimitedIdentifierContext* GQLParser::delimitedIdentifier() {
  DelimitedIdentifierContext *_localctx = _tracker.createInstance<DelimitedIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 108, GQLParser::RuleDelimitedIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1320);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1318);
        doubleQuotedCharacterSequence();
        break;
      }

      case GQLParser::ACCENT_QUOTED_STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1319);
        accentQuotedCharacterSequence();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectNameContext ------------------------------------------------------------------

GQLParser::ObjectNameContext::ObjectNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::ObjectNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}

GQLParser::KeywordContext* GQLParser::ObjectNameContext::keyword() {
  return getRuleContext<GQLParser::KeywordContext>(0);
}


size_t GQLParser::ObjectNameContext::getRuleIndex() const {
  return GQLParser::RuleObjectName;
}


std::any GQLParser::ObjectNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitObjectName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ObjectNameContext* GQLParser::objectName() {
  ObjectNameContext *_localctx = _tracker.createInstance<ObjectNameContext>(_ctx, getState());
  enterRule(_localctx, 110, GQLParser::RuleObjectName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1324);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1322);
        identifier();
        break;
      }

      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ACYCLIC:
      case GQLParser::ALL:
      case GQLParser::ALL_DIFFERENT:
      case GQLParser::AND:
      case GQLParser::ANY:
      case GQLParser::ARRAY:
      case GQLParser::AS:
      case GQLParser::ASC:
      case GQLParser::ASCENDING:
      case GQLParser::ASIN:
      case GQLParser::AT:
      case GQLParser::ATAN:
      case GQLParser::AVG:
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::BINARY:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::BOOL:
      case GQLParser::BOOLEAN:
      case GQLParser::BOTH:
      case GQLParser::BTRIM:
      case GQLParser::BY:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::BYTES:
      case GQLParser::CALL:
      case GQLParser::CASE:
      case GQLParser::CAST:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::CHARACTERISTICS:
      case GQLParser::CLOSE:
      case GQLParser::COALESCE:
      case GQLParser::COLLECT:
      case GQLParser::COMMIT:
      case GQLParser::CONNECTING:
      case GQLParser::COPY:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::COUNT:
      case GQLParser::CREATE:
      case GQLParser::CURRENT_DATE:
      case GQLParser::CURRENT_GRAPH:
      case GQLParser::CURRENT_PROPERTY_GRAPH:
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::CURRENT_TIME:
      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::CURRENT_USER:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DEC:
      case GQLParser::DECIMAL:
      case GQLParser::DEGREES:
      case GQLParser::DELETE:
      case GQLParser::DESC:
      case GQLParser::DESCENDING:
      case GQLParser::DESTINATION:
      case GQLParser::DETACH:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::DISTINCT:
      case GQLParser::DOUBLE:
      case GQLParser::DROP:
      case GQLParser::DURATION:
      case GQLParser::DURATION_BETWEEN:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENT_ID:
      case GQLParser::ELEMENTS:
      case GQLParser::ELSE:
      case GQLParser::END:
      case GQLParser::EXCEPT:
      case GQLParser::EXISTS:
      case GQLParser::EXP:
      case GQLParser::K_FALSE:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FIRST:
      case GQLParser::FLOAT:
      case GQLParser::FLOAT128:
      case GQLParser::FLOAT16:
      case GQLParser::FLOAT256:
      case GQLParser::FLOAT32:
      case GQLParser::FLOAT64:
      case GQLParser::FLOOR:
      case GQLParser::FOR:
      case GQLParser::FROM:
      case GQLParser::GRAPH:
      case GQLParser::GROUP:
      case GQLParser::GROUPS:
      case GQLParser::HAVING:
      case GQLParser::HOME_GRAPH:
      case GQLParser::HOME_PROPERTY_GRAPH:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::I_DONT_KNOW_1:
      case GQLParser::I_DONT_KNOW_2:
      case GQLParser::I_DONT_KNOW_3:
      case GQLParser::I_DONT_KNOW_4:
      case GQLParser::I_DONT_KNOW_5:
      case GQLParser::IF:
      case GQLParser::IN:
      case GQLParser::INSERT:
      case GQLParser::INT:
      case GQLParser::INT8:
      case GQLParser::INT16:
      case GQLParser::INT32:
      case GQLParser::INT64:
      case GQLParser::INT128:
      case GQLParser::INT256:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::INTERSECT:
      case GQLParser::IS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::LEADING:
      case GQLParser::LEFT:
      case GQLParser::LET:
      case GQLParser::LIKE:
      case GQLParser::LIMIT:
      case GQLParser::LIST:
      case GQLParser::LN:
      case GQLParser::LOCAL:
      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIME:
      case GQLParser::LOCAL_TIMESTAMP:
      case GQLParser::LOG:
      case GQLParser::LOG10:
      case GQLParser::LOWER:
      case GQLParser::LTRIM:
      case GQLParser::MATCH:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::MOD:
      case GQLParser::NEXT:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODETACH:
      case GQLParser::NORMALIZE:
      case GQLParser::NORMALIZED:
      case GQLParser::NOT:
      case GQLParser::NULL_:
      case GQLParser::NULLIF:
      case GQLParser::NULLS:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::OF:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::ONLY:
      case GQLParser::OPEN:
      case GQLParser::OPTIONAL:
      case GQLParser::OR:
      case GQLParser::ORDER:
      case GQLParser::ORDINALITY:
      case GQLParser::OTHERWISE:
      case GQLParser::PARAMETER:
      case GQLParser::PARAMETERS:
      case GQLParser::PATH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::PATHS:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::POWER:
      case GQLParser::PRECISION:
      case GQLParser::PROJECT:
      case GQLParser::PROPERTY:
      case GQLParser::PROPERTY_EXISTS:
      case GQLParser::RADIANS:
      case GQLParser::READ:
      case GQLParser::REAL:
      case GQLParser::RECORD:
      case GQLParser::REMOVE:
      case GQLParser::REPEATABLE:
      case GQLParser::REPLACE:
      case GQLParser::RESET:
      case GQLParser::RETURN:
      case GQLParser::ROLLBACK:
      case GQLParser::RTRIM:
      case GQLParser::RIGHT:
      case GQLParser::SAME:
      case GQLParser::SCHEMA:
      case GQLParser::SELECT:
      case GQLParser::SESSION:
      case GQLParser::SET:
      case GQLParser::SHORTEST:
      case GQLParser::SIGNED:
      case GQLParser::SIMPLE:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::SOURCE:
      case GQLParser::SQRT:
      case GQLParser::START:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::STRING:
      case GQLParser::SUM:
      case GQLParser::TABLE:
      case GQLParser::TAN:
      case GQLParser::TANH:
      case GQLParser::TEMP:
      case GQLParser::THEN:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::TIMEZONE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRAILING:
      case GQLParser::TRANSACTION:
      case GQLParser::TRIM:
      case GQLParser::K_TRUE:
      case GQLParser::TYPE:
      case GQLParser::TYPED:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT128:
      case GQLParser::UINT16:
      case GQLParser::UINT256:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT8:
      case GQLParser::UNDIRECTED:
      case GQLParser::UNION:
      case GQLParser::UNKNOWN:
      case GQLParser::UNSIGNED:
      case GQLParser::UPPER:
      case GQLParser::USE:
      case GQLParser::USMALLINT:
      case GQLParser::VALUE:
      case GQLParser::VARBINARY:
      case GQLParser::VARCHAR:
      case GQLParser::VARIABLE:
      case GQLParser::WALK:
      case GQLParser::WHEN:
      case GQLParser::WHERE:
      case GQLParser::WITH:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::XOR:
      case GQLParser::YIELD:
      case GQLParser::ZONE:
      case GQLParser::ZONED:
      case GQLParser::ZONED_DATETIME:
      case GQLParser::ZONED_TIME:
      case GQLParser::INTERVAL_DAY:
      case GQLParser::INTERVAL_WEEK:
      case GQLParser::INTERVAL_MONTH:
      case GQLParser::INTERVAL_YEAR:
      case GQLParser::EDGE_SYNONYM:
      case GQLParser::EDGES_SYNONYM:
      case GQLParser::NODE_SYNONYM:
      case GQLParser::KEY_WORD:
      case GQLParser::PRE_RESERVED_WORD: {
        enterOuterAlt(_localctx, 2);
        setState(1323);
        keyword();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectNameOrBindingVariableContext ------------------------------------------------------------------

GQLParser::ObjectNameOrBindingVariableContext::ObjectNameOrBindingVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ObjectNameOrBindingVariableContext::REGULAR_IDENTIFIER() {
  return getToken(GQLParser::REGULAR_IDENTIFIER, 0);
}


size_t GQLParser::ObjectNameOrBindingVariableContext::getRuleIndex() const {
  return GQLParser::RuleObjectNameOrBindingVariable;
}


std::any GQLParser::ObjectNameOrBindingVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitObjectNameOrBindingVariable(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ObjectNameOrBindingVariableContext* GQLParser::objectNameOrBindingVariable() {
  ObjectNameOrBindingVariableContext *_localctx = _tracker.createInstance<ObjectNameOrBindingVariableContext>(_ctx, getState());
  enterRule(_localctx, 112, GQLParser::RuleObjectNameOrBindingVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1326);
    match(GQLParser::REGULAR_IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectoryNameContext ------------------------------------------------------------------

GQLParser::DirectoryNameContext::DirectoryNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::DirectoryNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::DirectoryNameContext::getRuleIndex() const {
  return GQLParser::RuleDirectoryName;
}


std::any GQLParser::DirectoryNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDirectoryName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DirectoryNameContext* GQLParser::directoryName() {
  DirectoryNameContext *_localctx = _tracker.createInstance<DirectoryNameContext>(_ctx, getState());
  enterRule(_localctx, 114, GQLParser::RuleDirectoryName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1328);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SchemaNameContext ------------------------------------------------------------------

GQLParser::SchemaNameContext::SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::SchemaNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::SchemaNameContext::getRuleIndex() const {
  return GQLParser::RuleSchemaName;
}


std::any GQLParser::SchemaNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSchemaName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SchemaNameContext* GQLParser::schemaName() {
  SchemaNameContext *_localctx = _tracker.createInstance<SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 116, GQLParser::RuleSchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1330);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphNameContext ------------------------------------------------------------------

GQLParser::GraphNameContext::GraphNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GraphNameContext::REGULAR_IDENTIFIER() {
  return getToken(GQLParser::REGULAR_IDENTIFIER, 0);
}

GQLParser::DelimitedGraphNameContext* GQLParser::GraphNameContext::delimitedGraphName() {
  return getRuleContext<GQLParser::DelimitedGraphNameContext>(0);
}


size_t GQLParser::GraphNameContext::getRuleIndex() const {
  return GQLParser::RuleGraphName;
}


std::any GQLParser::GraphNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphNameContext* GQLParser::graphName() {
  GraphNameContext *_localctx = _tracker.createInstance<GraphNameContext>(_ctx, getState());
  enterRule(_localctx, 118, GQLParser::RuleGraphName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1334);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1332);
        match(GQLParser::REGULAR_IDENTIFIER);
        break;
      }

      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1333);
        delimitedGraphName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DelimitedGraphNameContext ------------------------------------------------------------------

GQLParser::DelimitedGraphNameContext::DelimitedGraphNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DelimitedIdentifierContext* GQLParser::DelimitedGraphNameContext::delimitedIdentifier() {
  return getRuleContext<GQLParser::DelimitedIdentifierContext>(0);
}


size_t GQLParser::DelimitedGraphNameContext::getRuleIndex() const {
  return GQLParser::RuleDelimitedGraphName;
}


std::any GQLParser::DelimitedGraphNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDelimitedGraphName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DelimitedGraphNameContext* GQLParser::delimitedGraphName() {
  DelimitedGraphNameContext *_localctx = _tracker.createInstance<DelimitedGraphNameContext>(_ctx, getState());
  enterRule(_localctx, 120, GQLParser::RuleDelimitedGraphName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1336);
    delimitedIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphTypeNameContext ------------------------------------------------------------------

GQLParser::GraphTypeNameContext::GraphTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::GraphTypeNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::GraphTypeNameContext::getRuleIndex() const {
  return GQLParser::RuleGraphTypeName;
}


std::any GQLParser::GraphTypeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphTypeName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphTypeNameContext* GQLParser::graphTypeName() {
  GraphTypeNameContext *_localctx = _tracker.createInstance<GraphTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 122, GQLParser::RuleGraphTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1338);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementTypeNameContext ------------------------------------------------------------------

GQLParser::ElementTypeNameContext::ElementTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::ElementTypeNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::ElementTypeNameContext::getRuleIndex() const {
  return GQLParser::RuleElementTypeName;
}


std::any GQLParser::ElementTypeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitElementTypeName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ElementTypeNameContext* GQLParser::elementTypeName() {
  ElementTypeNameContext *_localctx = _tracker.createInstance<ElementTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 124, GQLParser::RuleElementTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1340);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingTableNameContext ------------------------------------------------------------------

GQLParser::BindingTableNameContext::BindingTableNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::BindingTableNameContext::REGULAR_IDENTIFIER() {
  return getToken(GQLParser::REGULAR_IDENTIFIER, 0);
}

GQLParser::DelimitedBindingTableNameContext* GQLParser::BindingTableNameContext::delimitedBindingTableName() {
  return getRuleContext<GQLParser::DelimitedBindingTableNameContext>(0);
}


size_t GQLParser::BindingTableNameContext::getRuleIndex() const {
  return GQLParser::RuleBindingTableName;
}


std::any GQLParser::BindingTableNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBindingTableName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BindingTableNameContext* GQLParser::bindingTableName() {
  BindingTableNameContext *_localctx = _tracker.createInstance<BindingTableNameContext>(_ctx, getState());
  enterRule(_localctx, 126, GQLParser::RuleBindingTableName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1344);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1342);
        match(GQLParser::REGULAR_IDENTIFIER);
        break;
      }

      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1343);
        delimitedBindingTableName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DelimitedBindingTableNameContext ------------------------------------------------------------------

GQLParser::DelimitedBindingTableNameContext::DelimitedBindingTableNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DelimitedIdentifierContext* GQLParser::DelimitedBindingTableNameContext::delimitedIdentifier() {
  return getRuleContext<GQLParser::DelimitedIdentifierContext>(0);
}


size_t GQLParser::DelimitedBindingTableNameContext::getRuleIndex() const {
  return GQLParser::RuleDelimitedBindingTableName;
}


std::any GQLParser::DelimitedBindingTableNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDelimitedBindingTableName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DelimitedBindingTableNameContext* GQLParser::delimitedBindingTableName() {
  DelimitedBindingTableNameContext *_localctx = _tracker.createInstance<DelimitedBindingTableNameContext>(_ctx, getState());
  enterRule(_localctx, 128, GQLParser::RuleDelimitedBindingTableName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1346);
    delimitedIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureNameContext ------------------------------------------------------------------

GQLParser::ProcedureNameContext::ProcedureNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::ProcedureNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}

GQLParser::KeywordContext* GQLParser::ProcedureNameContext::keyword() {
  return getRuleContext<GQLParser::KeywordContext>(0);
}


size_t GQLParser::ProcedureNameContext::getRuleIndex() const {
  return GQLParser::RuleProcedureName;
}


std::any GQLParser::ProcedureNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitProcedureName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ProcedureNameContext* GQLParser::procedureName() {
  ProcedureNameContext *_localctx = _tracker.createInstance<ProcedureNameContext>(_ctx, getState());
  enterRule(_localctx, 130, GQLParser::RuleProcedureName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1350);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1348);
        identifier();
        break;
      }

      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ACYCLIC:
      case GQLParser::ALL:
      case GQLParser::ALL_DIFFERENT:
      case GQLParser::AND:
      case GQLParser::ANY:
      case GQLParser::ARRAY:
      case GQLParser::AS:
      case GQLParser::ASC:
      case GQLParser::ASCENDING:
      case GQLParser::ASIN:
      case GQLParser::AT:
      case GQLParser::ATAN:
      case GQLParser::AVG:
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::BINARY:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::BOOL:
      case GQLParser::BOOLEAN:
      case GQLParser::BOTH:
      case GQLParser::BTRIM:
      case GQLParser::BY:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::BYTES:
      case GQLParser::CALL:
      case GQLParser::CASE:
      case GQLParser::CAST:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::CHARACTERISTICS:
      case GQLParser::CLOSE:
      case GQLParser::COALESCE:
      case GQLParser::COLLECT:
      case GQLParser::COMMIT:
      case GQLParser::CONNECTING:
      case GQLParser::COPY:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::COUNT:
      case GQLParser::CREATE:
      case GQLParser::CURRENT_DATE:
      case GQLParser::CURRENT_GRAPH:
      case GQLParser::CURRENT_PROPERTY_GRAPH:
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::CURRENT_TIME:
      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::CURRENT_USER:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DEC:
      case GQLParser::DECIMAL:
      case GQLParser::DEGREES:
      case GQLParser::DELETE:
      case GQLParser::DESC:
      case GQLParser::DESCENDING:
      case GQLParser::DESTINATION:
      case GQLParser::DETACH:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::DISTINCT:
      case GQLParser::DOUBLE:
      case GQLParser::DROP:
      case GQLParser::DURATION:
      case GQLParser::DURATION_BETWEEN:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENT_ID:
      case GQLParser::ELEMENTS:
      case GQLParser::ELSE:
      case GQLParser::END:
      case GQLParser::EXCEPT:
      case GQLParser::EXISTS:
      case GQLParser::EXP:
      case GQLParser::K_FALSE:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FIRST:
      case GQLParser::FLOAT:
      case GQLParser::FLOAT128:
      case GQLParser::FLOAT16:
      case GQLParser::FLOAT256:
      case GQLParser::FLOAT32:
      case GQLParser::FLOAT64:
      case GQLParser::FLOOR:
      case GQLParser::FOR:
      case GQLParser::FROM:
      case GQLParser::GRAPH:
      case GQLParser::GROUP:
      case GQLParser::GROUPS:
      case GQLParser::HAVING:
      case GQLParser::HOME_GRAPH:
      case GQLParser::HOME_PROPERTY_GRAPH:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::I_DONT_KNOW_1:
      case GQLParser::I_DONT_KNOW_2:
      case GQLParser::I_DONT_KNOW_3:
      case GQLParser::I_DONT_KNOW_4:
      case GQLParser::I_DONT_KNOW_5:
      case GQLParser::IF:
      case GQLParser::IN:
      case GQLParser::INSERT:
      case GQLParser::INT:
      case GQLParser::INT8:
      case GQLParser::INT16:
      case GQLParser::INT32:
      case GQLParser::INT64:
      case GQLParser::INT128:
      case GQLParser::INT256:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::INTERSECT:
      case GQLParser::IS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::LEADING:
      case GQLParser::LEFT:
      case GQLParser::LET:
      case GQLParser::LIKE:
      case GQLParser::LIMIT:
      case GQLParser::LIST:
      case GQLParser::LN:
      case GQLParser::LOCAL:
      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIME:
      case GQLParser::LOCAL_TIMESTAMP:
      case GQLParser::LOG:
      case GQLParser::LOG10:
      case GQLParser::LOWER:
      case GQLParser::LTRIM:
      case GQLParser::MATCH:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::MOD:
      case GQLParser::NEXT:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODETACH:
      case GQLParser::NORMALIZE:
      case GQLParser::NORMALIZED:
      case GQLParser::NOT:
      case GQLParser::NULL_:
      case GQLParser::NULLIF:
      case GQLParser::NULLS:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::OF:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::ONLY:
      case GQLParser::OPEN:
      case GQLParser::OPTIONAL:
      case GQLParser::OR:
      case GQLParser::ORDER:
      case GQLParser::ORDINALITY:
      case GQLParser::OTHERWISE:
      case GQLParser::PARAMETER:
      case GQLParser::PARAMETERS:
      case GQLParser::PATH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::PATHS:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::POWER:
      case GQLParser::PRECISION:
      case GQLParser::PROJECT:
      case GQLParser::PROPERTY:
      case GQLParser::PROPERTY_EXISTS:
      case GQLParser::RADIANS:
      case GQLParser::READ:
      case GQLParser::REAL:
      case GQLParser::RECORD:
      case GQLParser::REMOVE:
      case GQLParser::REPEATABLE:
      case GQLParser::REPLACE:
      case GQLParser::RESET:
      case GQLParser::RETURN:
      case GQLParser::ROLLBACK:
      case GQLParser::RTRIM:
      case GQLParser::RIGHT:
      case GQLParser::SAME:
      case GQLParser::SCHEMA:
      case GQLParser::SELECT:
      case GQLParser::SESSION:
      case GQLParser::SET:
      case GQLParser::SHORTEST:
      case GQLParser::SIGNED:
      case GQLParser::SIMPLE:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::SOURCE:
      case GQLParser::SQRT:
      case GQLParser::START:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::STRING:
      case GQLParser::SUM:
      case GQLParser::TABLE:
      case GQLParser::TAN:
      case GQLParser::TANH:
      case GQLParser::TEMP:
      case GQLParser::THEN:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::TIMEZONE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRAILING:
      case GQLParser::TRANSACTION:
      case GQLParser::TRIM:
      case GQLParser::K_TRUE:
      case GQLParser::TYPE:
      case GQLParser::TYPED:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT128:
      case GQLParser::UINT16:
      case GQLParser::UINT256:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT8:
      case GQLParser::UNDIRECTED:
      case GQLParser::UNION:
      case GQLParser::UNKNOWN:
      case GQLParser::UNSIGNED:
      case GQLParser::UPPER:
      case GQLParser::USE:
      case GQLParser::USMALLINT:
      case GQLParser::VALUE:
      case GQLParser::VARBINARY:
      case GQLParser::VARCHAR:
      case GQLParser::VARIABLE:
      case GQLParser::WALK:
      case GQLParser::WHEN:
      case GQLParser::WHERE:
      case GQLParser::WITH:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::XOR:
      case GQLParser::YIELD:
      case GQLParser::ZONE:
      case GQLParser::ZONED:
      case GQLParser::ZONED_DATETIME:
      case GQLParser::ZONED_TIME:
      case GQLParser::INTERVAL_DAY:
      case GQLParser::INTERVAL_WEEK:
      case GQLParser::INTERVAL_MONTH:
      case GQLParser::INTERVAL_YEAR:
      case GQLParser::EDGE_SYNONYM:
      case GQLParser::EDGES_SYNONYM:
      case GQLParser::NODE_SYNONYM:
      case GQLParser::KEY_WORD:
      case GQLParser::PRE_RESERVED_WORD: {
        enterOuterAlt(_localctx, 2);
        setState(1349);
        keyword();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelNameContext ------------------------------------------------------------------

GQLParser::LabelNameContext::LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::LabelNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}

GQLParser::KeywordContext* GQLParser::LabelNameContext::keyword() {
  return getRuleContext<GQLParser::KeywordContext>(0);
}


size_t GQLParser::LabelNameContext::getRuleIndex() const {
  return GQLParser::RuleLabelName;
}


std::any GQLParser::LabelNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLabelName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LabelNameContext* GQLParser::labelName() {
  LabelNameContext *_localctx = _tracker.createInstance<LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 132, GQLParser::RuleLabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1354);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1352);
        identifier();
        break;
      }

      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ACYCLIC:
      case GQLParser::ALL:
      case GQLParser::ALL_DIFFERENT:
      case GQLParser::AND:
      case GQLParser::ANY:
      case GQLParser::ARRAY:
      case GQLParser::AS:
      case GQLParser::ASC:
      case GQLParser::ASCENDING:
      case GQLParser::ASIN:
      case GQLParser::AT:
      case GQLParser::ATAN:
      case GQLParser::AVG:
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::BINARY:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::BOOL:
      case GQLParser::BOOLEAN:
      case GQLParser::BOTH:
      case GQLParser::BTRIM:
      case GQLParser::BY:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::BYTES:
      case GQLParser::CALL:
      case GQLParser::CASE:
      case GQLParser::CAST:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::CHARACTERISTICS:
      case GQLParser::CLOSE:
      case GQLParser::COALESCE:
      case GQLParser::COLLECT:
      case GQLParser::COMMIT:
      case GQLParser::CONNECTING:
      case GQLParser::COPY:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::COUNT:
      case GQLParser::CREATE:
      case GQLParser::CURRENT_DATE:
      case GQLParser::CURRENT_GRAPH:
      case GQLParser::CURRENT_PROPERTY_GRAPH:
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::CURRENT_TIME:
      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::CURRENT_USER:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DEC:
      case GQLParser::DECIMAL:
      case GQLParser::DEGREES:
      case GQLParser::DELETE:
      case GQLParser::DESC:
      case GQLParser::DESCENDING:
      case GQLParser::DESTINATION:
      case GQLParser::DETACH:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::DISTINCT:
      case GQLParser::DOUBLE:
      case GQLParser::DROP:
      case GQLParser::DURATION:
      case GQLParser::DURATION_BETWEEN:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENT_ID:
      case GQLParser::ELEMENTS:
      case GQLParser::ELSE:
      case GQLParser::END:
      case GQLParser::EXCEPT:
      case GQLParser::EXISTS:
      case GQLParser::EXP:
      case GQLParser::K_FALSE:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FIRST:
      case GQLParser::FLOAT:
      case GQLParser::FLOAT128:
      case GQLParser::FLOAT16:
      case GQLParser::FLOAT256:
      case GQLParser::FLOAT32:
      case GQLParser::FLOAT64:
      case GQLParser::FLOOR:
      case GQLParser::FOR:
      case GQLParser::FROM:
      case GQLParser::GRAPH:
      case GQLParser::GROUP:
      case GQLParser::GROUPS:
      case GQLParser::HAVING:
      case GQLParser::HOME_GRAPH:
      case GQLParser::HOME_PROPERTY_GRAPH:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::I_DONT_KNOW_1:
      case GQLParser::I_DONT_KNOW_2:
      case GQLParser::I_DONT_KNOW_3:
      case GQLParser::I_DONT_KNOW_4:
      case GQLParser::I_DONT_KNOW_5:
      case GQLParser::IF:
      case GQLParser::IN:
      case GQLParser::INSERT:
      case GQLParser::INT:
      case GQLParser::INT8:
      case GQLParser::INT16:
      case GQLParser::INT32:
      case GQLParser::INT64:
      case GQLParser::INT128:
      case GQLParser::INT256:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::INTERSECT:
      case GQLParser::IS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::LEADING:
      case GQLParser::LEFT:
      case GQLParser::LET:
      case GQLParser::LIKE:
      case GQLParser::LIMIT:
      case GQLParser::LIST:
      case GQLParser::LN:
      case GQLParser::LOCAL:
      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIME:
      case GQLParser::LOCAL_TIMESTAMP:
      case GQLParser::LOG:
      case GQLParser::LOG10:
      case GQLParser::LOWER:
      case GQLParser::LTRIM:
      case GQLParser::MATCH:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::MOD:
      case GQLParser::NEXT:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODETACH:
      case GQLParser::NORMALIZE:
      case GQLParser::NORMALIZED:
      case GQLParser::NOT:
      case GQLParser::NULL_:
      case GQLParser::NULLIF:
      case GQLParser::NULLS:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::OF:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::ONLY:
      case GQLParser::OPEN:
      case GQLParser::OPTIONAL:
      case GQLParser::OR:
      case GQLParser::ORDER:
      case GQLParser::ORDINALITY:
      case GQLParser::OTHERWISE:
      case GQLParser::PARAMETER:
      case GQLParser::PARAMETERS:
      case GQLParser::PATH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::PATHS:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::POWER:
      case GQLParser::PRECISION:
      case GQLParser::PROJECT:
      case GQLParser::PROPERTY:
      case GQLParser::PROPERTY_EXISTS:
      case GQLParser::RADIANS:
      case GQLParser::READ:
      case GQLParser::REAL:
      case GQLParser::RECORD:
      case GQLParser::REMOVE:
      case GQLParser::REPEATABLE:
      case GQLParser::REPLACE:
      case GQLParser::RESET:
      case GQLParser::RETURN:
      case GQLParser::ROLLBACK:
      case GQLParser::RTRIM:
      case GQLParser::RIGHT:
      case GQLParser::SAME:
      case GQLParser::SCHEMA:
      case GQLParser::SELECT:
      case GQLParser::SESSION:
      case GQLParser::SET:
      case GQLParser::SHORTEST:
      case GQLParser::SIGNED:
      case GQLParser::SIMPLE:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::SOURCE:
      case GQLParser::SQRT:
      case GQLParser::START:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::STRING:
      case GQLParser::SUM:
      case GQLParser::TABLE:
      case GQLParser::TAN:
      case GQLParser::TANH:
      case GQLParser::TEMP:
      case GQLParser::THEN:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::TIMEZONE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRAILING:
      case GQLParser::TRANSACTION:
      case GQLParser::TRIM:
      case GQLParser::K_TRUE:
      case GQLParser::TYPE:
      case GQLParser::TYPED:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT128:
      case GQLParser::UINT16:
      case GQLParser::UINT256:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT8:
      case GQLParser::UNDIRECTED:
      case GQLParser::UNION:
      case GQLParser::UNKNOWN:
      case GQLParser::UNSIGNED:
      case GQLParser::UPPER:
      case GQLParser::USE:
      case GQLParser::USMALLINT:
      case GQLParser::VALUE:
      case GQLParser::VARBINARY:
      case GQLParser::VARCHAR:
      case GQLParser::VARIABLE:
      case GQLParser::WALK:
      case GQLParser::WHEN:
      case GQLParser::WHERE:
      case GQLParser::WITH:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::XOR:
      case GQLParser::YIELD:
      case GQLParser::ZONE:
      case GQLParser::ZONED:
      case GQLParser::ZONED_DATETIME:
      case GQLParser::ZONED_TIME:
      case GQLParser::INTERVAL_DAY:
      case GQLParser::INTERVAL_WEEK:
      case GQLParser::INTERVAL_MONTH:
      case GQLParser::INTERVAL_YEAR:
      case GQLParser::EDGE_SYNONYM:
      case GQLParser::EDGES_SYNONYM:
      case GQLParser::NODE_SYNONYM:
      case GQLParser::KEY_WORD:
      case GQLParser::PRE_RESERVED_WORD: {
        enterOuterAlt(_localctx, 2);
        setState(1353);
        keyword();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionNameContext ------------------------------------------------------------------

GQLParser::FunctionNameContext::FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::FunctionNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::FunctionNameContext::getRuleIndex() const {
  return GQLParser::RuleFunctionName;
}


std::any GQLParser::FunctionNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFunctionName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FunctionNameContext* GQLParser::functionName() {
  FunctionNameContext *_localctx = _tracker.createInstance<FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 134, GQLParser::RuleFunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1356);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyNameContext ------------------------------------------------------------------

GQLParser::PropertyNameContext::PropertyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::PropertyNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}

GQLParser::KeywordContext* GQLParser::PropertyNameContext::keyword() {
  return getRuleContext<GQLParser::KeywordContext>(0);
}


size_t GQLParser::PropertyNameContext::getRuleIndex() const {
  return GQLParser::RulePropertyName;
}


std::any GQLParser::PropertyNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPropertyName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PropertyNameContext* GQLParser::propertyName() {
  PropertyNameContext *_localctx = _tracker.createInstance<PropertyNameContext>(_ctx, getState());
  enterRule(_localctx, 136, GQLParser::RulePropertyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1360);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1358);
        identifier();
        break;
      }

      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ACYCLIC:
      case GQLParser::ALL:
      case GQLParser::ALL_DIFFERENT:
      case GQLParser::AND:
      case GQLParser::ANY:
      case GQLParser::ARRAY:
      case GQLParser::AS:
      case GQLParser::ASC:
      case GQLParser::ASCENDING:
      case GQLParser::ASIN:
      case GQLParser::AT:
      case GQLParser::ATAN:
      case GQLParser::AVG:
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::BINARY:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::BOOL:
      case GQLParser::BOOLEAN:
      case GQLParser::BOTH:
      case GQLParser::BTRIM:
      case GQLParser::BY:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::BYTES:
      case GQLParser::CALL:
      case GQLParser::CASE:
      case GQLParser::CAST:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::CHARACTERISTICS:
      case GQLParser::CLOSE:
      case GQLParser::COALESCE:
      case GQLParser::COLLECT:
      case GQLParser::COMMIT:
      case GQLParser::CONNECTING:
      case GQLParser::COPY:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::COUNT:
      case GQLParser::CREATE:
      case GQLParser::CURRENT_DATE:
      case GQLParser::CURRENT_GRAPH:
      case GQLParser::CURRENT_PROPERTY_GRAPH:
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::CURRENT_TIME:
      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::CURRENT_USER:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DEC:
      case GQLParser::DECIMAL:
      case GQLParser::DEGREES:
      case GQLParser::DELETE:
      case GQLParser::DESC:
      case GQLParser::DESCENDING:
      case GQLParser::DESTINATION:
      case GQLParser::DETACH:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::DISTINCT:
      case GQLParser::DOUBLE:
      case GQLParser::DROP:
      case GQLParser::DURATION:
      case GQLParser::DURATION_BETWEEN:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENT_ID:
      case GQLParser::ELEMENTS:
      case GQLParser::ELSE:
      case GQLParser::END:
      case GQLParser::EXCEPT:
      case GQLParser::EXISTS:
      case GQLParser::EXP:
      case GQLParser::K_FALSE:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FIRST:
      case GQLParser::FLOAT:
      case GQLParser::FLOAT128:
      case GQLParser::FLOAT16:
      case GQLParser::FLOAT256:
      case GQLParser::FLOAT32:
      case GQLParser::FLOAT64:
      case GQLParser::FLOOR:
      case GQLParser::FOR:
      case GQLParser::FROM:
      case GQLParser::GRAPH:
      case GQLParser::GROUP:
      case GQLParser::GROUPS:
      case GQLParser::HAVING:
      case GQLParser::HOME_GRAPH:
      case GQLParser::HOME_PROPERTY_GRAPH:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::I_DONT_KNOW_1:
      case GQLParser::I_DONT_KNOW_2:
      case GQLParser::I_DONT_KNOW_3:
      case GQLParser::I_DONT_KNOW_4:
      case GQLParser::I_DONT_KNOW_5:
      case GQLParser::IF:
      case GQLParser::IN:
      case GQLParser::INSERT:
      case GQLParser::INT:
      case GQLParser::INT8:
      case GQLParser::INT16:
      case GQLParser::INT32:
      case GQLParser::INT64:
      case GQLParser::INT128:
      case GQLParser::INT256:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::INTERSECT:
      case GQLParser::IS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::LEADING:
      case GQLParser::LEFT:
      case GQLParser::LET:
      case GQLParser::LIKE:
      case GQLParser::LIMIT:
      case GQLParser::LIST:
      case GQLParser::LN:
      case GQLParser::LOCAL:
      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIME:
      case GQLParser::LOCAL_TIMESTAMP:
      case GQLParser::LOG:
      case GQLParser::LOG10:
      case GQLParser::LOWER:
      case GQLParser::LTRIM:
      case GQLParser::MATCH:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::MOD:
      case GQLParser::NEXT:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODETACH:
      case GQLParser::NORMALIZE:
      case GQLParser::NORMALIZED:
      case GQLParser::NOT:
      case GQLParser::NULL_:
      case GQLParser::NULLIF:
      case GQLParser::NULLS:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::OF:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::ONLY:
      case GQLParser::OPEN:
      case GQLParser::OPTIONAL:
      case GQLParser::OR:
      case GQLParser::ORDER:
      case GQLParser::ORDINALITY:
      case GQLParser::OTHERWISE:
      case GQLParser::PARAMETER:
      case GQLParser::PARAMETERS:
      case GQLParser::PATH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::PATHS:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::POWER:
      case GQLParser::PRECISION:
      case GQLParser::PROJECT:
      case GQLParser::PROPERTY:
      case GQLParser::PROPERTY_EXISTS:
      case GQLParser::RADIANS:
      case GQLParser::READ:
      case GQLParser::REAL:
      case GQLParser::RECORD:
      case GQLParser::REMOVE:
      case GQLParser::REPEATABLE:
      case GQLParser::REPLACE:
      case GQLParser::RESET:
      case GQLParser::RETURN:
      case GQLParser::ROLLBACK:
      case GQLParser::RTRIM:
      case GQLParser::RIGHT:
      case GQLParser::SAME:
      case GQLParser::SCHEMA:
      case GQLParser::SELECT:
      case GQLParser::SESSION:
      case GQLParser::SET:
      case GQLParser::SHORTEST:
      case GQLParser::SIGNED:
      case GQLParser::SIMPLE:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::SOURCE:
      case GQLParser::SQRT:
      case GQLParser::START:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::STRING:
      case GQLParser::SUM:
      case GQLParser::TABLE:
      case GQLParser::TAN:
      case GQLParser::TANH:
      case GQLParser::TEMP:
      case GQLParser::THEN:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::TIMEZONE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRAILING:
      case GQLParser::TRANSACTION:
      case GQLParser::TRIM:
      case GQLParser::K_TRUE:
      case GQLParser::TYPE:
      case GQLParser::TYPED:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT128:
      case GQLParser::UINT16:
      case GQLParser::UINT256:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT8:
      case GQLParser::UNDIRECTED:
      case GQLParser::UNION:
      case GQLParser::UNKNOWN:
      case GQLParser::UNSIGNED:
      case GQLParser::UPPER:
      case GQLParser::USE:
      case GQLParser::USMALLINT:
      case GQLParser::VALUE:
      case GQLParser::VARBINARY:
      case GQLParser::VARCHAR:
      case GQLParser::VARIABLE:
      case GQLParser::WALK:
      case GQLParser::WHEN:
      case GQLParser::WHERE:
      case GQLParser::WITH:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::XOR:
      case GQLParser::YIELD:
      case GQLParser::ZONE:
      case GQLParser::ZONED:
      case GQLParser::ZONED_DATETIME:
      case GQLParser::ZONED_TIME:
      case GQLParser::INTERVAL_DAY:
      case GQLParser::INTERVAL_WEEK:
      case GQLParser::INTERVAL_MONTH:
      case GQLParser::INTERVAL_YEAR:
      case GQLParser::EDGE_SYNONYM:
      case GQLParser::EDGES_SYNONYM:
      case GQLParser::NODE_SYNONYM:
      case GQLParser::KEY_WORD:
      case GQLParser::PRE_RESERVED_WORD: {
        enterOuterAlt(_localctx, 2);
        setState(1359);
        keyword();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldNameContext ------------------------------------------------------------------

GQLParser::FieldNameContext::FieldNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::FieldNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}

GQLParser::KeywordContext* GQLParser::FieldNameContext::keyword() {
  return getRuleContext<GQLParser::KeywordContext>(0);
}


size_t GQLParser::FieldNameContext::getRuleIndex() const {
  return GQLParser::RuleFieldName;
}


std::any GQLParser::FieldNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFieldName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FieldNameContext* GQLParser::fieldName() {
  FieldNameContext *_localctx = _tracker.createInstance<FieldNameContext>(_ctx, getState());
  enterRule(_localctx, 138, GQLParser::RuleFieldName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1364);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1362);
        identifier();
        break;
      }

      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ACYCLIC:
      case GQLParser::ALL:
      case GQLParser::ALL_DIFFERENT:
      case GQLParser::AND:
      case GQLParser::ANY:
      case GQLParser::ARRAY:
      case GQLParser::AS:
      case GQLParser::ASC:
      case GQLParser::ASCENDING:
      case GQLParser::ASIN:
      case GQLParser::AT:
      case GQLParser::ATAN:
      case GQLParser::AVG:
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::BINARY:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::BOOL:
      case GQLParser::BOOLEAN:
      case GQLParser::BOTH:
      case GQLParser::BTRIM:
      case GQLParser::BY:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::BYTES:
      case GQLParser::CALL:
      case GQLParser::CASE:
      case GQLParser::CAST:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::CHARACTERISTICS:
      case GQLParser::CLOSE:
      case GQLParser::COALESCE:
      case GQLParser::COLLECT:
      case GQLParser::COMMIT:
      case GQLParser::CONNECTING:
      case GQLParser::COPY:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::COUNT:
      case GQLParser::CREATE:
      case GQLParser::CURRENT_DATE:
      case GQLParser::CURRENT_GRAPH:
      case GQLParser::CURRENT_PROPERTY_GRAPH:
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::CURRENT_TIME:
      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::CURRENT_USER:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DEC:
      case GQLParser::DECIMAL:
      case GQLParser::DEGREES:
      case GQLParser::DELETE:
      case GQLParser::DESC:
      case GQLParser::DESCENDING:
      case GQLParser::DESTINATION:
      case GQLParser::DETACH:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::DISTINCT:
      case GQLParser::DOUBLE:
      case GQLParser::DROP:
      case GQLParser::DURATION:
      case GQLParser::DURATION_BETWEEN:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENT_ID:
      case GQLParser::ELEMENTS:
      case GQLParser::ELSE:
      case GQLParser::END:
      case GQLParser::EXCEPT:
      case GQLParser::EXISTS:
      case GQLParser::EXP:
      case GQLParser::K_FALSE:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FIRST:
      case GQLParser::FLOAT:
      case GQLParser::FLOAT128:
      case GQLParser::FLOAT16:
      case GQLParser::FLOAT256:
      case GQLParser::FLOAT32:
      case GQLParser::FLOAT64:
      case GQLParser::FLOOR:
      case GQLParser::FOR:
      case GQLParser::FROM:
      case GQLParser::GRAPH:
      case GQLParser::GROUP:
      case GQLParser::GROUPS:
      case GQLParser::HAVING:
      case GQLParser::HOME_GRAPH:
      case GQLParser::HOME_PROPERTY_GRAPH:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::I_DONT_KNOW_1:
      case GQLParser::I_DONT_KNOW_2:
      case GQLParser::I_DONT_KNOW_3:
      case GQLParser::I_DONT_KNOW_4:
      case GQLParser::I_DONT_KNOW_5:
      case GQLParser::IF:
      case GQLParser::IN:
      case GQLParser::INSERT:
      case GQLParser::INT:
      case GQLParser::INT8:
      case GQLParser::INT16:
      case GQLParser::INT32:
      case GQLParser::INT64:
      case GQLParser::INT128:
      case GQLParser::INT256:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::INTERSECT:
      case GQLParser::IS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::LEADING:
      case GQLParser::LEFT:
      case GQLParser::LET:
      case GQLParser::LIKE:
      case GQLParser::LIMIT:
      case GQLParser::LIST:
      case GQLParser::LN:
      case GQLParser::LOCAL:
      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIME:
      case GQLParser::LOCAL_TIMESTAMP:
      case GQLParser::LOG:
      case GQLParser::LOG10:
      case GQLParser::LOWER:
      case GQLParser::LTRIM:
      case GQLParser::MATCH:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::MOD:
      case GQLParser::NEXT:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODETACH:
      case GQLParser::NORMALIZE:
      case GQLParser::NORMALIZED:
      case GQLParser::NOT:
      case GQLParser::NULL_:
      case GQLParser::NULLIF:
      case GQLParser::NULLS:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::OF:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::ONLY:
      case GQLParser::OPEN:
      case GQLParser::OPTIONAL:
      case GQLParser::OR:
      case GQLParser::ORDER:
      case GQLParser::ORDINALITY:
      case GQLParser::OTHERWISE:
      case GQLParser::PARAMETER:
      case GQLParser::PARAMETERS:
      case GQLParser::PATH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::PATHS:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::POWER:
      case GQLParser::PRECISION:
      case GQLParser::PROJECT:
      case GQLParser::PROPERTY:
      case GQLParser::PROPERTY_EXISTS:
      case GQLParser::RADIANS:
      case GQLParser::READ:
      case GQLParser::REAL:
      case GQLParser::RECORD:
      case GQLParser::REMOVE:
      case GQLParser::REPEATABLE:
      case GQLParser::REPLACE:
      case GQLParser::RESET:
      case GQLParser::RETURN:
      case GQLParser::ROLLBACK:
      case GQLParser::RTRIM:
      case GQLParser::RIGHT:
      case GQLParser::SAME:
      case GQLParser::SCHEMA:
      case GQLParser::SELECT:
      case GQLParser::SESSION:
      case GQLParser::SET:
      case GQLParser::SHORTEST:
      case GQLParser::SIGNED:
      case GQLParser::SIMPLE:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::SOURCE:
      case GQLParser::SQRT:
      case GQLParser::START:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::STRING:
      case GQLParser::SUM:
      case GQLParser::TABLE:
      case GQLParser::TAN:
      case GQLParser::TANH:
      case GQLParser::TEMP:
      case GQLParser::THEN:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::TIMEZONE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRAILING:
      case GQLParser::TRANSACTION:
      case GQLParser::TRIM:
      case GQLParser::K_TRUE:
      case GQLParser::TYPE:
      case GQLParser::TYPED:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT128:
      case GQLParser::UINT16:
      case GQLParser::UINT256:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT8:
      case GQLParser::UNDIRECTED:
      case GQLParser::UNION:
      case GQLParser::UNKNOWN:
      case GQLParser::UNSIGNED:
      case GQLParser::UPPER:
      case GQLParser::USE:
      case GQLParser::USMALLINT:
      case GQLParser::VALUE:
      case GQLParser::VARBINARY:
      case GQLParser::VARCHAR:
      case GQLParser::VARIABLE:
      case GQLParser::WALK:
      case GQLParser::WHEN:
      case GQLParser::WHERE:
      case GQLParser::WITH:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::XOR:
      case GQLParser::YIELD:
      case GQLParser::ZONE:
      case GQLParser::ZONED:
      case GQLParser::ZONED_DATETIME:
      case GQLParser::ZONED_TIME:
      case GQLParser::INTERVAL_DAY:
      case GQLParser::INTERVAL_WEEK:
      case GQLParser::INTERVAL_MONTH:
      case GQLParser::INTERVAL_YEAR:
      case GQLParser::EDGE_SYNONYM:
      case GQLParser::EDGES_SYNONYM:
      case GQLParser::NODE_SYNONYM:
      case GQLParser::KEY_WORD:
      case GQLParser::PRE_RESERVED_WORD: {
        enterOuterAlt(_localctx, 2);
        setState(1363);
        keyword();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterNameContext ------------------------------------------------------------------

GQLParser::ParameterNameContext::ParameterNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ParameterNameContext::DOLLAR_SIGN() {
  return getToken(GQLParser::DOLLAR_SIGN, 0);
}

GQLParser::UnsignedNumericLiteralContext* GQLParser::ParameterNameContext::unsignedNumericLiteral() {
  return getRuleContext<GQLParser::UnsignedNumericLiteralContext>(0);
}

GQLParser::IdentifierContext* GQLParser::ParameterNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::ParameterNameContext::getRuleIndex() const {
  return GQLParser::RuleParameterName;
}


std::any GQLParser::ParameterNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitParameterName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ParameterNameContext* GQLParser::parameterName() {
  ParameterNameContext *_localctx = _tracker.createInstance<ParameterNameContext>(_ctx, getState());
  enterRule(_localctx, 140, GQLParser::RuleParameterName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1366);
    match(GQLParser::DOLLAR_SIGN);
    setState(1369);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::UNSIGNED_DECIMAL_INTEGER:
      case GQLParser::UNSIGNED_HEXADECIMAL_INTEGER:
      case GQLParser::UNSIGNED_OCTAL_INTEGER:
      case GQLParser::UNSIGNED_BINARY_INTEGER:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION: {
        setState(1367);
        unsignedNumericLiteral();
        break;
      }

      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL:
      case GQLParser::REGULAR_IDENTIFIER: {
        setState(1368);
        identifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableContext ------------------------------------------------------------------

GQLParser::VariableContext::VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableContext* GQLParser::VariableContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}


size_t GQLParser::VariableContext::getRuleIndex() const {
  return GQLParser::RuleVariable;
}


std::any GQLParser::VariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitVariable(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::VariableContext* GQLParser::variable() {
  VariableContext *_localctx = _tracker.createInstance<VariableContext>(_ctx, getState());
  enterRule(_localctx, 142, GQLParser::RuleVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1371);
    bindingVariable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphVariableContext ------------------------------------------------------------------

GQLParser::GraphVariableContext::GraphVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableContext* GQLParser::GraphVariableContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}


size_t GQLParser::GraphVariableContext::getRuleIndex() const {
  return GQLParser::RuleGraphVariable;
}


std::any GQLParser::GraphVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphVariable(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphVariableContext* GQLParser::graphVariable() {
  GraphVariableContext *_localctx = _tracker.createInstance<GraphVariableContext>(_ctx, getState());
  enterRule(_localctx, 144, GQLParser::RuleGraphVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1373);
    bindingVariable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternVariableContext ------------------------------------------------------------------

GQLParser::GraphPatternVariableContext::GraphPatternVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementVariableContext* GQLParser::GraphPatternVariableContext::elementVariable() {
  return getRuleContext<GQLParser::ElementVariableContext>(0);
}

GQLParser::PathOrSubpathVariableContext* GQLParser::GraphPatternVariableContext::pathOrSubpathVariable() {
  return getRuleContext<GQLParser::PathOrSubpathVariableContext>(0);
}


size_t GQLParser::GraphPatternVariableContext::getRuleIndex() const {
  return GQLParser::RuleGraphPatternVariable;
}


std::any GQLParser::GraphPatternVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphPatternVariable(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphPatternVariableContext* GQLParser::graphPatternVariable() {
  GraphPatternVariableContext *_localctx = _tracker.createInstance<GraphPatternVariableContext>(_ctx, getState());
  enterRule(_localctx, 146, GQLParser::RuleGraphPatternVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1377);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1375);
      elementVariable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1376);
      pathOrSubpathVariable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathOrSubpathVariableContext ------------------------------------------------------------------

GQLParser::PathOrSubpathVariableContext::PathOrSubpathVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathVariableContext* GQLParser::PathOrSubpathVariableContext::pathVariable() {
  return getRuleContext<GQLParser::PathVariableContext>(0);
}

GQLParser::SubpathVariableContext* GQLParser::PathOrSubpathVariableContext::subpathVariable() {
  return getRuleContext<GQLParser::SubpathVariableContext>(0);
}


size_t GQLParser::PathOrSubpathVariableContext::getRuleIndex() const {
  return GQLParser::RulePathOrSubpathVariable;
}


std::any GQLParser::PathOrSubpathVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathOrSubpathVariable(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathOrSubpathVariableContext* GQLParser::pathOrSubpathVariable() {
  PathOrSubpathVariableContext *_localctx = _tracker.createInstance<PathOrSubpathVariableContext>(_ctx, getState());
  enterRule(_localctx, 148, GQLParser::RulePathOrSubpathVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1381);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1379);
      pathVariable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1380);
      subpathVariable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementVariableContext ------------------------------------------------------------------

GQLParser::ElementVariableContext::ElementVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableContext* GQLParser::ElementVariableContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}


size_t GQLParser::ElementVariableContext::getRuleIndex() const {
  return GQLParser::RuleElementVariable;
}


std::any GQLParser::ElementVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitElementVariable(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ElementVariableContext* GQLParser::elementVariable() {
  ElementVariableContext *_localctx = _tracker.createInstance<ElementVariableContext>(_ctx, getState());
  enterRule(_localctx, 150, GQLParser::RuleElementVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1383);
    bindingVariable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathVariableContext ------------------------------------------------------------------

GQLParser::PathVariableContext::PathVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableContext* GQLParser::PathVariableContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}


size_t GQLParser::PathVariableContext::getRuleIndex() const {
  return GQLParser::RulePathVariable;
}


std::any GQLParser::PathVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathVariable(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathVariableContext* GQLParser::pathVariable() {
  PathVariableContext *_localctx = _tracker.createInstance<PathVariableContext>(_ctx, getState());
  enterRule(_localctx, 152, GQLParser::RulePathVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1385);
    bindingVariable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubpathVariableContext ------------------------------------------------------------------

GQLParser::SubpathVariableContext::SubpathVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::SubpathVariableContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::SubpathVariableContext::getRuleIndex() const {
  return GQLParser::RuleSubpathVariable;
}


std::any GQLParser::SubpathVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSubpathVariable(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SubpathVariableContext* GQLParser::subpathVariable() {
  SubpathVariableContext *_localctx = _tracker.createInstance<SubpathVariableContext>(_ctx, getState());
  enterRule(_localctx, 154, GQLParser::RuleSubpathVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1387);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingTableVariableContext ------------------------------------------------------------------

GQLParser::BindingTableVariableContext::BindingTableVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableContext* GQLParser::BindingTableVariableContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}


size_t GQLParser::BindingTableVariableContext::getRuleIndex() const {
  return GQLParser::RuleBindingTableVariable;
}


std::any GQLParser::BindingTableVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBindingTableVariable(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BindingTableVariableContext* GQLParser::bindingTableVariable() {
  BindingTableVariableContext *_localctx = _tracker.createInstance<BindingTableVariableContext>(_ctx, getState());
  enterRule(_localctx, 156, GQLParser::RuleBindingTableVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1389);
    bindingVariable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueVariableContext ------------------------------------------------------------------

GQLParser::ValueVariableContext::ValueVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableContext* GQLParser::ValueVariableContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}


size_t GQLParser::ValueVariableContext::getRuleIndex() const {
  return GQLParser::RuleValueVariable;
}


std::any GQLParser::ValueVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitValueVariable(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ValueVariableContext* GQLParser::valueVariable() {
  ValueVariableContext *_localctx = _tracker.createInstance<ValueVariableContext>(_ctx, getState());
  enterRule(_localctx, 158, GQLParser::RuleValueVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1391);
    bindingVariable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingVariableContext ------------------------------------------------------------------

GQLParser::BindingVariableContext::BindingVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::BindingVariableContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}

GQLParser::KeywordContext* GQLParser::BindingVariableContext::keyword() {
  return getRuleContext<GQLParser::KeywordContext>(0);
}


size_t GQLParser::BindingVariableContext::getRuleIndex() const {
  return GQLParser::RuleBindingVariable;
}


std::any GQLParser::BindingVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBindingVariable(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BindingVariableContext* GQLParser::bindingVariable() {
  BindingVariableContext *_localctx = _tracker.createInstance<BindingVariableContext>(_ctx, getState());
  enterRule(_localctx, 160, GQLParser::RuleBindingVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1395);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1393);
        identifier();
        break;
      }

      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ACYCLIC:
      case GQLParser::ALL:
      case GQLParser::ALL_DIFFERENT:
      case GQLParser::AND:
      case GQLParser::ANY:
      case GQLParser::ARRAY:
      case GQLParser::AS:
      case GQLParser::ASC:
      case GQLParser::ASCENDING:
      case GQLParser::ASIN:
      case GQLParser::AT:
      case GQLParser::ATAN:
      case GQLParser::AVG:
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::BINARY:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::BOOL:
      case GQLParser::BOOLEAN:
      case GQLParser::BOTH:
      case GQLParser::BTRIM:
      case GQLParser::BY:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::BYTES:
      case GQLParser::CALL:
      case GQLParser::CASE:
      case GQLParser::CAST:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::CHARACTERISTICS:
      case GQLParser::CLOSE:
      case GQLParser::COALESCE:
      case GQLParser::COLLECT:
      case GQLParser::COMMIT:
      case GQLParser::CONNECTING:
      case GQLParser::COPY:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::COUNT:
      case GQLParser::CREATE:
      case GQLParser::CURRENT_DATE:
      case GQLParser::CURRENT_GRAPH:
      case GQLParser::CURRENT_PROPERTY_GRAPH:
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::CURRENT_TIME:
      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::CURRENT_USER:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DEC:
      case GQLParser::DECIMAL:
      case GQLParser::DEGREES:
      case GQLParser::DELETE:
      case GQLParser::DESC:
      case GQLParser::DESCENDING:
      case GQLParser::DESTINATION:
      case GQLParser::DETACH:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::DISTINCT:
      case GQLParser::DOUBLE:
      case GQLParser::DROP:
      case GQLParser::DURATION:
      case GQLParser::DURATION_BETWEEN:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENT_ID:
      case GQLParser::ELEMENTS:
      case GQLParser::ELSE:
      case GQLParser::END:
      case GQLParser::EXCEPT:
      case GQLParser::EXISTS:
      case GQLParser::EXP:
      case GQLParser::K_FALSE:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FIRST:
      case GQLParser::FLOAT:
      case GQLParser::FLOAT128:
      case GQLParser::FLOAT16:
      case GQLParser::FLOAT256:
      case GQLParser::FLOAT32:
      case GQLParser::FLOAT64:
      case GQLParser::FLOOR:
      case GQLParser::FOR:
      case GQLParser::FROM:
      case GQLParser::GRAPH:
      case GQLParser::GROUP:
      case GQLParser::GROUPS:
      case GQLParser::HAVING:
      case GQLParser::HOME_GRAPH:
      case GQLParser::HOME_PROPERTY_GRAPH:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::I_DONT_KNOW_1:
      case GQLParser::I_DONT_KNOW_2:
      case GQLParser::I_DONT_KNOW_3:
      case GQLParser::I_DONT_KNOW_4:
      case GQLParser::I_DONT_KNOW_5:
      case GQLParser::IF:
      case GQLParser::IN:
      case GQLParser::INSERT:
      case GQLParser::INT:
      case GQLParser::INT8:
      case GQLParser::INT16:
      case GQLParser::INT32:
      case GQLParser::INT64:
      case GQLParser::INT128:
      case GQLParser::INT256:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::INTERSECT:
      case GQLParser::IS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::LEADING:
      case GQLParser::LEFT:
      case GQLParser::LET:
      case GQLParser::LIKE:
      case GQLParser::LIMIT:
      case GQLParser::LIST:
      case GQLParser::LN:
      case GQLParser::LOCAL:
      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIME:
      case GQLParser::LOCAL_TIMESTAMP:
      case GQLParser::LOG:
      case GQLParser::LOG10:
      case GQLParser::LOWER:
      case GQLParser::LTRIM:
      case GQLParser::MATCH:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::MOD:
      case GQLParser::NEXT:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODETACH:
      case GQLParser::NORMALIZE:
      case GQLParser::NORMALIZED:
      case GQLParser::NOT:
      case GQLParser::NULL_:
      case GQLParser::NULLIF:
      case GQLParser::NULLS:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::OF:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::ONLY:
      case GQLParser::OPEN:
      case GQLParser::OPTIONAL:
      case GQLParser::OR:
      case GQLParser::ORDER:
      case GQLParser::ORDINALITY:
      case GQLParser::OTHERWISE:
      case GQLParser::PARAMETER:
      case GQLParser::PARAMETERS:
      case GQLParser::PATH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::PATHS:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::POWER:
      case GQLParser::PRECISION:
      case GQLParser::PROJECT:
      case GQLParser::PROPERTY:
      case GQLParser::PROPERTY_EXISTS:
      case GQLParser::RADIANS:
      case GQLParser::READ:
      case GQLParser::REAL:
      case GQLParser::RECORD:
      case GQLParser::REMOVE:
      case GQLParser::REPEATABLE:
      case GQLParser::REPLACE:
      case GQLParser::RESET:
      case GQLParser::RETURN:
      case GQLParser::ROLLBACK:
      case GQLParser::RTRIM:
      case GQLParser::RIGHT:
      case GQLParser::SAME:
      case GQLParser::SCHEMA:
      case GQLParser::SELECT:
      case GQLParser::SESSION:
      case GQLParser::SET:
      case GQLParser::SHORTEST:
      case GQLParser::SIGNED:
      case GQLParser::SIMPLE:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::SOURCE:
      case GQLParser::SQRT:
      case GQLParser::START:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::STRING:
      case GQLParser::SUM:
      case GQLParser::TABLE:
      case GQLParser::TAN:
      case GQLParser::TANH:
      case GQLParser::TEMP:
      case GQLParser::THEN:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::TIMEZONE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRAILING:
      case GQLParser::TRANSACTION:
      case GQLParser::TRIM:
      case GQLParser::K_TRUE:
      case GQLParser::TYPE:
      case GQLParser::TYPED:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT128:
      case GQLParser::UINT16:
      case GQLParser::UINT256:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT8:
      case GQLParser::UNDIRECTED:
      case GQLParser::UNION:
      case GQLParser::UNKNOWN:
      case GQLParser::UNSIGNED:
      case GQLParser::UPPER:
      case GQLParser::USE:
      case GQLParser::USMALLINT:
      case GQLParser::VALUE:
      case GQLParser::VARBINARY:
      case GQLParser::VARCHAR:
      case GQLParser::VARIABLE:
      case GQLParser::WALK:
      case GQLParser::WHEN:
      case GQLParser::WHERE:
      case GQLParser::WITH:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::XOR:
      case GQLParser::YIELD:
      case GQLParser::ZONE:
      case GQLParser::ZONED:
      case GQLParser::ZONED_DATETIME:
      case GQLParser::ZONED_TIME:
      case GQLParser::INTERVAL_DAY:
      case GQLParser::INTERVAL_WEEK:
      case GQLParser::INTERVAL_MONTH:
      case GQLParser::INTERVAL_YEAR:
      case GQLParser::EDGE_SYNONYM:
      case GQLParser::EDGES_SYNONYM:
      case GQLParser::NODE_SYNONYM:
      case GQLParser::KEY_WORD:
      case GQLParser::PRE_RESERVED_WORD: {
        enterOuterAlt(_localctx, 2);
        setState(1394);
        keyword();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredefinedTypeLiteralContext ------------------------------------------------------------------

GQLParser::PredefinedTypeLiteralContext::PredefinedTypeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BooleanLiteralContext* GQLParser::PredefinedTypeLiteralContext::booleanLiteral() {
  return getRuleContext<GQLParser::BooleanLiteralContext>(0);
}

GQLParser::CharacterStringLiteralContext* GQLParser::PredefinedTypeLiteralContext::characterStringLiteral() {
  return getRuleContext<GQLParser::CharacterStringLiteralContext>(0);
}

GQLParser::ByteStringLiteralContext* GQLParser::PredefinedTypeLiteralContext::byteStringLiteral() {
  return getRuleContext<GQLParser::ByteStringLiteralContext>(0);
}

GQLParser::TemporalLiteralContext* GQLParser::PredefinedTypeLiteralContext::temporalLiteral() {
  return getRuleContext<GQLParser::TemporalLiteralContext>(0);
}

GQLParser::DurationLiteralContext* GQLParser::PredefinedTypeLiteralContext::durationLiteral() {
  return getRuleContext<GQLParser::DurationLiteralContext>(0);
}

GQLParser::NullLiteralContext* GQLParser::PredefinedTypeLiteralContext::nullLiteral() {
  return getRuleContext<GQLParser::NullLiteralContext>(0);
}


size_t GQLParser::PredefinedTypeLiteralContext::getRuleIndex() const {
  return GQLParser::RulePredefinedTypeLiteral;
}


std::any GQLParser::PredefinedTypeLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPredefinedTypeLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PredefinedTypeLiteralContext* GQLParser::predefinedTypeLiteral() {
  PredefinedTypeLiteralContext *_localctx = _tracker.createInstance<PredefinedTypeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 162, GQLParser::RulePredefinedTypeLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1403);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::K_FALSE:
      case GQLParser::K_TRUE:
      case GQLParser::UNKNOWN: {
        enterOuterAlt(_localctx, 1);
        setState(1397);
        booleanLiteral();
        break;
      }

      case GQLParser::SINGLE_QUOTED_STRING_LITERAL:
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1398);
        characterStringLiteral();
        break;
      }

      case GQLParser::BYTE_STRING_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(1399);
        byteStringLiteral();
        break;
      }

      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP: {
        enterOuterAlt(_localctx, 4);
        setState(1400);
        temporalLiteral();
        break;
      }

      case GQLParser::DURATION:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER: {
        enterOuterAlt(_localctx, 5);
        setState(1401);
        durationLiteral();
        break;
      }

      case GQLParser::NULL_: {
        enterOuterAlt(_localctx, 6);
        setState(1402);
        nullLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanLiteralContext ------------------------------------------------------------------

GQLParser::BooleanLiteralContext::BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::BooleanLiteralContext::K_TRUE() {
  return getToken(GQLParser::K_TRUE, 0);
}

tree::TerminalNode* GQLParser::BooleanLiteralContext::K_FALSE() {
  return getToken(GQLParser::K_FALSE, 0);
}

tree::TerminalNode* GQLParser::BooleanLiteralContext::UNKNOWN() {
  return getToken(GQLParser::UNKNOWN, 0);
}


size_t GQLParser::BooleanLiteralContext::getRuleIndex() const {
  return GQLParser::RuleBooleanLiteral;
}


std::any GQLParser::BooleanLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBooleanLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BooleanLiteralContext* GQLParser::booleanLiteral() {
  BooleanLiteralContext *_localctx = _tracker.createInstance<BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 164, GQLParser::RuleBooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1405);
    _la = _input->LA(1);
    if (!(_la == GQLParser::K_FALSE || _la == GQLParser::K_TRUE

    || _la == GQLParser::UNKNOWN)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharacterStringLiteralContext ------------------------------------------------------------------

GQLParser::CharacterStringLiteralContext::CharacterStringLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SingleQuotedCharacterSequenceContext* GQLParser::CharacterStringLiteralContext::singleQuotedCharacterSequence() {
  return getRuleContext<GQLParser::SingleQuotedCharacterSequenceContext>(0);
}

GQLParser::DoubleQuotedCharacterSequenceContext* GQLParser::CharacterStringLiteralContext::doubleQuotedCharacterSequence() {
  return getRuleContext<GQLParser::DoubleQuotedCharacterSequenceContext>(0);
}


size_t GQLParser::CharacterStringLiteralContext::getRuleIndex() const {
  return GQLParser::RuleCharacterStringLiteral;
}


std::any GQLParser::CharacterStringLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCharacterStringLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CharacterStringLiteralContext* GQLParser::characterStringLiteral() {
  CharacterStringLiteralContext *_localctx = _tracker.createInstance<CharacterStringLiteralContext>(_ctx, getState());
  enterRule(_localctx, 166, GQLParser::RuleCharacterStringLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1409);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::SINGLE_QUOTED_STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1407);
        singleQuotedCharacterSequence();
        break;
      }

      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1408);
        doubleQuotedCharacterSequence();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ByteStringLiteralContext ------------------------------------------------------------------

GQLParser::ByteStringLiteralContext::ByteStringLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ByteStringLiteralContext::BYTE_STRING_LITERAL() {
  return getToken(GQLParser::BYTE_STRING_LITERAL, 0);
}


size_t GQLParser::ByteStringLiteralContext::getRuleIndex() const {
  return GQLParser::RuleByteStringLiteral;
}


std::any GQLParser::ByteStringLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitByteStringLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ByteStringLiteralContext* GQLParser::byteStringLiteral() {
  ByteStringLiteralContext *_localctx = _tracker.createInstance<ByteStringLiteralContext>(_ctx, getState());
  enterRule(_localctx, 168, GQLParser::RuleByteStringLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1411);
    match(GQLParser::BYTE_STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureBodyContext ------------------------------------------------------------------

GQLParser::ProcedureBodyContext::ProcedureBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::StatementBlockContext* GQLParser::ProcedureBodyContext::statementBlock() {
  return getRuleContext<GQLParser::StatementBlockContext>(0);
}

GQLParser::AtSchemaClauseContext* GQLParser::ProcedureBodyContext::atSchemaClause() {
  return getRuleContext<GQLParser::AtSchemaClauseContext>(0);
}

GQLParser::BindingVariableDefinitionBlockContext* GQLParser::ProcedureBodyContext::bindingVariableDefinitionBlock() {
  return getRuleContext<GQLParser::BindingVariableDefinitionBlockContext>(0);
}


size_t GQLParser::ProcedureBodyContext::getRuleIndex() const {
  return GQLParser::RuleProcedureBody;
}


std::any GQLParser::ProcedureBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitProcedureBody(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ProcedureBodyContext* GQLParser::procedureBody() {
  ProcedureBodyContext *_localctx = _tracker.createInstance<ProcedureBodyContext>(_ctx, getState());
  enterRule(_localctx, 170, GQLParser::RuleProcedureBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1414);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::AT) {
      setState(1413);
      atSchemaClause();
    }
    setState(1417);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::BINDING || _la == GQLParser::GRAPH || _la == GQLParser::PROPERTY

    || _la == GQLParser::TABLE || _la == GQLParser::VALUE) {
      setState(1416);
      bindingVariableDefinitionBlock();
    }
    setState(1419);
    statementBlock();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingVariableDefinitionBlockContext ------------------------------------------------------------------

GQLParser::BindingVariableDefinitionBlockContext::BindingVariableDefinitionBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::BindingVariableDefinitionContext *> GQLParser::BindingVariableDefinitionBlockContext::bindingVariableDefinition() {
  return getRuleContexts<GQLParser::BindingVariableDefinitionContext>();
}

GQLParser::BindingVariableDefinitionContext* GQLParser::BindingVariableDefinitionBlockContext::bindingVariableDefinition(size_t i) {
  return getRuleContext<GQLParser::BindingVariableDefinitionContext>(i);
}


size_t GQLParser::BindingVariableDefinitionBlockContext::getRuleIndex() const {
  return GQLParser::RuleBindingVariableDefinitionBlock;
}


std::any GQLParser::BindingVariableDefinitionBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBindingVariableDefinitionBlock(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BindingVariableDefinitionBlockContext* GQLParser::bindingVariableDefinitionBlock() {
  BindingVariableDefinitionBlockContext *_localctx = _tracker.createInstance<BindingVariableDefinitionBlockContext>(_ctx, getState());
  enterRule(_localctx, 172, GQLParser::RuleBindingVariableDefinitionBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1422); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1421);
      bindingVariableDefinition();
      setState(1424); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GQLParser::BINDING || _la == GQLParser::GRAPH || _la == GQLParser::PROPERTY

    || _la == GQLParser::TABLE || _la == GQLParser::VALUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingVariableDefinitionContext ------------------------------------------------------------------

GQLParser::BindingVariableDefinitionContext::BindingVariableDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphVariableDefinitionContext* GQLParser::BindingVariableDefinitionContext::graphVariableDefinition() {
  return getRuleContext<GQLParser::GraphVariableDefinitionContext>(0);
}

GQLParser::BindingTableVariableDefinitionContext* GQLParser::BindingVariableDefinitionContext::bindingTableVariableDefinition() {
  return getRuleContext<GQLParser::BindingTableVariableDefinitionContext>(0);
}

GQLParser::ValueVariableDefinitionContext* GQLParser::BindingVariableDefinitionContext::valueVariableDefinition() {
  return getRuleContext<GQLParser::ValueVariableDefinitionContext>(0);
}


size_t GQLParser::BindingVariableDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleBindingVariableDefinition;
}


std::any GQLParser::BindingVariableDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBindingVariableDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BindingVariableDefinitionContext* GQLParser::bindingVariableDefinition() {
  BindingVariableDefinitionContext *_localctx = _tracker.createInstance<BindingVariableDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 174, GQLParser::RuleBindingVariableDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1429);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::GRAPH:
      case GQLParser::PROPERTY: {
        enterOuterAlt(_localctx, 1);
        setState(1426);
        graphVariableDefinition();
        break;
      }

      case GQLParser::BINDING:
      case GQLParser::TABLE: {
        enterOuterAlt(_localctx, 2);
        setState(1427);
        bindingTableVariableDefinition();
        break;
      }

      case GQLParser::VALUE: {
        enterOuterAlt(_localctx, 3);
        setState(1428);
        valueVariableDefinition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementBlockContext ------------------------------------------------------------------

GQLParser::StatementBlockContext::StatementBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::StatementContext* GQLParser::StatementBlockContext::statement() {
  return getRuleContext<GQLParser::StatementContext>(0);
}

std::vector<GQLParser::NextStatementContext *> GQLParser::StatementBlockContext::nextStatement() {
  return getRuleContexts<GQLParser::NextStatementContext>();
}

GQLParser::NextStatementContext* GQLParser::StatementBlockContext::nextStatement(size_t i) {
  return getRuleContext<GQLParser::NextStatementContext>(i);
}


size_t GQLParser::StatementBlockContext::getRuleIndex() const {
  return GQLParser::RuleStatementBlock;
}


std::any GQLParser::StatementBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitStatementBlock(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::StatementBlockContext* GQLParser::statementBlock() {
  StatementBlockContext *_localctx = _tracker.createInstance<StatementBlockContext>(_ctx, getState());
  enterRule(_localctx, 176, GQLParser::RuleStatementBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1431);
    statement();
    setState(1435);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::NEXT) {
      setState(1432);
      nextStatement();
      setState(1437);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

GQLParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::LinearCatalogModifyingStatementContext* GQLParser::StatementContext::linearCatalogModifyingStatement() {
  return getRuleContext<GQLParser::LinearCatalogModifyingStatementContext>(0);
}

GQLParser::LinearDataModifyingStatementContext* GQLParser::StatementContext::linearDataModifyingStatement() {
  return getRuleContext<GQLParser::LinearDataModifyingStatementContext>(0);
}

GQLParser::CompositeQueryStatementContext* GQLParser::StatementContext::compositeQueryStatement() {
  return getRuleContext<GQLParser::CompositeQueryStatementContext>(0);
}


size_t GQLParser::StatementContext::getRuleIndex() const {
  return GQLParser::RuleStatement;
}


std::any GQLParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::StatementContext* GQLParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 178, GQLParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1441);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1438);
      linearCatalogModifyingStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1439);
      linearDataModifyingStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1440);
      compositeQueryStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NextStatementContext ------------------------------------------------------------------

GQLParser::NextStatementContext::NextStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NextStatementContext::NEXT() {
  return getToken(GQLParser::NEXT, 0);
}

GQLParser::StatementContext* GQLParser::NextStatementContext::statement() {
  return getRuleContext<GQLParser::StatementContext>(0);
}

GQLParser::YieldClauseContext* GQLParser::NextStatementContext::yieldClause() {
  return getRuleContext<GQLParser::YieldClauseContext>(0);
}


size_t GQLParser::NextStatementContext::getRuleIndex() const {
  return GQLParser::RuleNextStatement;
}


std::any GQLParser::NextStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNextStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NextStatementContext* GQLParser::nextStatement() {
  NextStatementContext *_localctx = _tracker.createInstance<NextStatementContext>(_ctx, getState());
  enterRule(_localctx, 180, GQLParser::RuleNextStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1443);
    match(GQLParser::NEXT);
    setState(1445);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::YIELD) {
      setState(1444);
      yieldClause();
    }
    setState(1447);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphVariableDefinitionContext ------------------------------------------------------------------

GQLParser::GraphVariableDefinitionContext::GraphVariableDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GraphVariableDefinitionContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

GQLParser::GraphVariableContext* GQLParser::GraphVariableDefinitionContext::graphVariable() {
  return getRuleContext<GQLParser::GraphVariableContext>(0);
}

GQLParser::OptTypedGraphInitializerContext* GQLParser::GraphVariableDefinitionContext::optTypedGraphInitializer() {
  return getRuleContext<GQLParser::OptTypedGraphInitializerContext>(0);
}

tree::TerminalNode* GQLParser::GraphVariableDefinitionContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}


size_t GQLParser::GraphVariableDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleGraphVariableDefinition;
}


std::any GQLParser::GraphVariableDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphVariableDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphVariableDefinitionContext* GQLParser::graphVariableDefinition() {
  GraphVariableDefinitionContext *_localctx = _tracker.createInstance<GraphVariableDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 182, GQLParser::RuleGraphVariableDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1450);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::PROPERTY) {
      setState(1449);
      match(GQLParser::PROPERTY);
    }
    setState(1452);
    match(GQLParser::GRAPH);
    setState(1453);
    graphVariable();
    setState(1454);
    optTypedGraphInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptTypedGraphInitializerContext ------------------------------------------------------------------

GQLParser::OptTypedGraphInitializerContext::OptTypedGraphInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphInitializerContext* GQLParser::OptTypedGraphInitializerContext::graphInitializer() {
  return getRuleContext<GQLParser::GraphInitializerContext>(0);
}

GQLParser::GraphReferenceValueTypeContext* GQLParser::OptTypedGraphInitializerContext::graphReferenceValueType() {
  return getRuleContext<GQLParser::GraphReferenceValueTypeContext>(0);
}

GQLParser::TypedContext* GQLParser::OptTypedGraphInitializerContext::typed() {
  return getRuleContext<GQLParser::TypedContext>(0);
}


size_t GQLParser::OptTypedGraphInitializerContext::getRuleIndex() const {
  return GQLParser::RuleOptTypedGraphInitializer;
}


std::any GQLParser::OptTypedGraphInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOptTypedGraphInitializer(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::OptTypedGraphInitializerContext* GQLParser::optTypedGraphInitializer() {
  OptTypedGraphInitializerContext *_localctx = _tracker.createInstance<OptTypedGraphInitializerContext>(_ctx, getState());
  enterRule(_localctx, 184, GQLParser::RuleOptTypedGraphInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1460);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ANY || _la == GQLParser::GRAPH || _la == GQLParser::PROPERTY

    || _la == GQLParser::TYPED || _la == GQLParser::DOUBLE_COLON) {
      setState(1457);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::TYPED

      || _la == GQLParser::DOUBLE_COLON) {
        setState(1456);
        typed();
      }
      setState(1459);
      graphReferenceValueType();
    }
    setState(1462);
    graphInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphInitializerContext ------------------------------------------------------------------

GQLParser::GraphInitializerContext::GraphInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GraphInitializerContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}

GQLParser::GraphExpressionContext* GQLParser::GraphInitializerContext::graphExpression() {
  return getRuleContext<GQLParser::GraphExpressionContext>(0);
}


size_t GQLParser::GraphInitializerContext::getRuleIndex() const {
  return GQLParser::RuleGraphInitializer;
}


std::any GQLParser::GraphInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphInitializer(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphInitializerContext* GQLParser::graphInitializer() {
  GraphInitializerContext *_localctx = _tracker.createInstance<GraphInitializerContext>(_ctx, getState());
  enterRule(_localctx, 186, GQLParser::RuleGraphInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1464);
    match(GQLParser::EQUALS_OPERATOR);
    setState(1465);
    graphExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingTableVariableDefinitionContext ------------------------------------------------------------------

GQLParser::BindingTableVariableDefinitionContext::BindingTableVariableDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::BindingTableVariableDefinitionContext::TABLE() {
  return getToken(GQLParser::TABLE, 0);
}

GQLParser::BindingTableVariableContext* GQLParser::BindingTableVariableDefinitionContext::bindingTableVariable() {
  return getRuleContext<GQLParser::BindingTableVariableContext>(0);
}

GQLParser::OptTypedBindingTableInitializerContext* GQLParser::BindingTableVariableDefinitionContext::optTypedBindingTableInitializer() {
  return getRuleContext<GQLParser::OptTypedBindingTableInitializerContext>(0);
}

tree::TerminalNode* GQLParser::BindingTableVariableDefinitionContext::BINDING() {
  return getToken(GQLParser::BINDING, 0);
}


size_t GQLParser::BindingTableVariableDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleBindingTableVariableDefinition;
}


std::any GQLParser::BindingTableVariableDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBindingTableVariableDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BindingTableVariableDefinitionContext* GQLParser::bindingTableVariableDefinition() {
  BindingTableVariableDefinitionContext *_localctx = _tracker.createInstance<BindingTableVariableDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 188, GQLParser::RuleBindingTableVariableDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1468);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::BINDING) {
      setState(1467);
      match(GQLParser::BINDING);
    }
    setState(1470);
    match(GQLParser::TABLE);
    setState(1471);
    bindingTableVariable();
    setState(1472);
    optTypedBindingTableInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptTypedBindingTableInitializerContext ------------------------------------------------------------------

GQLParser::OptTypedBindingTableInitializerContext::OptTypedBindingTableInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingTableInitializerContext* GQLParser::OptTypedBindingTableInitializerContext::bindingTableInitializer() {
  return getRuleContext<GQLParser::BindingTableInitializerContext>(0);
}

GQLParser::BindingTableReferenceValueTypeContext* GQLParser::OptTypedBindingTableInitializerContext::bindingTableReferenceValueType() {
  return getRuleContext<GQLParser::BindingTableReferenceValueTypeContext>(0);
}

GQLParser::TypedContext* GQLParser::OptTypedBindingTableInitializerContext::typed() {
  return getRuleContext<GQLParser::TypedContext>(0);
}


size_t GQLParser::OptTypedBindingTableInitializerContext::getRuleIndex() const {
  return GQLParser::RuleOptTypedBindingTableInitializer;
}


std::any GQLParser::OptTypedBindingTableInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOptTypedBindingTableInitializer(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::OptTypedBindingTableInitializerContext* GQLParser::optTypedBindingTableInitializer() {
  OptTypedBindingTableInitializerContext *_localctx = _tracker.createInstance<OptTypedBindingTableInitializerContext>(_ctx, getState());
  enterRule(_localctx, 190, GQLParser::RuleOptTypedBindingTableInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1478);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::BINDING || ((((_la - 241) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 241)) & 1152921504606879745) != 0)) {
      setState(1475);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::TYPED

      || _la == GQLParser::DOUBLE_COLON) {
        setState(1474);
        typed();
      }
      setState(1477);
      bindingTableReferenceValueType();
    }
    setState(1480);
    bindingTableInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingTableInitializerContext ------------------------------------------------------------------

GQLParser::BindingTableInitializerContext::BindingTableInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::BindingTableInitializerContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}

GQLParser::BindingTableExpressionContext* GQLParser::BindingTableInitializerContext::bindingTableExpression() {
  return getRuleContext<GQLParser::BindingTableExpressionContext>(0);
}


size_t GQLParser::BindingTableInitializerContext::getRuleIndex() const {
  return GQLParser::RuleBindingTableInitializer;
}


std::any GQLParser::BindingTableInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBindingTableInitializer(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BindingTableInitializerContext* GQLParser::bindingTableInitializer() {
  BindingTableInitializerContext *_localctx = _tracker.createInstance<BindingTableInitializerContext>(_ctx, getState());
  enterRule(_localctx, 192, GQLParser::RuleBindingTableInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1482);
    match(GQLParser::EQUALS_OPERATOR);
    setState(1483);
    bindingTableExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueVariableDefinitionContext ------------------------------------------------------------------

GQLParser::ValueVariableDefinitionContext::ValueVariableDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ValueVariableDefinitionContext::VALUE() {
  return getToken(GQLParser::VALUE, 0);
}

GQLParser::ValueVariableContext* GQLParser::ValueVariableDefinitionContext::valueVariable() {
  return getRuleContext<GQLParser::ValueVariableContext>(0);
}

GQLParser::OptTypedValueInitializerContext* GQLParser::ValueVariableDefinitionContext::optTypedValueInitializer() {
  return getRuleContext<GQLParser::OptTypedValueInitializerContext>(0);
}


size_t GQLParser::ValueVariableDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleValueVariableDefinition;
}


std::any GQLParser::ValueVariableDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitValueVariableDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ValueVariableDefinitionContext* GQLParser::valueVariableDefinition() {
  ValueVariableDefinitionContext *_localctx = _tracker.createInstance<ValueVariableDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 194, GQLParser::RuleValueVariableDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1485);
    match(GQLParser::VALUE);
    setState(1486);
    valueVariable();
    setState(1487);
    optTypedValueInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptTypedValueInitializerContext ------------------------------------------------------------------

GQLParser::OptTypedValueInitializerContext::OptTypedValueInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::OptTypedValueInitializerContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}

GQLParser::ExpressionContext* GQLParser::OptTypedValueInitializerContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}

GQLParser::ValueTypeContext* GQLParser::OptTypedValueInitializerContext::valueType() {
  return getRuleContext<GQLParser::ValueTypeContext>(0);
}

GQLParser::TypedContext* GQLParser::OptTypedValueInitializerContext::typed() {
  return getRuleContext<GQLParser::TypedContext>(0);
}


size_t GQLParser::OptTypedValueInitializerContext::getRuleIndex() const {
  return GQLParser::RuleOptTypedValueInitializer;
}


std::any GQLParser::OptTypedValueInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOptTypedValueInitializer(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::OptTypedValueInitializerContext* GQLParser::optTypedValueInitializer() {
  OptTypedValueInitializerContext *_localctx = _tracker.createInstance<OptTypedValueInitializerContext>(_ctx, getState());
  enterRule(_localctx, 196, GQLParser::RuleOptTypedValueInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1493);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18990816374559744) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & -9006340798109683) != 0) || ((((_la - 145) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 145)) & -9187343239835647993) != 0) || ((((_la - 212) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 212)) & 7584044232519778307) != 0) || ((((_la - 285) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 285)) & 66177) != 0)) {
      setState(1490);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::TYPED

      || _la == GQLParser::DOUBLE_COLON) {
        setState(1489);
        typed();
      }
      setState(1492);
      valueType(0);
    }
    setState(1495);
    match(GQLParser::EQUALS_OPERATOR);
    setState(1496);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphExpressionContext ------------------------------------------------------------------

GQLParser::GraphExpressionContext::GraphExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NestedGraphQuerySpecificationContext* GQLParser::GraphExpressionContext::nestedGraphQuerySpecification() {
  return getRuleContext<GQLParser::NestedGraphQuerySpecificationContext>(0);
}

GQLParser::ObjectExpressionPrimaryContext* GQLParser::GraphExpressionContext::objectExpressionPrimary() {
  return getRuleContext<GQLParser::ObjectExpressionPrimaryContext>(0);
}

GQLParser::GraphReferenceContext* GQLParser::GraphExpressionContext::graphReference() {
  return getRuleContext<GQLParser::GraphReferenceContext>(0);
}

GQLParser::ObjectNameOrBindingVariableContext* GQLParser::GraphExpressionContext::objectNameOrBindingVariable() {
  return getRuleContext<GQLParser::ObjectNameOrBindingVariableContext>(0);
}

GQLParser::CurrentGraphContext* GQLParser::GraphExpressionContext::currentGraph() {
  return getRuleContext<GQLParser::CurrentGraphContext>(0);
}


size_t GQLParser::GraphExpressionContext::getRuleIndex() const {
  return GQLParser::RuleGraphExpression;
}


std::any GQLParser::GraphExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphExpression(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphExpressionContext* GQLParser::graphExpression() {
  GraphExpressionContext *_localctx = _tracker.createInstance<GraphExpressionContext>(_ctx, getState());
  enterRule(_localctx, 198, GQLParser::RuleGraphExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1503);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1498);
      nestedGraphQuerySpecification();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1499);
      objectExpressionPrimary();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1500);
      graphReference();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1501);
      objectNameOrBindingVariable();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1502);
      currentGraph();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CurrentGraphContext ------------------------------------------------------------------

GQLParser::CurrentGraphContext::CurrentGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CurrentGraphContext::CURRENT_PROPERTY_GRAPH() {
  return getToken(GQLParser::CURRENT_PROPERTY_GRAPH, 0);
}

tree::TerminalNode* GQLParser::CurrentGraphContext::CURRENT_GRAPH() {
  return getToken(GQLParser::CURRENT_GRAPH, 0);
}


size_t GQLParser::CurrentGraphContext::getRuleIndex() const {
  return GQLParser::RuleCurrentGraph;
}


std::any GQLParser::CurrentGraphContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCurrentGraph(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CurrentGraphContext* GQLParser::currentGraph() {
  CurrentGraphContext *_localctx = _tracker.createInstance<CurrentGraphContext>(_ctx, getState());
  enterRule(_localctx, 200, GQLParser::RuleCurrentGraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1505);
    _la = _input->LA(1);
    if (!(_la == GQLParser::CURRENT_GRAPH

    || _la == GQLParser::CURRENT_PROPERTY_GRAPH)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedGraphQuerySpecificationContext ------------------------------------------------------------------

GQLParser::NestedGraphQuerySpecificationContext::NestedGraphQuerySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NestedQuerySpecificationContext* GQLParser::NestedGraphQuerySpecificationContext::nestedQuerySpecification() {
  return getRuleContext<GQLParser::NestedQuerySpecificationContext>(0);
}


size_t GQLParser::NestedGraphQuerySpecificationContext::getRuleIndex() const {
  return GQLParser::RuleNestedGraphQuerySpecification;
}


std::any GQLParser::NestedGraphQuerySpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNestedGraphQuerySpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NestedGraphQuerySpecificationContext* GQLParser::nestedGraphQuerySpecification() {
  NestedGraphQuerySpecificationContext *_localctx = _tracker.createInstance<NestedGraphQuerySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 202, GQLParser::RuleNestedGraphQuerySpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1507);
    nestedQuerySpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingTableExpressionContext ------------------------------------------------------------------

GQLParser::BindingTableExpressionContext::BindingTableExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NestedBindingTableQuerySpecificationContext* GQLParser::BindingTableExpressionContext::nestedBindingTableQuerySpecification() {
  return getRuleContext<GQLParser::NestedBindingTableQuerySpecificationContext>(0);
}

GQLParser::ObjectExpressionPrimaryContext* GQLParser::BindingTableExpressionContext::objectExpressionPrimary() {
  return getRuleContext<GQLParser::ObjectExpressionPrimaryContext>(0);
}

GQLParser::BindingTableReferenceContext* GQLParser::BindingTableExpressionContext::bindingTableReference() {
  return getRuleContext<GQLParser::BindingTableReferenceContext>(0);
}

GQLParser::ObjectNameOrBindingVariableContext* GQLParser::BindingTableExpressionContext::objectNameOrBindingVariable() {
  return getRuleContext<GQLParser::ObjectNameOrBindingVariableContext>(0);
}


size_t GQLParser::BindingTableExpressionContext::getRuleIndex() const {
  return GQLParser::RuleBindingTableExpression;
}


std::any GQLParser::BindingTableExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBindingTableExpression(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BindingTableExpressionContext* GQLParser::bindingTableExpression() {
  BindingTableExpressionContext *_localctx = _tracker.createInstance<BindingTableExpressionContext>(_ctx, getState());
  enterRule(_localctx, 204, GQLParser::RuleBindingTableExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1513);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1509);
      nestedBindingTableQuerySpecification();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1510);
      objectExpressionPrimary();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1511);
      bindingTableReference();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1512);
      objectNameOrBindingVariable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedBindingTableQuerySpecificationContext ------------------------------------------------------------------

GQLParser::NestedBindingTableQuerySpecificationContext::NestedBindingTableQuerySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NestedQuerySpecificationContext* GQLParser::NestedBindingTableQuerySpecificationContext::nestedQuerySpecification() {
  return getRuleContext<GQLParser::NestedQuerySpecificationContext>(0);
}


size_t GQLParser::NestedBindingTableQuerySpecificationContext::getRuleIndex() const {
  return GQLParser::RuleNestedBindingTableQuerySpecification;
}


std::any GQLParser::NestedBindingTableQuerySpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNestedBindingTableQuerySpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NestedBindingTableQuerySpecificationContext* GQLParser::nestedBindingTableQuerySpecification() {
  NestedBindingTableQuerySpecificationContext *_localctx = _tracker.createInstance<NestedBindingTableQuerySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 206, GQLParser::RuleNestedBindingTableQuerySpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1515);
    nestedQuerySpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectExpressionPrimaryContext ------------------------------------------------------------------

GQLParser::ObjectExpressionPrimaryContext::ObjectExpressionPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ObjectExpressionPrimaryContext::VARIABLE() {
  return getToken(GQLParser::VARIABLE, 0);
}

GQLParser::ExpressionAtomContext* GQLParser::ObjectExpressionPrimaryContext::expressionAtom() {
  return getRuleContext<GQLParser::ExpressionAtomContext>(0);
}

tree::TerminalNode* GQLParser::ObjectExpressionPrimaryContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ExpressionContext* GQLParser::ObjectExpressionPrimaryContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}

tree::TerminalNode* GQLParser::ObjectExpressionPrimaryContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::ObjectExpressionPrimaryContext::getRuleIndex() const {
  return GQLParser::RuleObjectExpressionPrimary;
}


std::any GQLParser::ObjectExpressionPrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitObjectExpressionPrimary(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ObjectExpressionPrimaryContext* GQLParser::objectExpressionPrimary() {
  ObjectExpressionPrimaryContext *_localctx = _tracker.createInstance<ObjectExpressionPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 208, GQLParser::RuleObjectExpressionPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1524);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1517);
      match(GQLParser::VARIABLE);
      setState(1518);
      expressionAtom(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1519);
      match(GQLParser::LEFT_PAREN);
      setState(1520);
      expression(0);
      setState(1521);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1523);
      expressionAtom(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinearCatalogModifyingStatementContext ------------------------------------------------------------------

GQLParser::LinearCatalogModifyingStatementContext::LinearCatalogModifyingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SimpleCatalogModifyingStatementContext *> GQLParser::LinearCatalogModifyingStatementContext::simpleCatalogModifyingStatement() {
  return getRuleContexts<GQLParser::SimpleCatalogModifyingStatementContext>();
}

GQLParser::SimpleCatalogModifyingStatementContext* GQLParser::LinearCatalogModifyingStatementContext::simpleCatalogModifyingStatement(size_t i) {
  return getRuleContext<GQLParser::SimpleCatalogModifyingStatementContext>(i);
}


size_t GQLParser::LinearCatalogModifyingStatementContext::getRuleIndex() const {
  return GQLParser::RuleLinearCatalogModifyingStatement;
}


std::any GQLParser::LinearCatalogModifyingStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLinearCatalogModifyingStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LinearCatalogModifyingStatementContext* GQLParser::linearCatalogModifyingStatement() {
  LinearCatalogModifyingStatementContext *_localctx = _tracker.createInstance<LinearCatalogModifyingStatementContext>(_ctx, getState());
  enterRule(_localctx, 210, GQLParser::RuleLinearCatalogModifyingStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1527); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1526);
      simpleCatalogModifyingStatement();
      setState(1529); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 55) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 55)) & 1099511889921) != 0) || _la == GQLParser::OPTIONAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleCatalogModifyingStatementContext ------------------------------------------------------------------

GQLParser::SimpleCatalogModifyingStatementContext::SimpleCatalogModifyingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PrimitiveCatalogModifyingStatementContext* GQLParser::SimpleCatalogModifyingStatementContext::primitiveCatalogModifyingStatement() {
  return getRuleContext<GQLParser::PrimitiveCatalogModifyingStatementContext>(0);
}

GQLParser::CallCatalogModifyingProcedureStatementContext* GQLParser::SimpleCatalogModifyingStatementContext::callCatalogModifyingProcedureStatement() {
  return getRuleContext<GQLParser::CallCatalogModifyingProcedureStatementContext>(0);
}


size_t GQLParser::SimpleCatalogModifyingStatementContext::getRuleIndex() const {
  return GQLParser::RuleSimpleCatalogModifyingStatement;
}


std::any GQLParser::SimpleCatalogModifyingStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleCatalogModifyingStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimpleCatalogModifyingStatementContext* GQLParser::simpleCatalogModifyingStatement() {
  SimpleCatalogModifyingStatementContext *_localctx = _tracker.createInstance<SimpleCatalogModifyingStatementContext>(_ctx, getState());
  enterRule(_localctx, 212, GQLParser::RuleSimpleCatalogModifyingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1533);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CREATE:
      case GQLParser::DROP: {
        enterOuterAlt(_localctx, 1);
        setState(1531);
        primitiveCatalogModifyingStatement();
        break;
      }

      case GQLParser::CALL:
      case GQLParser::OPTIONAL: {
        enterOuterAlt(_localctx, 2);
        setState(1532);
        callCatalogModifyingProcedureStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimitiveCatalogModifyingStatementContext ------------------------------------------------------------------

GQLParser::PrimitiveCatalogModifyingStatementContext::PrimitiveCatalogModifyingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CreateSchemaStatementContext* GQLParser::PrimitiveCatalogModifyingStatementContext::createSchemaStatement() {
  return getRuleContext<GQLParser::CreateSchemaStatementContext>(0);
}

GQLParser::CreateGraphStatementContext* GQLParser::PrimitiveCatalogModifyingStatementContext::createGraphStatement() {
  return getRuleContext<GQLParser::CreateGraphStatementContext>(0);
}

GQLParser::CreateGraphTypeStatementContext* GQLParser::PrimitiveCatalogModifyingStatementContext::createGraphTypeStatement() {
  return getRuleContext<GQLParser::CreateGraphTypeStatementContext>(0);
}

GQLParser::DropSchemaStatementContext* GQLParser::PrimitiveCatalogModifyingStatementContext::dropSchemaStatement() {
  return getRuleContext<GQLParser::DropSchemaStatementContext>(0);
}

GQLParser::DropGraphStatementContext* GQLParser::PrimitiveCatalogModifyingStatementContext::dropGraphStatement() {
  return getRuleContext<GQLParser::DropGraphStatementContext>(0);
}

GQLParser::DropGraphTypeStatementContext* GQLParser::PrimitiveCatalogModifyingStatementContext::dropGraphTypeStatement() {
  return getRuleContext<GQLParser::DropGraphTypeStatementContext>(0);
}


size_t GQLParser::PrimitiveCatalogModifyingStatementContext::getRuleIndex() const {
  return GQLParser::RulePrimitiveCatalogModifyingStatement;
}


std::any GQLParser::PrimitiveCatalogModifyingStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPrimitiveCatalogModifyingStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PrimitiveCatalogModifyingStatementContext* GQLParser::primitiveCatalogModifyingStatement() {
  PrimitiveCatalogModifyingStatementContext *_localctx = _tracker.createInstance<PrimitiveCatalogModifyingStatementContext>(_ctx, getState());
  enterRule(_localctx, 214, GQLParser::RulePrimitiveCatalogModifyingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1541);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1535);
      createSchemaStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1536);
      createGraphStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1537);
      createGraphTypeStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1538);
      dropSchemaStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1539);
      dropGraphStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1540);
      dropGraphTypeStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateSchemaStatementContext ------------------------------------------------------------------

GQLParser::CreateSchemaStatementContext::CreateSchemaStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CreateSchemaStatementContext::CREATE() {
  return getToken(GQLParser::CREATE, 0);
}

tree::TerminalNode* GQLParser::CreateSchemaStatementContext::SCHEMA() {
  return getToken(GQLParser::SCHEMA, 0);
}

GQLParser::CatalogSchemaParentAndNameContext* GQLParser::CreateSchemaStatementContext::catalogSchemaParentAndName() {
  return getRuleContext<GQLParser::CatalogSchemaParentAndNameContext>(0);
}

tree::TerminalNode* GQLParser::CreateSchemaStatementContext::IF() {
  return getToken(GQLParser::IF, 0);
}

tree::TerminalNode* GQLParser::CreateSchemaStatementContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

tree::TerminalNode* GQLParser::CreateSchemaStatementContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}


size_t GQLParser::CreateSchemaStatementContext::getRuleIndex() const {
  return GQLParser::RuleCreateSchemaStatement;
}


std::any GQLParser::CreateSchemaStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateSchemaStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CreateSchemaStatementContext* GQLParser::createSchemaStatement() {
  CreateSchemaStatementContext *_localctx = _tracker.createInstance<CreateSchemaStatementContext>(_ctx, getState());
  enterRule(_localctx, 216, GQLParser::RuleCreateSchemaStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1543);
    match(GQLParser::CREATE);
    setState(1544);
    match(GQLParser::SCHEMA);
    setState(1548);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::IF) {
      setState(1545);
      match(GQLParser::IF);
      setState(1546);
      match(GQLParser::NOT);
      setState(1547);
      match(GQLParser::EXISTS);
    }
    setState(1550);
    catalogSchemaParentAndName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropSchemaStatementContext ------------------------------------------------------------------

GQLParser::DropSchemaStatementContext::DropSchemaStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DropSchemaStatementContext::DROP() {
  return getToken(GQLParser::DROP, 0);
}

tree::TerminalNode* GQLParser::DropSchemaStatementContext::SCHEMA() {
  return getToken(GQLParser::SCHEMA, 0);
}

GQLParser::CatalogSchemaParentAndNameContext* GQLParser::DropSchemaStatementContext::catalogSchemaParentAndName() {
  return getRuleContext<GQLParser::CatalogSchemaParentAndNameContext>(0);
}

tree::TerminalNode* GQLParser::DropSchemaStatementContext::IF() {
  return getToken(GQLParser::IF, 0);
}

tree::TerminalNode* GQLParser::DropSchemaStatementContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}


size_t GQLParser::DropSchemaStatementContext::getRuleIndex() const {
  return GQLParser::RuleDropSchemaStatement;
}


std::any GQLParser::DropSchemaStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDropSchemaStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DropSchemaStatementContext* GQLParser::dropSchemaStatement() {
  DropSchemaStatementContext *_localctx = _tracker.createInstance<DropSchemaStatementContext>(_ctx, getState());
  enterRule(_localctx, 218, GQLParser::RuleDropSchemaStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1552);
    match(GQLParser::DROP);
    setState(1553);
    match(GQLParser::SCHEMA);
    setState(1556);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::IF) {
      setState(1554);
      match(GQLParser::IF);
      setState(1555);
      match(GQLParser::EXISTS);
    }
    setState(1558);
    catalogSchemaParentAndName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateGraphStatementContext ------------------------------------------------------------------

GQLParser::CreateGraphStatementContext::CreateGraphStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CreateGraphStatementContext::CREATE() {
  return getToken(GQLParser::CREATE, 0);
}

GQLParser::CatalogGraphParentAndNameContext* GQLParser::CreateGraphStatementContext::catalogGraphParentAndName() {
  return getRuleContext<GQLParser::CatalogGraphParentAndNameContext>(0);
}

tree::TerminalNode* GQLParser::CreateGraphStatementContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

tree::TerminalNode* GQLParser::CreateGraphStatementContext::OR() {
  return getToken(GQLParser::OR, 0);
}

tree::TerminalNode* GQLParser::CreateGraphStatementContext::REPLACE() {
  return getToken(GQLParser::REPLACE, 0);
}

GQLParser::OpenGraphTypeContext* GQLParser::CreateGraphStatementContext::openGraphType() {
  return getRuleContext<GQLParser::OpenGraphTypeContext>(0);
}

GQLParser::OfGraphTypeContext* GQLParser::CreateGraphStatementContext::ofGraphType() {
  return getRuleContext<GQLParser::OfGraphTypeContext>(0);
}

GQLParser::GraphSourceContext* GQLParser::CreateGraphStatementContext::graphSource() {
  return getRuleContext<GQLParser::GraphSourceContext>(0);
}

tree::TerminalNode* GQLParser::CreateGraphStatementContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

tree::TerminalNode* GQLParser::CreateGraphStatementContext::IF() {
  return getToken(GQLParser::IF, 0);
}

tree::TerminalNode* GQLParser::CreateGraphStatementContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

tree::TerminalNode* GQLParser::CreateGraphStatementContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}


size_t GQLParser::CreateGraphStatementContext::getRuleIndex() const {
  return GQLParser::RuleCreateGraphStatement;
}


std::any GQLParser::CreateGraphStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateGraphStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CreateGraphStatementContext* GQLParser::createGraphStatement() {
  CreateGraphStatementContext *_localctx = _tracker.createInstance<CreateGraphStatementContext>(_ctx, getState());
  enterRule(_localctx, 220, GQLParser::RuleCreateGraphStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1560);
    match(GQLParser::CREATE);
    setState(1576);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::GRAPH:
      case GQLParser::PROPERTY: {
        setState(1562);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::PROPERTY) {
          setState(1561);
          match(GQLParser::PROPERTY);
        }
        setState(1564);
        match(GQLParser::GRAPH);
        setState(1568);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
        case 1: {
          setState(1565);
          match(GQLParser::IF);
          setState(1566);
          match(GQLParser::NOT);
          setState(1567);
          match(GQLParser::EXISTS);
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::OR: {
        setState(1570);
        match(GQLParser::OR);
        setState(1571);
        match(GQLParser::REPLACE);
        setState(1573);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::PROPERTY) {
          setState(1572);
          match(GQLParser::PROPERTY);
        }
        setState(1575);
        match(GQLParser::GRAPH);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1578);
    catalogGraphParentAndName();
    setState(1581);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      setState(1579);
      openGraphType();
      break;
    }

    case 2: {
      setState(1580);
      ofGraphType();
      break;
    }

    default:
      break;
    }
    setState(1584);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::AS) {
      setState(1583);
      graphSource();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenGraphTypeContext ------------------------------------------------------------------

GQLParser::OpenGraphTypeContext::OpenGraphTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::OpenGraphTypeContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

GQLParser::TypedContext* GQLParser::OpenGraphTypeContext::typed() {
  return getRuleContext<GQLParser::TypedContext>(0);
}

tree::TerminalNode* GQLParser::OpenGraphTypeContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

tree::TerminalNode* GQLParser::OpenGraphTypeContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}


size_t GQLParser::OpenGraphTypeContext::getRuleIndex() const {
  return GQLParser::RuleOpenGraphType;
}


std::any GQLParser::OpenGraphTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOpenGraphType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::OpenGraphTypeContext* GQLParser::openGraphType() {
  OpenGraphTypeContext *_localctx = _tracker.createInstance<OpenGraphTypeContext>(_ctx, getState());
  enterRule(_localctx, 222, GQLParser::RuleOpenGraphType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1587);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::TYPED

    || _la == GQLParser::DOUBLE_COLON) {
      setState(1586);
      typed();
    }
    setState(1589);
    match(GQLParser::ANY);
    setState(1594);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::GRAPH || _la == GQLParser::PROPERTY) {
      setState(1591);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::PROPERTY) {
        setState(1590);
        match(GQLParser::PROPERTY);
      }
      setState(1593);
      match(GQLParser::GRAPH);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OfGraphTypeContext ------------------------------------------------------------------

GQLParser::OfGraphTypeContext::OfGraphTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphTypeLikeGraphContext* GQLParser::OfGraphTypeContext::graphTypeLikeGraph() {
  return getRuleContext<GQLParser::GraphTypeLikeGraphContext>(0);
}

GQLParser::GraphTypeReferenceContext* GQLParser::OfGraphTypeContext::graphTypeReference() {
  return getRuleContext<GQLParser::GraphTypeReferenceContext>(0);
}

GQLParser::TypedContext* GQLParser::OfGraphTypeContext::typed() {
  return getRuleContext<GQLParser::TypedContext>(0);
}

GQLParser::NestedGraphTypeSpecificationContext* GQLParser::OfGraphTypeContext::nestedGraphTypeSpecification() {
  return getRuleContext<GQLParser::NestedGraphTypeSpecificationContext>(0);
}

tree::TerminalNode* GQLParser::OfGraphTypeContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

tree::TerminalNode* GQLParser::OfGraphTypeContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}


size_t GQLParser::OfGraphTypeContext::getRuleIndex() const {
  return GQLParser::RuleOfGraphType;
}


std::any GQLParser::OfGraphTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOfGraphType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::OfGraphTypeContext* GQLParser::ofGraphType() {
  OfGraphTypeContext *_localctx = _tracker.createInstance<OfGraphTypeContext>(_ctx, getState());
  enterRule(_localctx, 224, GQLParser::RuleOfGraphType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1611);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1596);
      graphTypeLikeGraph();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1598);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
      case 1: {
        setState(1597);
        typed();
        break;
      }

      default:
        break;
      }
      setState(1600);
      graphTypeReference();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1602);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::TYPED

      || _la == GQLParser::DOUBLE_COLON) {
        setState(1601);
        typed();
      }
      setState(1608);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::GRAPH || _la == GQLParser::PROPERTY) {
        setState(1605);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::PROPERTY) {
          setState(1604);
          match(GQLParser::PROPERTY);
        }
        setState(1607);
        match(GQLParser::GRAPH);
      }
      setState(1610);
      nestedGraphTypeSpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphTypeLikeGraphContext ------------------------------------------------------------------

GQLParser::GraphTypeLikeGraphContext::GraphTypeLikeGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GraphTypeLikeGraphContext::LIKE() {
  return getToken(GQLParser::LIKE, 0);
}

GQLParser::GraphExpressionContext* GQLParser::GraphTypeLikeGraphContext::graphExpression() {
  return getRuleContext<GQLParser::GraphExpressionContext>(0);
}


size_t GQLParser::GraphTypeLikeGraphContext::getRuleIndex() const {
  return GQLParser::RuleGraphTypeLikeGraph;
}


std::any GQLParser::GraphTypeLikeGraphContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphTypeLikeGraph(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphTypeLikeGraphContext* GQLParser::graphTypeLikeGraph() {
  GraphTypeLikeGraphContext *_localctx = _tracker.createInstance<GraphTypeLikeGraphContext>(_ctx, getState());
  enterRule(_localctx, 226, GQLParser::RuleGraphTypeLikeGraph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1613);
    match(GQLParser::LIKE);
    setState(1614);
    graphExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphSourceContext ------------------------------------------------------------------

GQLParser::GraphSourceContext::GraphSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GraphSourceContext::AS() {
  return getToken(GQLParser::AS, 0);
}

tree::TerminalNode* GQLParser::GraphSourceContext::COPY() {
  return getToken(GQLParser::COPY, 0);
}

tree::TerminalNode* GQLParser::GraphSourceContext::OF() {
  return getToken(GQLParser::OF, 0);
}

GQLParser::GraphExpressionContext* GQLParser::GraphSourceContext::graphExpression() {
  return getRuleContext<GQLParser::GraphExpressionContext>(0);
}


size_t GQLParser::GraphSourceContext::getRuleIndex() const {
  return GQLParser::RuleGraphSource;
}


std::any GQLParser::GraphSourceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphSource(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphSourceContext* GQLParser::graphSource() {
  GraphSourceContext *_localctx = _tracker.createInstance<GraphSourceContext>(_ctx, getState());
  enterRule(_localctx, 228, GQLParser::RuleGraphSource);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1616);
    match(GQLParser::AS);
    setState(1617);
    match(GQLParser::COPY);
    setState(1618);
    match(GQLParser::OF);
    setState(1619);
    graphExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropGraphStatementContext ------------------------------------------------------------------

GQLParser::DropGraphStatementContext::DropGraphStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DropGraphStatementContext::DROP() {
  return getToken(GQLParser::DROP, 0);
}

tree::TerminalNode* GQLParser::DropGraphStatementContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

GQLParser::CatalogGraphParentAndNameContext* GQLParser::DropGraphStatementContext::catalogGraphParentAndName() {
  return getRuleContext<GQLParser::CatalogGraphParentAndNameContext>(0);
}

tree::TerminalNode* GQLParser::DropGraphStatementContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

tree::TerminalNode* GQLParser::DropGraphStatementContext::IF() {
  return getToken(GQLParser::IF, 0);
}

tree::TerminalNode* GQLParser::DropGraphStatementContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}


size_t GQLParser::DropGraphStatementContext::getRuleIndex() const {
  return GQLParser::RuleDropGraphStatement;
}


std::any GQLParser::DropGraphStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDropGraphStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DropGraphStatementContext* GQLParser::dropGraphStatement() {
  DropGraphStatementContext *_localctx = _tracker.createInstance<DropGraphStatementContext>(_ctx, getState());
  enterRule(_localctx, 230, GQLParser::RuleDropGraphStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1621);
    match(GQLParser::DROP);
    setState(1623);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::PROPERTY) {
      setState(1622);
      match(GQLParser::PROPERTY);
    }
    setState(1625);
    match(GQLParser::GRAPH);
    setState(1628);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
    case 1: {
      setState(1626);
      match(GQLParser::IF);
      setState(1627);
      match(GQLParser::EXISTS);
      break;
    }

    default:
      break;
    }
    setState(1630);
    catalogGraphParentAndName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateGraphTypeStatementContext ------------------------------------------------------------------

GQLParser::CreateGraphTypeStatementContext::CreateGraphTypeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::CREATE() {
  return getToken(GQLParser::CREATE, 0);
}

GQLParser::CatalogGraphTypeParentAndNameContext* GQLParser::CreateGraphTypeStatementContext::catalogGraphTypeParentAndName() {
  return getRuleContext<GQLParser::CatalogGraphTypeParentAndNameContext>(0);
}

GQLParser::GraphTypeSourceContext* GQLParser::CreateGraphTypeStatementContext::graphTypeSource() {
  return getRuleContext<GQLParser::GraphTypeSourceContext>(0);
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::TYPE() {
  return getToken(GQLParser::TYPE, 0);
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::OR() {
  return getToken(GQLParser::OR, 0);
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::REPLACE() {
  return getToken(GQLParser::REPLACE, 0);
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::IF() {
  return getToken(GQLParser::IF, 0);
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}


size_t GQLParser::CreateGraphTypeStatementContext::getRuleIndex() const {
  return GQLParser::RuleCreateGraphTypeStatement;
}


std::any GQLParser::CreateGraphTypeStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCreateGraphTypeStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CreateGraphTypeStatementContext* GQLParser::createGraphTypeStatement() {
  CreateGraphTypeStatementContext *_localctx = _tracker.createInstance<CreateGraphTypeStatementContext>(_ctx, getState());
  enterRule(_localctx, 232, GQLParser::RuleCreateGraphTypeStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1632);
    match(GQLParser::CREATE);
    setState(1650);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::GRAPH:
      case GQLParser::PROPERTY: {
        setState(1634);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::PROPERTY) {
          setState(1633);
          match(GQLParser::PROPERTY);
        }
        setState(1636);
        match(GQLParser::GRAPH);
        setState(1637);
        match(GQLParser::TYPE);
        setState(1641);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
        case 1: {
          setState(1638);
          match(GQLParser::IF);
          setState(1639);
          match(GQLParser::NOT);
          setState(1640);
          match(GQLParser::EXISTS);
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::OR: {
        setState(1643);
        match(GQLParser::OR);
        setState(1644);
        match(GQLParser::REPLACE);
        setState(1646);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::PROPERTY) {
          setState(1645);
          match(GQLParser::PROPERTY);
        }
        setState(1648);
        match(GQLParser::GRAPH);
        setState(1649);
        match(GQLParser::TYPE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1652);
    catalogGraphTypeParentAndName();
    setState(1653);
    graphTypeSource();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphTypeSourceContext ------------------------------------------------------------------

GQLParser::GraphTypeSourceContext::GraphTypeSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CopyOfGraphTypeContext* GQLParser::GraphTypeSourceContext::copyOfGraphType() {
  return getRuleContext<GQLParser::CopyOfGraphTypeContext>(0);
}

tree::TerminalNode* GQLParser::GraphTypeSourceContext::AS() {
  return getToken(GQLParser::AS, 0);
}

GQLParser::GraphTypeLikeGraphContext* GQLParser::GraphTypeSourceContext::graphTypeLikeGraph() {
  return getRuleContext<GQLParser::GraphTypeLikeGraphContext>(0);
}

GQLParser::NestedGraphTypeSpecificationContext* GQLParser::GraphTypeSourceContext::nestedGraphTypeSpecification() {
  return getRuleContext<GQLParser::NestedGraphTypeSpecificationContext>(0);
}


size_t GQLParser::GraphTypeSourceContext::getRuleIndex() const {
  return GQLParser::RuleGraphTypeSource;
}


std::any GQLParser::GraphTypeSourceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphTypeSource(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphTypeSourceContext* GQLParser::graphTypeSource() {
  GraphTypeSourceContext *_localctx = _tracker.createInstance<GraphTypeSourceContext>(_ctx, getState());
  enterRule(_localctx, 234, GQLParser::RuleGraphTypeSource);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1664);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1656);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::AS) {
        setState(1655);
        match(GQLParser::AS);
      }
      setState(1658);
      copyOfGraphType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1659);
      graphTypeLikeGraph();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1661);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::AS) {
        setState(1660);
        match(GQLParser::AS);
      }
      setState(1663);
      nestedGraphTypeSpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CopyOfGraphTypeContext ------------------------------------------------------------------

GQLParser::CopyOfGraphTypeContext::CopyOfGraphTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CopyOfGraphTypeContext::COPY() {
  return getToken(GQLParser::COPY, 0);
}

tree::TerminalNode* GQLParser::CopyOfGraphTypeContext::OF() {
  return getToken(GQLParser::OF, 0);
}

GQLParser::GraphTypeReferenceContext* GQLParser::CopyOfGraphTypeContext::graphTypeReference() {
  return getRuleContext<GQLParser::GraphTypeReferenceContext>(0);
}

GQLParser::ExternalObjectReferenceContext* GQLParser::CopyOfGraphTypeContext::externalObjectReference() {
  return getRuleContext<GQLParser::ExternalObjectReferenceContext>(0);
}


size_t GQLParser::CopyOfGraphTypeContext::getRuleIndex() const {
  return GQLParser::RuleCopyOfGraphType;
}


std::any GQLParser::CopyOfGraphTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCopyOfGraphType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CopyOfGraphTypeContext* GQLParser::copyOfGraphType() {
  CopyOfGraphTypeContext *_localctx = _tracker.createInstance<CopyOfGraphTypeContext>(_ctx, getState());
  enterRule(_localctx, 236, GQLParser::RuleCopyOfGraphType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1666);
    match(GQLParser::COPY);
    setState(1667);
    match(GQLParser::OF);
    setState(1670);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
    case 1: {
      setState(1668);
      graphTypeReference();
      break;
    }

    case 2: {
      setState(1669);
      externalObjectReference();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropGraphTypeStatementContext ------------------------------------------------------------------

GQLParser::DropGraphTypeStatementContext::DropGraphTypeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DropGraphTypeStatementContext::DROP() {
  return getToken(GQLParser::DROP, 0);
}

tree::TerminalNode* GQLParser::DropGraphTypeStatementContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

tree::TerminalNode* GQLParser::DropGraphTypeStatementContext::TYPE() {
  return getToken(GQLParser::TYPE, 0);
}

GQLParser::CatalogGraphTypeParentAndNameContext* GQLParser::DropGraphTypeStatementContext::catalogGraphTypeParentAndName() {
  return getRuleContext<GQLParser::CatalogGraphTypeParentAndNameContext>(0);
}

tree::TerminalNode* GQLParser::DropGraphTypeStatementContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

tree::TerminalNode* GQLParser::DropGraphTypeStatementContext::IF() {
  return getToken(GQLParser::IF, 0);
}

tree::TerminalNode* GQLParser::DropGraphTypeStatementContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}


size_t GQLParser::DropGraphTypeStatementContext::getRuleIndex() const {
  return GQLParser::RuleDropGraphTypeStatement;
}


std::any GQLParser::DropGraphTypeStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDropGraphTypeStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DropGraphTypeStatementContext* GQLParser::dropGraphTypeStatement() {
  DropGraphTypeStatementContext *_localctx = _tracker.createInstance<DropGraphTypeStatementContext>(_ctx, getState());
  enterRule(_localctx, 238, GQLParser::RuleDropGraphTypeStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1672);
    match(GQLParser::DROP);
    setState(1674);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::PROPERTY) {
      setState(1673);
      match(GQLParser::PROPERTY);
    }
    setState(1676);
    match(GQLParser::GRAPH);
    setState(1677);
    match(GQLParser::TYPE);
    setState(1680);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
    case 1: {
      setState(1678);
      match(GQLParser::IF);
      setState(1679);
      match(GQLParser::EXISTS);
      break;
    }

    default:
      break;
    }
    setState(1682);
    catalogGraphTypeParentAndName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallCatalogModifyingProcedureStatementContext ------------------------------------------------------------------

GQLParser::CallCatalogModifyingProcedureStatementContext::CallCatalogModifyingProcedureStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CallProcedureStatementContext* GQLParser::CallCatalogModifyingProcedureStatementContext::callProcedureStatement() {
  return getRuleContext<GQLParser::CallProcedureStatementContext>(0);
}


size_t GQLParser::CallCatalogModifyingProcedureStatementContext::getRuleIndex() const {
  return GQLParser::RuleCallCatalogModifyingProcedureStatement;
}


std::any GQLParser::CallCatalogModifyingProcedureStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCallCatalogModifyingProcedureStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CallCatalogModifyingProcedureStatementContext* GQLParser::callCatalogModifyingProcedureStatement() {
  CallCatalogModifyingProcedureStatementContext *_localctx = _tracker.createInstance<CallCatalogModifyingProcedureStatementContext>(_ctx, getState());
  enterRule(_localctx, 240, GQLParser::RuleCallCatalogModifyingProcedureStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1684);
    callProcedureStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinearDataModifyingStatementContext ------------------------------------------------------------------

GQLParser::LinearDataModifyingStatementContext::LinearDataModifyingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FocusedLinearDataModifyingStatementContext* GQLParser::LinearDataModifyingStatementContext::focusedLinearDataModifyingStatement() {
  return getRuleContext<GQLParser::FocusedLinearDataModifyingStatementContext>(0);
}

GQLParser::AmbientLinearDataModifyingStatementContext* GQLParser::LinearDataModifyingStatementContext::ambientLinearDataModifyingStatement() {
  return getRuleContext<GQLParser::AmbientLinearDataModifyingStatementContext>(0);
}


size_t GQLParser::LinearDataModifyingStatementContext::getRuleIndex() const {
  return GQLParser::RuleLinearDataModifyingStatement;
}


std::any GQLParser::LinearDataModifyingStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLinearDataModifyingStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LinearDataModifyingStatementContext* GQLParser::linearDataModifyingStatement() {
  LinearDataModifyingStatementContext *_localctx = _tracker.createInstance<LinearDataModifyingStatementContext>(_ctx, getState());
  enterRule(_localctx, 242, GQLParser::RuleLinearDataModifyingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1688);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::USE: {
        enterOuterAlt(_localctx, 1);
        setState(1686);
        focusedLinearDataModifyingStatement();
        break;
      }

      case GQLParser::LEFT_BRACE:
      case GQLParser::CALL:
      case GQLParser::DELETE:
      case GQLParser::DETACH:
      case GQLParser::FILTER:
      case GQLParser::FOR:
      case GQLParser::INSERT:
      case GQLParser::LET:
      case GQLParser::LIMIT:
      case GQLParser::MATCH:
      case GQLParser::NODETACH:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::OPTIONAL:
      case GQLParser::ORDER:
      case GQLParser::REMOVE:
      case GQLParser::SET: {
        enterOuterAlt(_localctx, 2);
        setState(1687);
        ambientLinearDataModifyingStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FocusedLinearDataModifyingStatementContext ------------------------------------------------------------------

GQLParser::FocusedLinearDataModifyingStatementContext::FocusedLinearDataModifyingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FocusedLinearDataModifyingStatementBodyContext* GQLParser::FocusedLinearDataModifyingStatementContext::focusedLinearDataModifyingStatementBody() {
  return getRuleContext<GQLParser::FocusedLinearDataModifyingStatementBodyContext>(0);
}

GQLParser::FocusedNestedDataModifyingProcedureSpecificationContext* GQLParser::FocusedLinearDataModifyingStatementContext::focusedNestedDataModifyingProcedureSpecification() {
  return getRuleContext<GQLParser::FocusedNestedDataModifyingProcedureSpecificationContext>(0);
}


size_t GQLParser::FocusedLinearDataModifyingStatementContext::getRuleIndex() const {
  return GQLParser::RuleFocusedLinearDataModifyingStatement;
}


std::any GQLParser::FocusedLinearDataModifyingStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFocusedLinearDataModifyingStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FocusedLinearDataModifyingStatementContext* GQLParser::focusedLinearDataModifyingStatement() {
  FocusedLinearDataModifyingStatementContext *_localctx = _tracker.createInstance<FocusedLinearDataModifyingStatementContext>(_ctx, getState());
  enterRule(_localctx, 244, GQLParser::RuleFocusedLinearDataModifyingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1692);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1690);
      focusedLinearDataModifyingStatementBody();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1691);
      focusedNestedDataModifyingProcedureSpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FocusedLinearDataModifyingStatementBodyContext ------------------------------------------------------------------

GQLParser::FocusedLinearDataModifyingStatementBodyContext::FocusedLinearDataModifyingStatementBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UseGraphClauseContext* GQLParser::FocusedLinearDataModifyingStatementBodyContext::useGraphClause() {
  return getRuleContext<GQLParser::UseGraphClauseContext>(0);
}

GQLParser::SimpleLinearDataAccessingStatementContext* GQLParser::FocusedLinearDataModifyingStatementBodyContext::simpleLinearDataAccessingStatement() {
  return getRuleContext<GQLParser::SimpleLinearDataAccessingStatementContext>(0);
}

GQLParser::PrimitiveResultStatementContext* GQLParser::FocusedLinearDataModifyingStatementBodyContext::primitiveResultStatement() {
  return getRuleContext<GQLParser::PrimitiveResultStatementContext>(0);
}


size_t GQLParser::FocusedLinearDataModifyingStatementBodyContext::getRuleIndex() const {
  return GQLParser::RuleFocusedLinearDataModifyingStatementBody;
}


std::any GQLParser::FocusedLinearDataModifyingStatementBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFocusedLinearDataModifyingStatementBody(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FocusedLinearDataModifyingStatementBodyContext* GQLParser::focusedLinearDataModifyingStatementBody() {
  FocusedLinearDataModifyingStatementBodyContext *_localctx = _tracker.createInstance<FocusedLinearDataModifyingStatementBodyContext>(_ctx, getState());
  enterRule(_localctx, 246, GQLParser::RuleFocusedLinearDataModifyingStatementBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1694);
    useGraphClause();
    setState(1695);
    simpleLinearDataAccessingStatement();
    setState(1697);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::FINISH || _la == GQLParser::RETURN) {
      setState(1696);
      primitiveResultStatement();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FocusedNestedDataModifyingProcedureSpecificationContext ------------------------------------------------------------------

GQLParser::FocusedNestedDataModifyingProcedureSpecificationContext::FocusedNestedDataModifyingProcedureSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UseGraphClauseContext* GQLParser::FocusedNestedDataModifyingProcedureSpecificationContext::useGraphClause() {
  return getRuleContext<GQLParser::UseGraphClauseContext>(0);
}

GQLParser::NestedDataModifyingProcedureSpecificationContext* GQLParser::FocusedNestedDataModifyingProcedureSpecificationContext::nestedDataModifyingProcedureSpecification() {
  return getRuleContext<GQLParser::NestedDataModifyingProcedureSpecificationContext>(0);
}


size_t GQLParser::FocusedNestedDataModifyingProcedureSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleFocusedNestedDataModifyingProcedureSpecification;
}


std::any GQLParser::FocusedNestedDataModifyingProcedureSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFocusedNestedDataModifyingProcedureSpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FocusedNestedDataModifyingProcedureSpecificationContext* GQLParser::focusedNestedDataModifyingProcedureSpecification() {
  FocusedNestedDataModifyingProcedureSpecificationContext *_localctx = _tracker.createInstance<FocusedNestedDataModifyingProcedureSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 248, GQLParser::RuleFocusedNestedDataModifyingProcedureSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1699);
    useGraphClause();
    setState(1700);
    nestedDataModifyingProcedureSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AmbientLinearDataModifyingStatementContext ------------------------------------------------------------------

GQLParser::AmbientLinearDataModifyingStatementContext::AmbientLinearDataModifyingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::AmbientLinearDataModifyingStatementBodyContext* GQLParser::AmbientLinearDataModifyingStatementContext::ambientLinearDataModifyingStatementBody() {
  return getRuleContext<GQLParser::AmbientLinearDataModifyingStatementBodyContext>(0);
}

GQLParser::NestedDataModifyingProcedureSpecificationContext* GQLParser::AmbientLinearDataModifyingStatementContext::nestedDataModifyingProcedureSpecification() {
  return getRuleContext<GQLParser::NestedDataModifyingProcedureSpecificationContext>(0);
}


size_t GQLParser::AmbientLinearDataModifyingStatementContext::getRuleIndex() const {
  return GQLParser::RuleAmbientLinearDataModifyingStatement;
}


std::any GQLParser::AmbientLinearDataModifyingStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAmbientLinearDataModifyingStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::AmbientLinearDataModifyingStatementContext* GQLParser::ambientLinearDataModifyingStatement() {
  AmbientLinearDataModifyingStatementContext *_localctx = _tracker.createInstance<AmbientLinearDataModifyingStatementContext>(_ctx, getState());
  enterRule(_localctx, 250, GQLParser::RuleAmbientLinearDataModifyingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1704);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CALL:
      case GQLParser::DELETE:
      case GQLParser::DETACH:
      case GQLParser::FILTER:
      case GQLParser::FOR:
      case GQLParser::INSERT:
      case GQLParser::LET:
      case GQLParser::LIMIT:
      case GQLParser::MATCH:
      case GQLParser::NODETACH:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::OPTIONAL:
      case GQLParser::ORDER:
      case GQLParser::REMOVE:
      case GQLParser::SET: {
        enterOuterAlt(_localctx, 1);
        setState(1702);
        ambientLinearDataModifyingStatementBody();
        break;
      }

      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1703);
        nestedDataModifyingProcedureSpecification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AmbientLinearDataModifyingStatementBodyContext ------------------------------------------------------------------

GQLParser::AmbientLinearDataModifyingStatementBodyContext::AmbientLinearDataModifyingStatementBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimpleLinearDataAccessingStatementContext* GQLParser::AmbientLinearDataModifyingStatementBodyContext::simpleLinearDataAccessingStatement() {
  return getRuleContext<GQLParser::SimpleLinearDataAccessingStatementContext>(0);
}

GQLParser::PrimitiveResultStatementContext* GQLParser::AmbientLinearDataModifyingStatementBodyContext::primitiveResultStatement() {
  return getRuleContext<GQLParser::PrimitiveResultStatementContext>(0);
}


size_t GQLParser::AmbientLinearDataModifyingStatementBodyContext::getRuleIndex() const {
  return GQLParser::RuleAmbientLinearDataModifyingStatementBody;
}


std::any GQLParser::AmbientLinearDataModifyingStatementBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAmbientLinearDataModifyingStatementBody(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::AmbientLinearDataModifyingStatementBodyContext* GQLParser::ambientLinearDataModifyingStatementBody() {
  AmbientLinearDataModifyingStatementBodyContext *_localctx = _tracker.createInstance<AmbientLinearDataModifyingStatementBodyContext>(_ctx, getState());
  enterRule(_localctx, 252, GQLParser::RuleAmbientLinearDataModifyingStatementBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1706);
    simpleLinearDataAccessingStatement();
    setState(1708);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::FINISH || _la == GQLParser::RETURN) {
      setState(1707);
      primitiveResultStatement();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleLinearDataAccessingStatementContext ------------------------------------------------------------------

GQLParser::SimpleLinearDataAccessingStatementContext::SimpleLinearDataAccessingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SimpleDataAccessingStatementContext *> GQLParser::SimpleLinearDataAccessingStatementContext::simpleDataAccessingStatement() {
  return getRuleContexts<GQLParser::SimpleDataAccessingStatementContext>();
}

GQLParser::SimpleDataAccessingStatementContext* GQLParser::SimpleLinearDataAccessingStatementContext::simpleDataAccessingStatement(size_t i) {
  return getRuleContext<GQLParser::SimpleDataAccessingStatementContext>(i);
}


size_t GQLParser::SimpleLinearDataAccessingStatementContext::getRuleIndex() const {
  return GQLParser::RuleSimpleLinearDataAccessingStatement;
}


std::any GQLParser::SimpleLinearDataAccessingStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleLinearDataAccessingStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimpleLinearDataAccessingStatementContext* GQLParser::simpleLinearDataAccessingStatement() {
  SimpleLinearDataAccessingStatementContext *_localctx = _tracker.createInstance<SimpleLinearDataAccessingStatementContext>(_ctx, getState());
  enterRule(_localctx, 254, GQLParser::RuleSimpleLinearDataAccessingStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1711); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1710);
      simpleDataAccessingStatement();
      setState(1713); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 55) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 55)) & 4616189654561980417) != 0) || ((((_la - 133) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 133)) & 5980921180159213569) != 0) || _la == GQLParser::REMOVE

    || _la == GQLParser::SET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleDataAccessingStatementContext ------------------------------------------------------------------

GQLParser::SimpleDataAccessingStatementContext::SimpleDataAccessingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimpleQueryStatementContext* GQLParser::SimpleDataAccessingStatementContext::simpleQueryStatement() {
  return getRuleContext<GQLParser::SimpleQueryStatementContext>(0);
}

GQLParser::SimpleDataModifyingStatementContext* GQLParser::SimpleDataAccessingStatementContext::simpleDataModifyingStatement() {
  return getRuleContext<GQLParser::SimpleDataModifyingStatementContext>(0);
}


size_t GQLParser::SimpleDataAccessingStatementContext::getRuleIndex() const {
  return GQLParser::RuleSimpleDataAccessingStatement;
}


std::any GQLParser::SimpleDataAccessingStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleDataAccessingStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimpleDataAccessingStatementContext* GQLParser::simpleDataAccessingStatement() {
  SimpleDataAccessingStatementContext *_localctx = _tracker.createInstance<SimpleDataAccessingStatementContext>(_ctx, getState());
  enterRule(_localctx, 256, GQLParser::RuleSimpleDataAccessingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1717);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1715);
      simpleQueryStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1716);
      simpleDataModifyingStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleDataModifyingStatementContext ------------------------------------------------------------------

GQLParser::SimpleDataModifyingStatementContext::SimpleDataModifyingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PrimitiveDataModifyingStatementContext* GQLParser::SimpleDataModifyingStatementContext::primitiveDataModifyingStatement() {
  return getRuleContext<GQLParser::PrimitiveDataModifyingStatementContext>(0);
}

GQLParser::CallDataModifyingProcedureStatementContext* GQLParser::SimpleDataModifyingStatementContext::callDataModifyingProcedureStatement() {
  return getRuleContext<GQLParser::CallDataModifyingProcedureStatementContext>(0);
}


size_t GQLParser::SimpleDataModifyingStatementContext::getRuleIndex() const {
  return GQLParser::RuleSimpleDataModifyingStatement;
}


std::any GQLParser::SimpleDataModifyingStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleDataModifyingStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimpleDataModifyingStatementContext* GQLParser::simpleDataModifyingStatement() {
  SimpleDataModifyingStatementContext *_localctx = _tracker.createInstance<SimpleDataModifyingStatementContext>(_ctx, getState());
  enterRule(_localctx, 258, GQLParser::RuleSimpleDataModifyingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1721);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DELETE:
      case GQLParser::DETACH:
      case GQLParser::INSERT:
      case GQLParser::NODETACH:
      case GQLParser::REMOVE:
      case GQLParser::SET: {
        enterOuterAlt(_localctx, 1);
        setState(1719);
        primitiveDataModifyingStatement();
        break;
      }

      case GQLParser::CALL:
      case GQLParser::OPTIONAL: {
        enterOuterAlt(_localctx, 2);
        setState(1720);
        callDataModifyingProcedureStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimitiveDataModifyingStatementContext ------------------------------------------------------------------

GQLParser::PrimitiveDataModifyingStatementContext::PrimitiveDataModifyingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::InsertStatementContext* GQLParser::PrimitiveDataModifyingStatementContext::insertStatement() {
  return getRuleContext<GQLParser::InsertStatementContext>(0);
}

GQLParser::SetStatementContext* GQLParser::PrimitiveDataModifyingStatementContext::setStatement() {
  return getRuleContext<GQLParser::SetStatementContext>(0);
}

GQLParser::RemoveStatementContext* GQLParser::PrimitiveDataModifyingStatementContext::removeStatement() {
  return getRuleContext<GQLParser::RemoveStatementContext>(0);
}

GQLParser::DeleteStatementContext* GQLParser::PrimitiveDataModifyingStatementContext::deleteStatement() {
  return getRuleContext<GQLParser::DeleteStatementContext>(0);
}


size_t GQLParser::PrimitiveDataModifyingStatementContext::getRuleIndex() const {
  return GQLParser::RulePrimitiveDataModifyingStatement;
}


std::any GQLParser::PrimitiveDataModifyingStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPrimitiveDataModifyingStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PrimitiveDataModifyingStatementContext* GQLParser::primitiveDataModifyingStatement() {
  PrimitiveDataModifyingStatementContext *_localctx = _tracker.createInstance<PrimitiveDataModifyingStatementContext>(_ctx, getState());
  enterRule(_localctx, 260, GQLParser::RulePrimitiveDataModifyingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1727);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::INSERT: {
        enterOuterAlt(_localctx, 1);
        setState(1723);
        insertStatement();
        break;
      }

      case GQLParser::SET: {
        enterOuterAlt(_localctx, 2);
        setState(1724);
        setStatement();
        break;
      }

      case GQLParser::REMOVE: {
        enterOuterAlt(_localctx, 3);
        setState(1725);
        removeStatement();
        break;
      }

      case GQLParser::DELETE:
      case GQLParser::DETACH:
      case GQLParser::NODETACH: {
        enterOuterAlt(_localctx, 4);
        setState(1726);
        deleteStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertStatementContext ------------------------------------------------------------------

GQLParser::InsertStatementContext::InsertStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::InsertStatementContext::INSERT() {
  return getToken(GQLParser::INSERT, 0);
}

GQLParser::InsertGraphPatternContext* GQLParser::InsertStatementContext::insertGraphPattern() {
  return getRuleContext<GQLParser::InsertGraphPatternContext>(0);
}


size_t GQLParser::InsertStatementContext::getRuleIndex() const {
  return GQLParser::RuleInsertStatement;
}


std::any GQLParser::InsertStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitInsertStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::InsertStatementContext* GQLParser::insertStatement() {
  InsertStatementContext *_localctx = _tracker.createInstance<InsertStatementContext>(_ctx, getState());
  enterRule(_localctx, 262, GQLParser::RuleInsertStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1729);
    match(GQLParser::INSERT);
    setState(1730);
    insertGraphPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetStatementContext ------------------------------------------------------------------

GQLParser::SetStatementContext::SetStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SetStatementContext::SET() {
  return getToken(GQLParser::SET, 0);
}

GQLParser::SetItemListContext* GQLParser::SetStatementContext::setItemList() {
  return getRuleContext<GQLParser::SetItemListContext>(0);
}


size_t GQLParser::SetStatementContext::getRuleIndex() const {
  return GQLParser::RuleSetStatement;
}


std::any GQLParser::SetStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSetStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SetStatementContext* GQLParser::setStatement() {
  SetStatementContext *_localctx = _tracker.createInstance<SetStatementContext>(_ctx, getState());
  enterRule(_localctx, 264, GQLParser::RuleSetStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1732);
    match(GQLParser::SET);
    setState(1733);
    setItemList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetItemListContext ------------------------------------------------------------------

GQLParser::SetItemListContext::SetItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SetItemContext *> GQLParser::SetItemListContext::setItem() {
  return getRuleContexts<GQLParser::SetItemContext>();
}

GQLParser::SetItemContext* GQLParser::SetItemListContext::setItem(size_t i) {
  return getRuleContext<GQLParser::SetItemContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SetItemListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::SetItemListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::SetItemListContext::getRuleIndex() const {
  return GQLParser::RuleSetItemList;
}


std::any GQLParser::SetItemListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSetItemList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SetItemListContext* GQLParser::setItemList() {
  SetItemListContext *_localctx = _tracker.createInstance<SetItemListContext>(_ctx, getState());
  enterRule(_localctx, 266, GQLParser::RuleSetItemList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1735);
    setItem();
    setState(1740);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(1736);
      match(GQLParser::COMMA);
      setState(1737);
      setItem();
      setState(1742);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetItemContext ------------------------------------------------------------------

GQLParser::SetItemContext::SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SetPropertyItemContext* GQLParser::SetItemContext::setPropertyItem() {
  return getRuleContext<GQLParser::SetPropertyItemContext>(0);
}

GQLParser::SetAllPropertiesItemContext* GQLParser::SetItemContext::setAllPropertiesItem() {
  return getRuleContext<GQLParser::SetAllPropertiesItemContext>(0);
}

GQLParser::SetLabelItemContext* GQLParser::SetItemContext::setLabelItem() {
  return getRuleContext<GQLParser::SetLabelItemContext>(0);
}


size_t GQLParser::SetItemContext::getRuleIndex() const {
  return GQLParser::RuleSetItem;
}


std::any GQLParser::SetItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSetItem(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SetItemContext* GQLParser::setItem() {
  SetItemContext *_localctx = _tracker.createInstance<SetItemContext>(_ctx, getState());
  enterRule(_localctx, 268, GQLParser::RuleSetItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1746);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1743);
      setPropertyItem();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1744);
      setAllPropertiesItem();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1745);
      setLabelItem();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetPropertyItemContext ------------------------------------------------------------------

GQLParser::SetPropertyItemContext::SetPropertyItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::SetPropertyItemContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}

tree::TerminalNode* GQLParser::SetPropertyItemContext::PERIOD() {
  return getToken(GQLParser::PERIOD, 0);
}

GQLParser::PropertyNameContext* GQLParser::SetPropertyItemContext::propertyName() {
  return getRuleContext<GQLParser::PropertyNameContext>(0);
}

tree::TerminalNode* GQLParser::SetPropertyItemContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}

GQLParser::ExpressionContext* GQLParser::SetPropertyItemContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}


size_t GQLParser::SetPropertyItemContext::getRuleIndex() const {
  return GQLParser::RuleSetPropertyItem;
}


std::any GQLParser::SetPropertyItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSetPropertyItem(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SetPropertyItemContext* GQLParser::setPropertyItem() {
  SetPropertyItemContext *_localctx = _tracker.createInstance<SetPropertyItemContext>(_ctx, getState());
  enterRule(_localctx, 270, GQLParser::RuleSetPropertyItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1748);
    bindingVariableReference();
    setState(1749);
    match(GQLParser::PERIOD);
    setState(1750);
    propertyName();
    setState(1751);
    match(GQLParser::EQUALS_OPERATOR);
    setState(1752);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetAllPropertiesItemContext ------------------------------------------------------------------

GQLParser::SetAllPropertiesItemContext::SetAllPropertiesItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::SetAllPropertiesItemContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}

tree::TerminalNode* GQLParser::SetAllPropertiesItemContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}

tree::TerminalNode* GQLParser::SetAllPropertiesItemContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

tree::TerminalNode* GQLParser::SetAllPropertiesItemContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}

GQLParser::PropertyKeyValuePairListContext* GQLParser::SetAllPropertiesItemContext::propertyKeyValuePairList() {
  return getRuleContext<GQLParser::PropertyKeyValuePairListContext>(0);
}


size_t GQLParser::SetAllPropertiesItemContext::getRuleIndex() const {
  return GQLParser::RuleSetAllPropertiesItem;
}


std::any GQLParser::SetAllPropertiesItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSetAllPropertiesItem(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SetAllPropertiesItemContext* GQLParser::setAllPropertiesItem() {
  SetAllPropertiesItemContext *_localctx = _tracker.createInstance<SetAllPropertiesItemContext>(_ctx, getState());
  enterRule(_localctx, 272, GQLParser::RuleSetAllPropertiesItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1754);
    bindingVariableReference();
    setState(1755);
    match(GQLParser::EQUALS_OPERATOR);
    setState(1756);
    match(GQLParser::LEFT_BRACE);
    setState(1758);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 28) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 28)) & -1) != 0) || ((((_la - 92) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 92)) & -1) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 156)) & -1) != 0) || ((((_la - 220) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 220)) & -1) != 0) || ((((_la - 284) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 284)) & 1206964700135305215) != 0)) {
      setState(1757);
      propertyKeyValuePairList();
    }
    setState(1760);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetLabelItemContext ------------------------------------------------------------------

GQLParser::SetLabelItemContext::SetLabelItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::SetLabelItemContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}

GQLParser::IsOrColonContext* GQLParser::SetLabelItemContext::isOrColon() {
  return getRuleContext<GQLParser::IsOrColonContext>(0);
}

GQLParser::LabelNameContext* GQLParser::SetLabelItemContext::labelName() {
  return getRuleContext<GQLParser::LabelNameContext>(0);
}


size_t GQLParser::SetLabelItemContext::getRuleIndex() const {
  return GQLParser::RuleSetLabelItem;
}


std::any GQLParser::SetLabelItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSetLabelItem(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SetLabelItemContext* GQLParser::setLabelItem() {
  SetLabelItemContext *_localctx = _tracker.createInstance<SetLabelItemContext>(_ctx, getState());
  enterRule(_localctx, 274, GQLParser::RuleSetLabelItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1762);
    bindingVariableReference();
    setState(1763);
    isOrColon();
    setState(1764);
    labelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelSetSpecificationContext ------------------------------------------------------------------

GQLParser::LabelSetSpecificationContext::LabelSetSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::LabelNameContext *> GQLParser::LabelSetSpecificationContext::labelName() {
  return getRuleContexts<GQLParser::LabelNameContext>();
}

GQLParser::LabelNameContext* GQLParser::LabelSetSpecificationContext::labelName(size_t i) {
  return getRuleContext<GQLParser::LabelNameContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::LabelSetSpecificationContext::AMPERSAND() {
  return getTokens(GQLParser::AMPERSAND);
}

tree::TerminalNode* GQLParser::LabelSetSpecificationContext::AMPERSAND(size_t i) {
  return getToken(GQLParser::AMPERSAND, i);
}


size_t GQLParser::LabelSetSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleLabelSetSpecification;
}


std::any GQLParser::LabelSetSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLabelSetSpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LabelSetSpecificationContext* GQLParser::labelSetSpecification() {
  LabelSetSpecificationContext *_localctx = _tracker.createInstance<LabelSetSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 276, GQLParser::RuleLabelSetSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1766);
    labelName();
    setState(1771);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1767);
        match(GQLParser::AMPERSAND);
        setState(1768);
        labelName(); 
      }
      setState(1773);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RemoveStatementContext ------------------------------------------------------------------

GQLParser::RemoveStatementContext::RemoveStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::RemoveStatementContext::REMOVE() {
  return getToken(GQLParser::REMOVE, 0);
}

GQLParser::RemoveItemListContext* GQLParser::RemoveStatementContext::removeItemList() {
  return getRuleContext<GQLParser::RemoveItemListContext>(0);
}


size_t GQLParser::RemoveStatementContext::getRuleIndex() const {
  return GQLParser::RuleRemoveStatement;
}


std::any GQLParser::RemoveStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitRemoveStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::RemoveStatementContext* GQLParser::removeStatement() {
  RemoveStatementContext *_localctx = _tracker.createInstance<RemoveStatementContext>(_ctx, getState());
  enterRule(_localctx, 278, GQLParser::RuleRemoveStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1774);
    match(GQLParser::REMOVE);
    setState(1775);
    removeItemList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RemoveItemListContext ------------------------------------------------------------------

GQLParser::RemoveItemListContext::RemoveItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::RemoveItemContext *> GQLParser::RemoveItemListContext::removeItem() {
  return getRuleContexts<GQLParser::RemoveItemContext>();
}

GQLParser::RemoveItemContext* GQLParser::RemoveItemListContext::removeItem(size_t i) {
  return getRuleContext<GQLParser::RemoveItemContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::RemoveItemListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::RemoveItemListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::RemoveItemListContext::getRuleIndex() const {
  return GQLParser::RuleRemoveItemList;
}


std::any GQLParser::RemoveItemListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitRemoveItemList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::RemoveItemListContext* GQLParser::removeItemList() {
  RemoveItemListContext *_localctx = _tracker.createInstance<RemoveItemListContext>(_ctx, getState());
  enterRule(_localctx, 280, GQLParser::RuleRemoveItemList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1777);
    removeItem();
    setState(1782);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(1778);
      match(GQLParser::COMMA);
      setState(1779);
      removeItem();
      setState(1784);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RemoveItemContext ------------------------------------------------------------------

GQLParser::RemoveItemContext::RemoveItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::RemovePropertyItemContext* GQLParser::RemoveItemContext::removePropertyItem() {
  return getRuleContext<GQLParser::RemovePropertyItemContext>(0);
}

GQLParser::RemoveLabelItemContext* GQLParser::RemoveItemContext::removeLabelItem() {
  return getRuleContext<GQLParser::RemoveLabelItemContext>(0);
}


size_t GQLParser::RemoveItemContext::getRuleIndex() const {
  return GQLParser::RuleRemoveItem;
}


std::any GQLParser::RemoveItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitRemoveItem(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::RemoveItemContext* GQLParser::removeItem() {
  RemoveItemContext *_localctx = _tracker.createInstance<RemoveItemContext>(_ctx, getState());
  enterRule(_localctx, 282, GQLParser::RuleRemoveItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1787);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1785);
      removePropertyItem();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1786);
      removeLabelItem();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RemovePropertyItemContext ------------------------------------------------------------------

GQLParser::RemovePropertyItemContext::RemovePropertyItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::RemovePropertyItemContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}

tree::TerminalNode* GQLParser::RemovePropertyItemContext::PERIOD() {
  return getToken(GQLParser::PERIOD, 0);
}

GQLParser::PropertyNameContext* GQLParser::RemovePropertyItemContext::propertyName() {
  return getRuleContext<GQLParser::PropertyNameContext>(0);
}


size_t GQLParser::RemovePropertyItemContext::getRuleIndex() const {
  return GQLParser::RuleRemovePropertyItem;
}


std::any GQLParser::RemovePropertyItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitRemovePropertyItem(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::RemovePropertyItemContext* GQLParser::removePropertyItem() {
  RemovePropertyItemContext *_localctx = _tracker.createInstance<RemovePropertyItemContext>(_ctx, getState());
  enterRule(_localctx, 284, GQLParser::RuleRemovePropertyItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1789);
    bindingVariableReference();
    setState(1790);
    match(GQLParser::PERIOD);
    setState(1791);
    propertyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RemoveLabelItemContext ------------------------------------------------------------------

GQLParser::RemoveLabelItemContext::RemoveLabelItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::RemoveLabelItemContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}

GQLParser::IsOrColonContext* GQLParser::RemoveLabelItemContext::isOrColon() {
  return getRuleContext<GQLParser::IsOrColonContext>(0);
}

GQLParser::LabelNameContext* GQLParser::RemoveLabelItemContext::labelName() {
  return getRuleContext<GQLParser::LabelNameContext>(0);
}


size_t GQLParser::RemoveLabelItemContext::getRuleIndex() const {
  return GQLParser::RuleRemoveLabelItem;
}


std::any GQLParser::RemoveLabelItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitRemoveLabelItem(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::RemoveLabelItemContext* GQLParser::removeLabelItem() {
  RemoveLabelItemContext *_localctx = _tracker.createInstance<RemoveLabelItemContext>(_ctx, getState());
  enterRule(_localctx, 286, GQLParser::RuleRemoveLabelItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1793);
    bindingVariableReference();
    setState(1794);
    isOrColon();
    setState(1795);
    labelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeleteStatementContext ------------------------------------------------------------------

GQLParser::DeleteStatementContext::DeleteStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DeleteStatementContext::DELETE() {
  return getToken(GQLParser::DELETE, 0);
}

GQLParser::DeleteItemListContext* GQLParser::DeleteStatementContext::deleteItemList() {
  return getRuleContext<GQLParser::DeleteItemListContext>(0);
}

tree::TerminalNode* GQLParser::DeleteStatementContext::DETACH() {
  return getToken(GQLParser::DETACH, 0);
}

tree::TerminalNode* GQLParser::DeleteStatementContext::NODETACH() {
  return getToken(GQLParser::NODETACH, 0);
}


size_t GQLParser::DeleteStatementContext::getRuleIndex() const {
  return GQLParser::RuleDeleteStatement;
}


std::any GQLParser::DeleteStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDeleteStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DeleteStatementContext* GQLParser::deleteStatement() {
  DeleteStatementContext *_localctx = _tracker.createInstance<DeleteStatementContext>(_ctx, getState());
  enterRule(_localctx, 288, GQLParser::RuleDeleteStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1798);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::DETACH || _la == GQLParser::NODETACH) {
      setState(1797);
      _la = _input->LA(1);
      if (!(_la == GQLParser::DETACH || _la == GQLParser::NODETACH)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1800);
    match(GQLParser::DELETE);
    setState(1801);
    deleteItemList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeleteItemListContext ------------------------------------------------------------------

GQLParser::DeleteItemListContext::DeleteItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::DeleteItemContext *> GQLParser::DeleteItemListContext::deleteItem() {
  return getRuleContexts<GQLParser::DeleteItemContext>();
}

GQLParser::DeleteItemContext* GQLParser::DeleteItemListContext::deleteItem(size_t i) {
  return getRuleContext<GQLParser::DeleteItemContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::DeleteItemListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::DeleteItemListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::DeleteItemListContext::getRuleIndex() const {
  return GQLParser::RuleDeleteItemList;
}


std::any GQLParser::DeleteItemListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDeleteItemList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DeleteItemListContext* GQLParser::deleteItemList() {
  DeleteItemListContext *_localctx = _tracker.createInstance<DeleteItemListContext>(_ctx, getState());
  enterRule(_localctx, 290, GQLParser::RuleDeleteItemList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1803);
    deleteItem();
    setState(1808);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(1804);
      match(GQLParser::COMMA);
      setState(1805);
      deleteItem();
      setState(1810);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeleteItemContext ------------------------------------------------------------------

GQLParser::DeleteItemContext::DeleteItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ExpressionContext* GQLParser::DeleteItemContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}


size_t GQLParser::DeleteItemContext::getRuleIndex() const {
  return GQLParser::RuleDeleteItem;
}


std::any GQLParser::DeleteItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDeleteItem(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DeleteItemContext* GQLParser::deleteItem() {
  DeleteItemContext *_localctx = _tracker.createInstance<DeleteItemContext>(_ctx, getState());
  enterRule(_localctx, 292, GQLParser::RuleDeleteItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1811);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallDataModifyingProcedureStatementContext ------------------------------------------------------------------

GQLParser::CallDataModifyingProcedureStatementContext::CallDataModifyingProcedureStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CallProcedureStatementContext* GQLParser::CallDataModifyingProcedureStatementContext::callProcedureStatement() {
  return getRuleContext<GQLParser::CallProcedureStatementContext>(0);
}


size_t GQLParser::CallDataModifyingProcedureStatementContext::getRuleIndex() const {
  return GQLParser::RuleCallDataModifyingProcedureStatement;
}


std::any GQLParser::CallDataModifyingProcedureStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCallDataModifyingProcedureStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CallDataModifyingProcedureStatementContext* GQLParser::callDataModifyingProcedureStatement() {
  CallDataModifyingProcedureStatementContext *_localctx = _tracker.createInstance<CallDataModifyingProcedureStatementContext>(_ctx, getState());
  enterRule(_localctx, 294, GQLParser::RuleCallDataModifyingProcedureStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1813);
    callProcedureStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompositeQueryStatementContext ------------------------------------------------------------------

GQLParser::CompositeQueryStatementContext::CompositeQueryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CompositeQueryExpressionContext* GQLParser::CompositeQueryStatementContext::compositeQueryExpression() {
  return getRuleContext<GQLParser::CompositeQueryExpressionContext>(0);
}


size_t GQLParser::CompositeQueryStatementContext::getRuleIndex() const {
  return GQLParser::RuleCompositeQueryStatement;
}


std::any GQLParser::CompositeQueryStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCompositeQueryStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CompositeQueryStatementContext* GQLParser::compositeQueryStatement() {
  CompositeQueryStatementContext *_localctx = _tracker.createInstance<CompositeQueryStatementContext>(_ctx, getState());
  enterRule(_localctx, 296, GQLParser::RuleCompositeQueryStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1815);
    compositeQueryExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompositeQueryExpressionContext ------------------------------------------------------------------

GQLParser::CompositeQueryExpressionContext::CompositeQueryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CompositeQueryPrimaryContext* GQLParser::CompositeQueryExpressionContext::compositeQueryPrimary() {
  return getRuleContext<GQLParser::CompositeQueryPrimaryContext>(0);
}

GQLParser::CompositeQueryExpressionContext* GQLParser::CompositeQueryExpressionContext::compositeQueryExpression() {
  return getRuleContext<GQLParser::CompositeQueryExpressionContext>(0);
}

GQLParser::QueryConjunctionContext* GQLParser::CompositeQueryExpressionContext::queryConjunction() {
  return getRuleContext<GQLParser::QueryConjunctionContext>(0);
}


size_t GQLParser::CompositeQueryExpressionContext::getRuleIndex() const {
  return GQLParser::RuleCompositeQueryExpression;
}


std::any GQLParser::CompositeQueryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCompositeQueryExpression(this);
  else
    return visitor->visitChildren(this);
}


GQLParser::CompositeQueryExpressionContext* GQLParser::compositeQueryExpression() {
   return compositeQueryExpression(0);
}

GQLParser::CompositeQueryExpressionContext* GQLParser::compositeQueryExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GQLParser::CompositeQueryExpressionContext *_localctx = _tracker.createInstance<CompositeQueryExpressionContext>(_ctx, parentState);
  GQLParser::CompositeQueryExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 298;
  enterRecursionRule(_localctx, 298, GQLParser::RuleCompositeQueryExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1818);
    compositeQueryPrimary();
    _ctx->stop = _input->LT(-1);
    setState(1826);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<CompositeQueryExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleCompositeQueryExpression);
        setState(1820);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1821);
        queryConjunction();
        setState(1822);
        compositeQueryPrimary(); 
      }
      setState(1828);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- QueryConjunctionContext ------------------------------------------------------------------

GQLParser::QueryConjunctionContext::QueryConjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SetOperatorContext* GQLParser::QueryConjunctionContext::setOperator() {
  return getRuleContext<GQLParser::SetOperatorContext>(0);
}

tree::TerminalNode* GQLParser::QueryConjunctionContext::OTHERWISE() {
  return getToken(GQLParser::OTHERWISE, 0);
}


size_t GQLParser::QueryConjunctionContext::getRuleIndex() const {
  return GQLParser::RuleQueryConjunction;
}


std::any GQLParser::QueryConjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitQueryConjunction(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::QueryConjunctionContext* GQLParser::queryConjunction() {
  QueryConjunctionContext *_localctx = _tracker.createInstance<QueryConjunctionContext>(_ctx, getState());
  enterRule(_localctx, 300, GQLParser::RuleQueryConjunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1831);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::EXCEPT:
      case GQLParser::INTERSECT:
      case GQLParser::UNION: {
        enterOuterAlt(_localctx, 1);
        setState(1829);
        setOperator();
        break;
      }

      case GQLParser::OTHERWISE: {
        enterOuterAlt(_localctx, 2);
        setState(1830);
        match(GQLParser::OTHERWISE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetOperatorContext ------------------------------------------------------------------

GQLParser::SetOperatorContext::SetOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SetOperatorContext::UNION() {
  return getToken(GQLParser::UNION, 0);
}

GQLParser::SetQuantifierContext* GQLParser::SetOperatorContext::setQuantifier() {
  return getRuleContext<GQLParser::SetQuantifierContext>(0);
}

tree::TerminalNode* GQLParser::SetOperatorContext::EXCEPT() {
  return getToken(GQLParser::EXCEPT, 0);
}

tree::TerminalNode* GQLParser::SetOperatorContext::INTERSECT() {
  return getToken(GQLParser::INTERSECT, 0);
}


size_t GQLParser::SetOperatorContext::getRuleIndex() const {
  return GQLParser::RuleSetOperator;
}


std::any GQLParser::SetOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSetOperator(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SetOperatorContext* GQLParser::setOperator() {
  SetOperatorContext *_localctx = _tracker.createInstance<SetOperatorContext>(_ctx, getState());
  enterRule(_localctx, 302, GQLParser::RuleSetOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1845);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::UNION: {
        enterOuterAlt(_localctx, 1);
        setState(1833);
        match(GQLParser::UNION);
        setState(1835);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::ALL

        || _la == GQLParser::DISTINCT) {
          setState(1834);
          setQuantifier();
        }
        break;
      }

      case GQLParser::EXCEPT: {
        enterOuterAlt(_localctx, 2);
        setState(1837);
        match(GQLParser::EXCEPT);
        setState(1839);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::ALL

        || _la == GQLParser::DISTINCT) {
          setState(1838);
          setQuantifier();
        }
        break;
      }

      case GQLParser::INTERSECT: {
        enterOuterAlt(_localctx, 3);
        setState(1841);
        match(GQLParser::INTERSECT);
        setState(1843);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::ALL

        || _la == GQLParser::DISTINCT) {
          setState(1842);
          setQuantifier();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompositeQueryPrimaryContext ------------------------------------------------------------------

GQLParser::CompositeQueryPrimaryContext::CompositeQueryPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::LinearQueryStatementContext* GQLParser::CompositeQueryPrimaryContext::linearQueryStatement() {
  return getRuleContext<GQLParser::LinearQueryStatementContext>(0);
}


size_t GQLParser::CompositeQueryPrimaryContext::getRuleIndex() const {
  return GQLParser::RuleCompositeQueryPrimary;
}


std::any GQLParser::CompositeQueryPrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCompositeQueryPrimary(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CompositeQueryPrimaryContext* GQLParser::compositeQueryPrimary() {
  CompositeQueryPrimaryContext *_localctx = _tracker.createInstance<CompositeQueryPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 304, GQLParser::RuleCompositeQueryPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1847);
    linearQueryStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinearQueryStatementContext ------------------------------------------------------------------

GQLParser::LinearQueryStatementContext::LinearQueryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FocusedLinearQueryStatementContext* GQLParser::LinearQueryStatementContext::focusedLinearQueryStatement() {
  return getRuleContext<GQLParser::FocusedLinearQueryStatementContext>(0);
}

GQLParser::AmbientLinearQueryStatementContext* GQLParser::LinearQueryStatementContext::ambientLinearQueryStatement() {
  return getRuleContext<GQLParser::AmbientLinearQueryStatementContext>(0);
}


size_t GQLParser::LinearQueryStatementContext::getRuleIndex() const {
  return GQLParser::RuleLinearQueryStatement;
}


std::any GQLParser::LinearQueryStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLinearQueryStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LinearQueryStatementContext* GQLParser::linearQueryStatement() {
  LinearQueryStatementContext *_localctx = _tracker.createInstance<LinearQueryStatementContext>(_ctx, getState());
  enterRule(_localctx, 306, GQLParser::RuleLinearQueryStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1851);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::SELECT:
      case GQLParser::USE: {
        enterOuterAlt(_localctx, 1);
        setState(1849);
        focusedLinearQueryStatement();
        break;
      }

      case GQLParser::LEFT_BRACE:
      case GQLParser::CALL:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FOR:
      case GQLParser::LET:
      case GQLParser::LIMIT:
      case GQLParser::MATCH:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::OPTIONAL:
      case GQLParser::ORDER:
      case GQLParser::RETURN: {
        enterOuterAlt(_localctx, 2);
        setState(1850);
        ambientLinearQueryStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FocusedLinearQueryStatementContext ------------------------------------------------------------------

GQLParser::FocusedLinearQueryStatementContext::FocusedLinearQueryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext* GQLParser::FocusedLinearQueryStatementContext::focusedLinearQueryAndPrimitiveResultStatementPart() {
  return getRuleContext<GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext>(0);
}

std::vector<GQLParser::FocusedLinearQueryStatementPartContext *> GQLParser::FocusedLinearQueryStatementContext::focusedLinearQueryStatementPart() {
  return getRuleContexts<GQLParser::FocusedLinearQueryStatementPartContext>();
}

GQLParser::FocusedLinearQueryStatementPartContext* GQLParser::FocusedLinearQueryStatementContext::focusedLinearQueryStatementPart(size_t i) {
  return getRuleContext<GQLParser::FocusedLinearQueryStatementPartContext>(i);
}

GQLParser::FocusedPrimitiveResultStatementContext* GQLParser::FocusedLinearQueryStatementContext::focusedPrimitiveResultStatement() {
  return getRuleContext<GQLParser::FocusedPrimitiveResultStatementContext>(0);
}

GQLParser::FocusedNestedQuerySpecificationContext* GQLParser::FocusedLinearQueryStatementContext::focusedNestedQuerySpecification() {
  return getRuleContext<GQLParser::FocusedNestedQuerySpecificationContext>(0);
}

GQLParser::SelectStatementContext* GQLParser::FocusedLinearQueryStatementContext::selectStatement() {
  return getRuleContext<GQLParser::SelectStatementContext>(0);
}


size_t GQLParser::FocusedLinearQueryStatementContext::getRuleIndex() const {
  return GQLParser::RuleFocusedLinearQueryStatement;
}


std::any GQLParser::FocusedLinearQueryStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFocusedLinearQueryStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FocusedLinearQueryStatementContext* GQLParser::focusedLinearQueryStatement() {
  FocusedLinearQueryStatementContext *_localctx = _tracker.createInstance<FocusedLinearQueryStatementContext>(_ctx, getState());
  enterRule(_localctx, 308, GQLParser::RuleFocusedLinearQueryStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1863);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1856);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1853);
          focusedLinearQueryStatementPart(); 
        }
        setState(1858);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
      }
      setState(1859);
      focusedLinearQueryAndPrimitiveResultStatementPart();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1860);
      focusedPrimitiveResultStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1861);
      focusedNestedQuerySpecification();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1862);
      selectStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FocusedLinearQueryStatementPartContext ------------------------------------------------------------------

GQLParser::FocusedLinearQueryStatementPartContext::FocusedLinearQueryStatementPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UseGraphClauseContext* GQLParser::FocusedLinearQueryStatementPartContext::useGraphClause() {
  return getRuleContext<GQLParser::UseGraphClauseContext>(0);
}

GQLParser::SimpleLinearQueryStatementContext* GQLParser::FocusedLinearQueryStatementPartContext::simpleLinearQueryStatement() {
  return getRuleContext<GQLParser::SimpleLinearQueryStatementContext>(0);
}


size_t GQLParser::FocusedLinearQueryStatementPartContext::getRuleIndex() const {
  return GQLParser::RuleFocusedLinearQueryStatementPart;
}


std::any GQLParser::FocusedLinearQueryStatementPartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFocusedLinearQueryStatementPart(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FocusedLinearQueryStatementPartContext* GQLParser::focusedLinearQueryStatementPart() {
  FocusedLinearQueryStatementPartContext *_localctx = _tracker.createInstance<FocusedLinearQueryStatementPartContext>(_ctx, getState());
  enterRule(_localctx, 310, GQLParser::RuleFocusedLinearQueryStatementPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1865);
    useGraphClause();
    setState(1866);
    simpleLinearQueryStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FocusedLinearQueryAndPrimitiveResultStatementPartContext ------------------------------------------------------------------

GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext::FocusedLinearQueryAndPrimitiveResultStatementPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UseGraphClauseContext* GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext::useGraphClause() {
  return getRuleContext<GQLParser::UseGraphClauseContext>(0);
}

GQLParser::SimpleLinearQueryStatementContext* GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext::simpleLinearQueryStatement() {
  return getRuleContext<GQLParser::SimpleLinearQueryStatementContext>(0);
}

GQLParser::PrimitiveResultStatementContext* GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext::primitiveResultStatement() {
  return getRuleContext<GQLParser::PrimitiveResultStatementContext>(0);
}


size_t GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext::getRuleIndex() const {
  return GQLParser::RuleFocusedLinearQueryAndPrimitiveResultStatementPart;
}


std::any GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFocusedLinearQueryAndPrimitiveResultStatementPart(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext* GQLParser::focusedLinearQueryAndPrimitiveResultStatementPart() {
  FocusedLinearQueryAndPrimitiveResultStatementPartContext *_localctx = _tracker.createInstance<FocusedLinearQueryAndPrimitiveResultStatementPartContext>(_ctx, getState());
  enterRule(_localctx, 312, GQLParser::RuleFocusedLinearQueryAndPrimitiveResultStatementPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1868);
    useGraphClause();
    setState(1869);
    simpleLinearQueryStatement();
    setState(1870);
    primitiveResultStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FocusedPrimitiveResultStatementContext ------------------------------------------------------------------

GQLParser::FocusedPrimitiveResultStatementContext::FocusedPrimitiveResultStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UseGraphClauseContext* GQLParser::FocusedPrimitiveResultStatementContext::useGraphClause() {
  return getRuleContext<GQLParser::UseGraphClauseContext>(0);
}

GQLParser::PrimitiveResultStatementContext* GQLParser::FocusedPrimitiveResultStatementContext::primitiveResultStatement() {
  return getRuleContext<GQLParser::PrimitiveResultStatementContext>(0);
}


size_t GQLParser::FocusedPrimitiveResultStatementContext::getRuleIndex() const {
  return GQLParser::RuleFocusedPrimitiveResultStatement;
}


std::any GQLParser::FocusedPrimitiveResultStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFocusedPrimitiveResultStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FocusedPrimitiveResultStatementContext* GQLParser::focusedPrimitiveResultStatement() {
  FocusedPrimitiveResultStatementContext *_localctx = _tracker.createInstance<FocusedPrimitiveResultStatementContext>(_ctx, getState());
  enterRule(_localctx, 314, GQLParser::RuleFocusedPrimitiveResultStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1872);
    useGraphClause();
    setState(1873);
    primitiveResultStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FocusedNestedQuerySpecificationContext ------------------------------------------------------------------

GQLParser::FocusedNestedQuerySpecificationContext::FocusedNestedQuerySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UseGraphClauseContext* GQLParser::FocusedNestedQuerySpecificationContext::useGraphClause() {
  return getRuleContext<GQLParser::UseGraphClauseContext>(0);
}

GQLParser::NestedQuerySpecificationContext* GQLParser::FocusedNestedQuerySpecificationContext::nestedQuerySpecification() {
  return getRuleContext<GQLParser::NestedQuerySpecificationContext>(0);
}


size_t GQLParser::FocusedNestedQuerySpecificationContext::getRuleIndex() const {
  return GQLParser::RuleFocusedNestedQuerySpecification;
}


std::any GQLParser::FocusedNestedQuerySpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFocusedNestedQuerySpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FocusedNestedQuerySpecificationContext* GQLParser::focusedNestedQuerySpecification() {
  FocusedNestedQuerySpecificationContext *_localctx = _tracker.createInstance<FocusedNestedQuerySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 316, GQLParser::RuleFocusedNestedQuerySpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1875);
    useGraphClause();
    setState(1876);
    nestedQuerySpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AmbientLinearQueryStatementContext ------------------------------------------------------------------

GQLParser::AmbientLinearQueryStatementContext::AmbientLinearQueryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PrimitiveResultStatementContext* GQLParser::AmbientLinearQueryStatementContext::primitiveResultStatement() {
  return getRuleContext<GQLParser::PrimitiveResultStatementContext>(0);
}

GQLParser::SimpleLinearQueryStatementContext* GQLParser::AmbientLinearQueryStatementContext::simpleLinearQueryStatement() {
  return getRuleContext<GQLParser::SimpleLinearQueryStatementContext>(0);
}

GQLParser::NestedQuerySpecificationContext* GQLParser::AmbientLinearQueryStatementContext::nestedQuerySpecification() {
  return getRuleContext<GQLParser::NestedQuerySpecificationContext>(0);
}


size_t GQLParser::AmbientLinearQueryStatementContext::getRuleIndex() const {
  return GQLParser::RuleAmbientLinearQueryStatement;
}


std::any GQLParser::AmbientLinearQueryStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAmbientLinearQueryStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::AmbientLinearQueryStatementContext* GQLParser::ambientLinearQueryStatement() {
  AmbientLinearQueryStatementContext *_localctx = _tracker.createInstance<AmbientLinearQueryStatementContext>(_ctx, getState());
  enterRule(_localctx, 318, GQLParser::RuleAmbientLinearQueryStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1883);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CALL:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FOR:
      case GQLParser::LET:
      case GQLParser::LIMIT:
      case GQLParser::MATCH:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::OPTIONAL:
      case GQLParser::ORDER:
      case GQLParser::RETURN: {
        enterOuterAlt(_localctx, 1);
        setState(1879);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 55) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 55)) & 4616189618054758401) != 0) || ((((_la - 157) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 157)) & 356482293765) != 0)) {
          setState(1878);
          simpleLinearQueryStatement();
        }
        setState(1881);
        primitiveResultStatement();
        break;
      }

      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1882);
        nestedQuerySpecification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleLinearQueryStatementContext ------------------------------------------------------------------

GQLParser::SimpleLinearQueryStatementContext::SimpleLinearQueryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SimpleQueryStatementContext *> GQLParser::SimpleLinearQueryStatementContext::simpleQueryStatement() {
  return getRuleContexts<GQLParser::SimpleQueryStatementContext>();
}

GQLParser::SimpleQueryStatementContext* GQLParser::SimpleLinearQueryStatementContext::simpleQueryStatement(size_t i) {
  return getRuleContext<GQLParser::SimpleQueryStatementContext>(i);
}


size_t GQLParser::SimpleLinearQueryStatementContext::getRuleIndex() const {
  return GQLParser::RuleSimpleLinearQueryStatement;
}


std::any GQLParser::SimpleLinearQueryStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleLinearQueryStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimpleLinearQueryStatementContext* GQLParser::simpleLinearQueryStatement() {
  SimpleLinearQueryStatementContext *_localctx = _tracker.createInstance<SimpleLinearQueryStatementContext>(_ctx, getState());
  enterRule(_localctx, 320, GQLParser::RuleSimpleLinearQueryStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1886); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1885);
      simpleQueryStatement();
      setState(1888); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 55) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 55)) & 4616189618054758401) != 0) || ((((_la - 157) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 157)) & 356482293765) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleQueryStatementContext ------------------------------------------------------------------

GQLParser::SimpleQueryStatementContext::SimpleQueryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PrimitiveQueryStatementContext* GQLParser::SimpleQueryStatementContext::primitiveQueryStatement() {
  return getRuleContext<GQLParser::PrimitiveQueryStatementContext>(0);
}

GQLParser::CallQueryStatementContext* GQLParser::SimpleQueryStatementContext::callQueryStatement() {
  return getRuleContext<GQLParser::CallQueryStatementContext>(0);
}


size_t GQLParser::SimpleQueryStatementContext::getRuleIndex() const {
  return GQLParser::RuleSimpleQueryStatement;
}


std::any GQLParser::SimpleQueryStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleQueryStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimpleQueryStatementContext* GQLParser::simpleQueryStatement() {
  SimpleQueryStatementContext *_localctx = _tracker.createInstance<SimpleQueryStatementContext>(_ctx, getState());
  enterRule(_localctx, 322, GQLParser::RuleSimpleQueryStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1892);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1890);
      primitiveQueryStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1891);
      callQueryStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimitiveQueryStatementContext ------------------------------------------------------------------

GQLParser::PrimitiveQueryStatementContext::PrimitiveQueryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::MatchStatementContext* GQLParser::PrimitiveQueryStatementContext::matchStatement() {
  return getRuleContext<GQLParser::MatchStatementContext>(0);
}

GQLParser::LetStatementContext* GQLParser::PrimitiveQueryStatementContext::letStatement() {
  return getRuleContext<GQLParser::LetStatementContext>(0);
}

GQLParser::ForStatementContext* GQLParser::PrimitiveQueryStatementContext::forStatement() {
  return getRuleContext<GQLParser::ForStatementContext>(0);
}

GQLParser::FilterStatementContext* GQLParser::PrimitiveQueryStatementContext::filterStatement() {
  return getRuleContext<GQLParser::FilterStatementContext>(0);
}

GQLParser::OrderByAndPageStatementContext* GQLParser::PrimitiveQueryStatementContext::orderByAndPageStatement() {
  return getRuleContext<GQLParser::OrderByAndPageStatementContext>(0);
}


size_t GQLParser::PrimitiveQueryStatementContext::getRuleIndex() const {
  return GQLParser::RulePrimitiveQueryStatement;
}


std::any GQLParser::PrimitiveQueryStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPrimitiveQueryStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PrimitiveQueryStatementContext* GQLParser::primitiveQueryStatement() {
  PrimitiveQueryStatementContext *_localctx = _tracker.createInstance<PrimitiveQueryStatementContext>(_ctx, getState());
  enterRule(_localctx, 324, GQLParser::RulePrimitiveQueryStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1899);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::MATCH:
      case GQLParser::OPTIONAL: {
        enterOuterAlt(_localctx, 1);
        setState(1894);
        matchStatement();
        break;
      }

      case GQLParser::LET: {
        enterOuterAlt(_localctx, 2);
        setState(1895);
        letStatement();
        break;
      }

      case GQLParser::FOR: {
        enterOuterAlt(_localctx, 3);
        setState(1896);
        forStatement();
        break;
      }

      case GQLParser::FILTER: {
        enterOuterAlt(_localctx, 4);
        setState(1897);
        filterStatement();
        break;
      }

      case GQLParser::LIMIT:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::ORDER: {
        enterOuterAlt(_localctx, 5);
        setState(1898);
        orderByAndPageStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MatchStatementContext ------------------------------------------------------------------

GQLParser::MatchStatementContext::MatchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimpleMatchStatementContext* GQLParser::MatchStatementContext::simpleMatchStatement() {
  return getRuleContext<GQLParser::SimpleMatchStatementContext>(0);
}

GQLParser::OptionalMatchStatementContext* GQLParser::MatchStatementContext::optionalMatchStatement() {
  return getRuleContext<GQLParser::OptionalMatchStatementContext>(0);
}


size_t GQLParser::MatchStatementContext::getRuleIndex() const {
  return GQLParser::RuleMatchStatement;
}


std::any GQLParser::MatchStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitMatchStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::MatchStatementContext* GQLParser::matchStatement() {
  MatchStatementContext *_localctx = _tracker.createInstance<MatchStatementContext>(_ctx, getState());
  enterRule(_localctx, 326, GQLParser::RuleMatchStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1903);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::MATCH: {
        enterOuterAlt(_localctx, 1);
        setState(1901);
        simpleMatchStatement();
        break;
      }

      case GQLParser::OPTIONAL: {
        enterOuterAlt(_localctx, 2);
        setState(1902);
        optionalMatchStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleMatchStatementContext ------------------------------------------------------------------

GQLParser::SimpleMatchStatementContext::SimpleMatchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimpleMatchStatementContext::MATCH() {
  return getToken(GQLParser::MATCH, 0);
}

GQLParser::GraphPatternBindingTableContext* GQLParser::SimpleMatchStatementContext::graphPatternBindingTable() {
  return getRuleContext<GQLParser::GraphPatternBindingTableContext>(0);
}


size_t GQLParser::SimpleMatchStatementContext::getRuleIndex() const {
  return GQLParser::RuleSimpleMatchStatement;
}


std::any GQLParser::SimpleMatchStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleMatchStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimpleMatchStatementContext* GQLParser::simpleMatchStatement() {
  SimpleMatchStatementContext *_localctx = _tracker.createInstance<SimpleMatchStatementContext>(_ctx, getState());
  enterRule(_localctx, 328, GQLParser::RuleSimpleMatchStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1905);
    match(GQLParser::MATCH);
    setState(1906);
    graphPatternBindingTable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionalMatchStatementContext ------------------------------------------------------------------

GQLParser::OptionalMatchStatementContext::OptionalMatchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::OptionalMatchStatementContext::OPTIONAL() {
  return getToken(GQLParser::OPTIONAL, 0);
}

GQLParser::OptionalOperandContext* GQLParser::OptionalMatchStatementContext::optionalOperand() {
  return getRuleContext<GQLParser::OptionalOperandContext>(0);
}


size_t GQLParser::OptionalMatchStatementContext::getRuleIndex() const {
  return GQLParser::RuleOptionalMatchStatement;
}


std::any GQLParser::OptionalMatchStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOptionalMatchStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::OptionalMatchStatementContext* GQLParser::optionalMatchStatement() {
  OptionalMatchStatementContext *_localctx = _tracker.createInstance<OptionalMatchStatementContext>(_ctx, getState());
  enterRule(_localctx, 330, GQLParser::RuleOptionalMatchStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1908);
    match(GQLParser::OPTIONAL);
    setState(1909);
    optionalOperand();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionalOperandContext ------------------------------------------------------------------

GQLParser::OptionalOperandContext::OptionalOperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimpleMatchStatementContext* GQLParser::OptionalOperandContext::simpleMatchStatement() {
  return getRuleContext<GQLParser::SimpleMatchStatementContext>(0);
}

tree::TerminalNode* GQLParser::OptionalOperandContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

GQLParser::MatchStatementBlockContext* GQLParser::OptionalOperandContext::matchStatementBlock() {
  return getRuleContext<GQLParser::MatchStatementBlockContext>(0);
}

tree::TerminalNode* GQLParser::OptionalOperandContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}

tree::TerminalNode* GQLParser::OptionalOperandContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::OptionalOperandContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::OptionalOperandContext::getRuleIndex() const {
  return GQLParser::RuleOptionalOperand;
}


std::any GQLParser::OptionalOperandContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOptionalOperand(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::OptionalOperandContext* GQLParser::optionalOperand() {
  OptionalOperandContext *_localctx = _tracker.createInstance<OptionalOperandContext>(_ctx, getState());
  enterRule(_localctx, 332, GQLParser::RuleOptionalOperand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1920);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::MATCH: {
        enterOuterAlt(_localctx, 1);
        setState(1911);
        simpleMatchStatement();
        break;
      }

      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1912);
        match(GQLParser::LEFT_BRACE);
        setState(1913);
        matchStatementBlock();
        setState(1914);
        match(GQLParser::RIGHT_BRACE);
        break;
      }

      case GQLParser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 3);
        setState(1916);
        match(GQLParser::LEFT_PAREN);
        setState(1917);
        matchStatementBlock();
        setState(1918);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MatchStatementBlockContext ------------------------------------------------------------------

GQLParser::MatchStatementBlockContext::MatchStatementBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::MatchStatementContext *> GQLParser::MatchStatementBlockContext::matchStatement() {
  return getRuleContexts<GQLParser::MatchStatementContext>();
}

GQLParser::MatchStatementContext* GQLParser::MatchStatementBlockContext::matchStatement(size_t i) {
  return getRuleContext<GQLParser::MatchStatementContext>(i);
}


size_t GQLParser::MatchStatementBlockContext::getRuleIndex() const {
  return GQLParser::RuleMatchStatementBlock;
}


std::any GQLParser::MatchStatementBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitMatchStatementBlock(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::MatchStatementBlockContext* GQLParser::matchStatementBlock() {
  MatchStatementBlockContext *_localctx = _tracker.createInstance<MatchStatementBlockContext>(_ctx, getState());
  enterRule(_localctx, 334, GQLParser::RuleMatchStatementBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1923); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1922);
      matchStatement();
      setState(1925); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GQLParser::MATCH

    || _la == GQLParser::OPTIONAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallQueryStatementContext ------------------------------------------------------------------

GQLParser::CallQueryStatementContext::CallQueryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CallProcedureStatementContext* GQLParser::CallQueryStatementContext::callProcedureStatement() {
  return getRuleContext<GQLParser::CallProcedureStatementContext>(0);
}


size_t GQLParser::CallQueryStatementContext::getRuleIndex() const {
  return GQLParser::RuleCallQueryStatement;
}


std::any GQLParser::CallQueryStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCallQueryStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CallQueryStatementContext* GQLParser::callQueryStatement() {
  CallQueryStatementContext *_localctx = _tracker.createInstance<CallQueryStatementContext>(_ctx, getState());
  enterRule(_localctx, 336, GQLParser::RuleCallQueryStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1927);
    callProcedureStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FilterStatementContext ------------------------------------------------------------------

GQLParser::FilterStatementContext::FilterStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FilterStatementContext::FILTER() {
  return getToken(GQLParser::FILTER, 0);
}

GQLParser::WhereClauseContext* GQLParser::FilterStatementContext::whereClause() {
  return getRuleContext<GQLParser::WhereClauseContext>(0);
}

GQLParser::ExpressionContext* GQLParser::FilterStatementContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}


size_t GQLParser::FilterStatementContext::getRuleIndex() const {
  return GQLParser::RuleFilterStatement;
}


std::any GQLParser::FilterStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFilterStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FilterStatementContext* GQLParser::filterStatement() {
  FilterStatementContext *_localctx = _tracker.createInstance<FilterStatementContext>(_ctx, getState());
  enterRule(_localctx, 338, GQLParser::RuleFilterStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1929);
    match(GQLParser::FILTER);
    setState(1932);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      setState(1930);
      whereClause();
      break;
    }

    case 2: {
      setState(1931);
      expression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LetStatementContext ------------------------------------------------------------------

GQLParser::LetStatementContext::LetStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::LetStatementContext::LET() {
  return getToken(GQLParser::LET, 0);
}

GQLParser::LetVariableDefinitionListContext* GQLParser::LetStatementContext::letVariableDefinitionList() {
  return getRuleContext<GQLParser::LetVariableDefinitionListContext>(0);
}


size_t GQLParser::LetStatementContext::getRuleIndex() const {
  return GQLParser::RuleLetStatement;
}


std::any GQLParser::LetStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLetStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LetStatementContext* GQLParser::letStatement() {
  LetStatementContext *_localctx = _tracker.createInstance<LetStatementContext>(_ctx, getState());
  enterRule(_localctx, 340, GQLParser::RuleLetStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1934);
    match(GQLParser::LET);
    setState(1935);
    letVariableDefinitionList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LetVariableDefinitionListContext ------------------------------------------------------------------

GQLParser::LetVariableDefinitionListContext::LetVariableDefinitionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::LetVariableDefinitionContext *> GQLParser::LetVariableDefinitionListContext::letVariableDefinition() {
  return getRuleContexts<GQLParser::LetVariableDefinitionContext>();
}

GQLParser::LetVariableDefinitionContext* GQLParser::LetVariableDefinitionListContext::letVariableDefinition(size_t i) {
  return getRuleContext<GQLParser::LetVariableDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::LetVariableDefinitionListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::LetVariableDefinitionListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::LetVariableDefinitionListContext::getRuleIndex() const {
  return GQLParser::RuleLetVariableDefinitionList;
}


std::any GQLParser::LetVariableDefinitionListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLetVariableDefinitionList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LetVariableDefinitionListContext* GQLParser::letVariableDefinitionList() {
  LetVariableDefinitionListContext *_localctx = _tracker.createInstance<LetVariableDefinitionListContext>(_ctx, getState());
  enterRule(_localctx, 342, GQLParser::RuleLetVariableDefinitionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1937);
    letVariableDefinition();
    setState(1942);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(1938);
      match(GQLParser::COMMA);
      setState(1939);
      letVariableDefinition();
      setState(1944);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LetVariableDefinitionContext ------------------------------------------------------------------

GQLParser::LetVariableDefinitionContext::LetVariableDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueVariableDefinitionContext* GQLParser::LetVariableDefinitionContext::valueVariableDefinition() {
  return getRuleContext<GQLParser::ValueVariableDefinitionContext>(0);
}

GQLParser::ValueVariableContext* GQLParser::LetVariableDefinitionContext::valueVariable() {
  return getRuleContext<GQLParser::ValueVariableContext>(0);
}

tree::TerminalNode* GQLParser::LetVariableDefinitionContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}

GQLParser::ExpressionContext* GQLParser::LetVariableDefinitionContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}


size_t GQLParser::LetVariableDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleLetVariableDefinition;
}


std::any GQLParser::LetVariableDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLetVariableDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LetVariableDefinitionContext* GQLParser::letVariableDefinition() {
  LetVariableDefinitionContext *_localctx = _tracker.createInstance<LetVariableDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 344, GQLParser::RuleLetVariableDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1950);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1945);
      valueVariableDefinition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1946);
      valueVariable();
      setState(1947);
      match(GQLParser::EQUALS_OPERATOR);
      setState(1948);
      expression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementContext ------------------------------------------------------------------

GQLParser::ForStatementContext::ForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ForStatementContext::FOR() {
  return getToken(GQLParser::FOR, 0);
}

GQLParser::ForItemContext* GQLParser::ForStatementContext::forItem() {
  return getRuleContext<GQLParser::ForItemContext>(0);
}

GQLParser::ForOrdinalityOrOffsetContext* GQLParser::ForStatementContext::forOrdinalityOrOffset() {
  return getRuleContext<GQLParser::ForOrdinalityOrOffsetContext>(0);
}


size_t GQLParser::ForStatementContext::getRuleIndex() const {
  return GQLParser::RuleForStatement;
}


std::any GQLParser::ForStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitForStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ForStatementContext* GQLParser::forStatement() {
  ForStatementContext *_localctx = _tracker.createInstance<ForStatementContext>(_ctx, getState());
  enterRule(_localctx, 346, GQLParser::RuleForStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1952);
    match(GQLParser::FOR);
    setState(1953);
    forItem();
    setState(1955);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::WITH) {
      setState(1954);
      forOrdinalityOrOffset();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForItemContext ------------------------------------------------------------------

GQLParser::ForItemContext::ForItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ForItemAliasContext* GQLParser::ForItemContext::forItemAlias() {
  return getRuleContext<GQLParser::ForItemAliasContext>(0);
}

GQLParser::ExpressionAtomContext* GQLParser::ForItemContext::expressionAtom() {
  return getRuleContext<GQLParser::ExpressionAtomContext>(0);
}


size_t GQLParser::ForItemContext::getRuleIndex() const {
  return GQLParser::RuleForItem;
}


std::any GQLParser::ForItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitForItem(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ForItemContext* GQLParser::forItem() {
  ForItemContext *_localctx = _tracker.createInstance<ForItemContext>(_ctx, getState());
  enterRule(_localctx, 348, GQLParser::RuleForItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1957);
    forItemAlias();
    setState(1958);
    expressionAtom(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForItemAliasContext ------------------------------------------------------------------

GQLParser::ForItemAliasContext::ForItemAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::ForItemAliasContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}

tree::TerminalNode* GQLParser::ForItemAliasContext::IN() {
  return getToken(GQLParser::IN, 0);
}


size_t GQLParser::ForItemAliasContext::getRuleIndex() const {
  return GQLParser::RuleForItemAlias;
}


std::any GQLParser::ForItemAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitForItemAlias(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ForItemAliasContext* GQLParser::forItemAlias() {
  ForItemAliasContext *_localctx = _tracker.createInstance<ForItemAliasContext>(_ctx, getState());
  enterRule(_localctx, 350, GQLParser::RuleForItemAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1960);
    identifier();
    setState(1961);
    match(GQLParser::IN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForOrdinalityOrOffsetContext ------------------------------------------------------------------

GQLParser::ForOrdinalityOrOffsetContext::ForOrdinalityOrOffsetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ForOrdinalityOrOffsetContext::WITH() {
  return getToken(GQLParser::WITH, 0);
}

GQLParser::IdentifierContext* GQLParser::ForOrdinalityOrOffsetContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}

tree::TerminalNode* GQLParser::ForOrdinalityOrOffsetContext::ORDINALITY() {
  return getToken(GQLParser::ORDINALITY, 0);
}

tree::TerminalNode* GQLParser::ForOrdinalityOrOffsetContext::OFFSET() {
  return getToken(GQLParser::OFFSET, 0);
}


size_t GQLParser::ForOrdinalityOrOffsetContext::getRuleIndex() const {
  return GQLParser::RuleForOrdinalityOrOffset;
}


std::any GQLParser::ForOrdinalityOrOffsetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitForOrdinalityOrOffset(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ForOrdinalityOrOffsetContext* GQLParser::forOrdinalityOrOffset() {
  ForOrdinalityOrOffsetContext *_localctx = _tracker.createInstance<ForOrdinalityOrOffsetContext>(_ctx, getState());
  enterRule(_localctx, 352, GQLParser::RuleForOrdinalityOrOffset);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1963);
    match(GQLParser::WITH);
    setState(1964);
    _la = _input->LA(1);
    if (!(_la == GQLParser::OFFSET

    || _la == GQLParser::ORDINALITY)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1965);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderByAndPageStatementContext ------------------------------------------------------------------

GQLParser::OrderByAndPageStatementContext::OrderByAndPageStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::OrderByClauseContext* GQLParser::OrderByAndPageStatementContext::orderByClause() {
  return getRuleContext<GQLParser::OrderByClauseContext>(0);
}

GQLParser::OffsetClauseContext* GQLParser::OrderByAndPageStatementContext::offsetClause() {
  return getRuleContext<GQLParser::OffsetClauseContext>(0);
}

GQLParser::LimitClauseContext* GQLParser::OrderByAndPageStatementContext::limitClause() {
  return getRuleContext<GQLParser::LimitClauseContext>(0);
}


size_t GQLParser::OrderByAndPageStatementContext::getRuleIndex() const {
  return GQLParser::RuleOrderByAndPageStatement;
}


std::any GQLParser::OrderByAndPageStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderByAndPageStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::OrderByAndPageStatementContext* GQLParser::orderByAndPageStatement() {
  OrderByAndPageStatementContext *_localctx = _tracker.createInstance<OrderByAndPageStatementContext>(_ctx, getState());
  enterRule(_localctx, 354, GQLParser::RuleOrderByAndPageStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1979);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ORDER: {
        enterOuterAlt(_localctx, 1);
        setState(1967);
        orderByClause();
        setState(1969);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
        case 1: {
          setState(1968);
          offsetClause();
          break;
        }

        default:
          break;
        }
        setState(1972);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
        case 1: {
          setState(1971);
          limitClause();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::OFFSET:
      case GQLParser::SKIP_: {
        enterOuterAlt(_localctx, 2);
        setState(1974);
        offsetClause();
        setState(1976);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx)) {
        case 1: {
          setState(1975);
          limitClause();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::LIMIT: {
        enterOuterAlt(_localctx, 3);
        setState(1978);
        limitClause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimitiveResultStatementContext ------------------------------------------------------------------

GQLParser::PrimitiveResultStatementContext::PrimitiveResultStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ReturnStatementContext* GQLParser::PrimitiveResultStatementContext::returnStatement() {
  return getRuleContext<GQLParser::ReturnStatementContext>(0);
}

GQLParser::OrderByAndPageStatementContext* GQLParser::PrimitiveResultStatementContext::orderByAndPageStatement() {
  return getRuleContext<GQLParser::OrderByAndPageStatementContext>(0);
}

tree::TerminalNode* GQLParser::PrimitiveResultStatementContext::FINISH() {
  return getToken(GQLParser::FINISH, 0);
}


size_t GQLParser::PrimitiveResultStatementContext::getRuleIndex() const {
  return GQLParser::RulePrimitiveResultStatement;
}


std::any GQLParser::PrimitiveResultStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPrimitiveResultStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PrimitiveResultStatementContext* GQLParser::primitiveResultStatement() {
  PrimitiveResultStatementContext *_localctx = _tracker.createInstance<PrimitiveResultStatementContext>(_ctx, getState());
  enterRule(_localctx, 356, GQLParser::RulePrimitiveResultStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1986);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::RETURN: {
        enterOuterAlt(_localctx, 1);
        setState(1981);
        returnStatement();
        setState(1983);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
        case 1: {
          setState(1982);
          orderByAndPageStatement();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::FINISH: {
        enterOuterAlt(_localctx, 2);
        setState(1985);
        match(GQLParser::FINISH);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStatementContext ------------------------------------------------------------------

GQLParser::ReturnStatementContext::ReturnStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ReturnStatementContext::RETURN() {
  return getToken(GQLParser::RETURN, 0);
}

GQLParser::ReturnStatementBodyContext* GQLParser::ReturnStatementContext::returnStatementBody() {
  return getRuleContext<GQLParser::ReturnStatementBodyContext>(0);
}


size_t GQLParser::ReturnStatementContext::getRuleIndex() const {
  return GQLParser::RuleReturnStatement;
}


std::any GQLParser::ReturnStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitReturnStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ReturnStatementContext* GQLParser::returnStatement() {
  ReturnStatementContext *_localctx = _tracker.createInstance<ReturnStatementContext>(_ctx, getState());
  enterRule(_localctx, 358, GQLParser::RuleReturnStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1988);
    match(GQLParser::RETURN);
    setState(1989);
    returnStatementBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStatementBodyContext ------------------------------------------------------------------

GQLParser::ReturnStatementBodyContext::ReturnStatementBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ReturnStatementBodyContext::ASTERISK() {
  return getToken(GQLParser::ASTERISK, 0);
}

GQLParser::ReturnItemListContext* GQLParser::ReturnStatementBodyContext::returnItemList() {
  return getRuleContext<GQLParser::ReturnItemListContext>(0);
}

GQLParser::SetQuantifierContext* GQLParser::ReturnStatementBodyContext::setQuantifier() {
  return getRuleContext<GQLParser::SetQuantifierContext>(0);
}

GQLParser::GroupByClauseContext* GQLParser::ReturnStatementBodyContext::groupByClause() {
  return getRuleContext<GQLParser::GroupByClauseContext>(0);
}

tree::TerminalNode* GQLParser::ReturnStatementBodyContext::NO() {
  return getToken(GQLParser::NO, 0);
}

tree::TerminalNode* GQLParser::ReturnStatementBodyContext::BINDINGS() {
  return getToken(GQLParser::BINDINGS, 0);
}


size_t GQLParser::ReturnStatementBodyContext::getRuleIndex() const {
  return GQLParser::RuleReturnStatementBody;
}


std::any GQLParser::ReturnStatementBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitReturnStatementBody(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ReturnStatementBodyContext* GQLParser::returnStatementBody() {
  ReturnStatementBodyContext *_localctx = _tracker.createInstance<ReturnStatementBodyContext>(_ctx, getState());
  enterRule(_localctx, 360, GQLParser::RuleReturnStatementBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2003);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1992);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx)) {
      case 1: {
        setState(1991);
        setQuantifier();
        break;
      }

      default:
        break;
      }
      setState(1996);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case GQLParser::ASTERISK: {
          setState(1994);
          match(GQLParser::ASTERISK);
          break;
        }

        case GQLParser::DOLLAR_SIGN:
        case GQLParser::EXCLAMATION_MARK:
        case GQLParser::LEFT_BRACE:
        case GQLParser::LEFT_BRACKET:
        case GQLParser::LEFT_PAREN:
        case GQLParser::MINUS_SIGN:
        case GQLParser::PLUS_SIGN:
        case GQLParser::ABS:
        case GQLParser::ACOS:
        case GQLParser::ACYCLIC:
        case GQLParser::ALL:
        case GQLParser::ALL_DIFFERENT:
        case GQLParser::AND:
        case GQLParser::ANY:
        case GQLParser::ARRAY:
        case GQLParser::AS:
        case GQLParser::ASC:
        case GQLParser::ASCENDING:
        case GQLParser::ASIN:
        case GQLParser::AT:
        case GQLParser::ATAN:
        case GQLParser::AVG:
        case GQLParser::BIG:
        case GQLParser::BIGINT:
        case GQLParser::BINARY:
        case GQLParser::BINDING:
        case GQLParser::BINDINGS:
        case GQLParser::BOOL:
        case GQLParser::BOOLEAN:
        case GQLParser::BOTH:
        case GQLParser::BTRIM:
        case GQLParser::BY:
        case GQLParser::BYTE_LENGTH:
        case GQLParser::BYTES:
        case GQLParser::CALL:
        case GQLParser::CASE:
        case GQLParser::CAST:
        case GQLParser::CEIL:
        case GQLParser::CEILING:
        case GQLParser::CHAR_LENGTH:
        case GQLParser::CHARACTER_LENGTH:
        case GQLParser::CHARACTERISTICS:
        case GQLParser::CLOSE:
        case GQLParser::COALESCE:
        case GQLParser::COLLECT:
        case GQLParser::COMMIT:
        case GQLParser::CONNECTING:
        case GQLParser::COPY:
        case GQLParser::COS:
        case GQLParser::COSH:
        case GQLParser::COT:
        case GQLParser::COUNT:
        case GQLParser::CREATE:
        case GQLParser::CURRENT_DATE:
        case GQLParser::CURRENT_GRAPH:
        case GQLParser::CURRENT_PROPERTY_GRAPH:
        case GQLParser::CURRENT_SCHEMA:
        case GQLParser::CURRENT_TIME:
        case GQLParser::CURRENT_TIMESTAMP:
        case GQLParser::CURRENT_USER:
        case GQLParser::DATE:
        case GQLParser::DATETIME:
        case GQLParser::DEC:
        case GQLParser::DECIMAL:
        case GQLParser::DEGREES:
        case GQLParser::DELETE:
        case GQLParser::DESC:
        case GQLParser::DESCENDING:
        case GQLParser::DESTINATION:
        case GQLParser::DETACH:
        case GQLParser::DIFFERENT:
        case GQLParser::DIRECTED:
        case GQLParser::DISTINCT:
        case GQLParser::DOUBLE:
        case GQLParser::DROP:
        case GQLParser::DURATION:
        case GQLParser::DURATION_BETWEEN:
        case GQLParser::ELEMENT:
        case GQLParser::ELEMENT_ID:
        case GQLParser::ELEMENTS:
        case GQLParser::ELSE:
        case GQLParser::END:
        case GQLParser::EXCEPT:
        case GQLParser::EXISTS:
        case GQLParser::EXP:
        case GQLParser::K_FALSE:
        case GQLParser::FILTER:
        case GQLParser::FINISH:
        case GQLParser::FIRST:
        case GQLParser::FLOAT:
        case GQLParser::FLOAT128:
        case GQLParser::FLOAT16:
        case GQLParser::FLOAT256:
        case GQLParser::FLOAT32:
        case GQLParser::FLOAT64:
        case GQLParser::FLOOR:
        case GQLParser::FOR:
        case GQLParser::FROM:
        case GQLParser::GRAPH:
        case GQLParser::GROUP:
        case GQLParser::GROUPS:
        case GQLParser::HAVING:
        case GQLParser::HOME_GRAPH:
        case GQLParser::HOME_PROPERTY_GRAPH:
        case GQLParser::HOME_SCHEMA:
        case GQLParser::I_DONT_KNOW_1:
        case GQLParser::I_DONT_KNOW_2:
        case GQLParser::I_DONT_KNOW_3:
        case GQLParser::I_DONT_KNOW_4:
        case GQLParser::I_DONT_KNOW_5:
        case GQLParser::IF:
        case GQLParser::IN:
        case GQLParser::INSERT:
        case GQLParser::INT:
        case GQLParser::INT8:
        case GQLParser::INT16:
        case GQLParser::INT32:
        case GQLParser::INT64:
        case GQLParser::INT128:
        case GQLParser::INT256:
        case GQLParser::INTEGER:
        case GQLParser::INTEGER8:
        case GQLParser::INTEGER16:
        case GQLParser::INTEGER32:
        case GQLParser::INTEGER64:
        case GQLParser::INTEGER128:
        case GQLParser::INTEGER256:
        case GQLParser::INTERSECT:
        case GQLParser::IS:
        case GQLParser::KEEP:
        case GQLParser::LABEL:
        case GQLParser::LABELED:
        case GQLParser::LABELS:
        case GQLParser::LAST:
        case GQLParser::LEADING:
        case GQLParser::LEFT:
        case GQLParser::LET:
        case GQLParser::LIKE:
        case GQLParser::LIMIT:
        case GQLParser::LIST:
        case GQLParser::LN:
        case GQLParser::LOCAL:
        case GQLParser::LOCAL_DATETIME:
        case GQLParser::LOCAL_TIME:
        case GQLParser::LOCAL_TIMESTAMP:
        case GQLParser::LOG:
        case GQLParser::LOG10:
        case GQLParser::LOWER:
        case GQLParser::LTRIM:
        case GQLParser::MATCH:
        case GQLParser::MAX:
        case GQLParser::MIN:
        case GQLParser::MOD:
        case GQLParser::NEXT:
        case GQLParser::NFC:
        case GQLParser::NFD:
        case GQLParser::NFKC:
        case GQLParser::NFKD:
        case GQLParser::NO:
        case GQLParser::NODETACH:
        case GQLParser::NORMALIZE:
        case GQLParser::NORMALIZED:
        case GQLParser::NOT:
        case GQLParser::NULL_:
        case GQLParser::NULLIF:
        case GQLParser::NULLS:
        case GQLParser::OCTET_LENGTH:
        case GQLParser::OF:
        case GQLParser::OFFSET:
        case GQLParser::SKIP_:
        case GQLParser::ONLY:
        case GQLParser::OPEN:
        case GQLParser::OPTIONAL:
        case GQLParser::OR:
        case GQLParser::ORDER:
        case GQLParser::ORDINALITY:
        case GQLParser::OTHERWISE:
        case GQLParser::PARAMETER:
        case GQLParser::PARAMETERS:
        case GQLParser::PATH:
        case GQLParser::PATH_LENGTH:
        case GQLParser::PATHS:
        case GQLParser::PERCENTILE_CONT:
        case GQLParser::PERCENTILE_DISC:
        case GQLParser::POWER:
        case GQLParser::PRECISION:
        case GQLParser::PROJECT:
        case GQLParser::PROPERTY:
        case GQLParser::PROPERTY_EXISTS:
        case GQLParser::RADIANS:
        case GQLParser::READ:
        case GQLParser::REAL:
        case GQLParser::RECORD:
        case GQLParser::REMOVE:
        case GQLParser::REPEATABLE:
        case GQLParser::REPLACE:
        case GQLParser::RESET:
        case GQLParser::RETURN:
        case GQLParser::ROLLBACK:
        case GQLParser::RTRIM:
        case GQLParser::RIGHT:
        case GQLParser::SAME:
        case GQLParser::SCHEMA:
        case GQLParser::SELECT:
        case GQLParser::SESSION:
        case GQLParser::SET:
        case GQLParser::SHORTEST:
        case GQLParser::SIGNED:
        case GQLParser::SIMPLE:
        case GQLParser::SIN:
        case GQLParser::SINH:
        case GQLParser::SMALL:
        case GQLParser::SMALLINT:
        case GQLParser::SOURCE:
        case GQLParser::SQRT:
        case GQLParser::START:
        case GQLParser::STDDEV_POP:
        case GQLParser::STDDEV_SAMP:
        case GQLParser::STRING:
        case GQLParser::SUM:
        case GQLParser::TABLE:
        case GQLParser::TAN:
        case GQLParser::TANH:
        case GQLParser::TEMP:
        case GQLParser::THEN:
        case GQLParser::TIME:
        case GQLParser::TIMESTAMP:
        case GQLParser::TIMEZONE:
        case GQLParser::TO:
        case GQLParser::TRAIL:
        case GQLParser::TRAILING:
        case GQLParser::TRANSACTION:
        case GQLParser::TRIM:
        case GQLParser::K_TRUE:
        case GQLParser::TYPE:
        case GQLParser::TYPED:
        case GQLParser::UBIGINT:
        case GQLParser::UINT:
        case GQLParser::UINT128:
        case GQLParser::UINT16:
        case GQLParser::UINT256:
        case GQLParser::UINT32:
        case GQLParser::UINT64:
        case GQLParser::UINT8:
        case GQLParser::UNDIRECTED:
        case GQLParser::UNION:
        case GQLParser::UNKNOWN:
        case GQLParser::UNSIGNED:
        case GQLParser::UPPER:
        case GQLParser::USE:
        case GQLParser::USMALLINT:
        case GQLParser::VALUE:
        case GQLParser::VARBINARY:
        case GQLParser::VARCHAR:
        case GQLParser::VARIABLE:
        case GQLParser::WALK:
        case GQLParser::WHEN:
        case GQLParser::WHERE:
        case GQLParser::WITH:
        case GQLParser::WITHOUT:
        case GQLParser::WRITE:
        case GQLParser::XOR:
        case GQLParser::YIELD:
        case GQLParser::ZONE:
        case GQLParser::ZONED:
        case GQLParser::ZONED_DATETIME:
        case GQLParser::ZONED_TIME:
        case GQLParser::INTERVAL_DAY:
        case GQLParser::INTERVAL_WEEK:
        case GQLParser::INTERVAL_MONTH:
        case GQLParser::INTERVAL_YEAR:
        case GQLParser::EDGE_SYNONYM:
        case GQLParser::EDGES_SYNONYM:
        case GQLParser::NODE_SYNONYM:
        case GQLParser::KEY_WORD:
        case GQLParser::PRE_RESERVED_WORD:
        case GQLParser::UNSIGNED_DECIMAL_INTEGER:
        case GQLParser::UNSIGNED_HEXADECIMAL_INTEGER:
        case GQLParser::UNSIGNED_OCTAL_INTEGER:
        case GQLParser::UNSIGNED_BINARY_INTEGER:
        case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION:
        case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION:
        case GQLParser::SINGLE_QUOTED_STRING_LITERAL:
        case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
        case GQLParser::ACCENT_QUOTED_STRING_LITERAL:
        case GQLParser::BYTE_STRING_LITERAL:
        case GQLParser::REGULAR_IDENTIFIER: {
          setState(1995);
          returnItemList();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1999);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx)) {
      case 1: {
        setState(1998);
        groupByClause();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2001);
      match(GQLParser::NO);
      setState(2002);
      match(GQLParser::BINDINGS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnItemListContext ------------------------------------------------------------------

GQLParser::ReturnItemListContext::ReturnItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::ReturnItemContext *> GQLParser::ReturnItemListContext::returnItem() {
  return getRuleContexts<GQLParser::ReturnItemContext>();
}

GQLParser::ReturnItemContext* GQLParser::ReturnItemListContext::returnItem(size_t i) {
  return getRuleContext<GQLParser::ReturnItemContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::ReturnItemListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::ReturnItemListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::ReturnItemListContext::getRuleIndex() const {
  return GQLParser::RuleReturnItemList;
}


std::any GQLParser::ReturnItemListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitReturnItemList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ReturnItemListContext* GQLParser::returnItemList() {
  ReturnItemListContext *_localctx = _tracker.createInstance<ReturnItemListContext>(_ctx, getState());
  enterRule(_localctx, 362, GQLParser::RuleReturnItemList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2005);
    returnItem();
    setState(2010);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2006);
        match(GQLParser::COMMA);
        setState(2007);
        returnItem(); 
      }
      setState(2012);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnItemContext ------------------------------------------------------------------

GQLParser::ReturnItemContext::ReturnItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ExpressionContext* GQLParser::ReturnItemContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}

GQLParser::ReturnItemAliasContext* GQLParser::ReturnItemContext::returnItemAlias() {
  return getRuleContext<GQLParser::ReturnItemAliasContext>(0);
}


size_t GQLParser::ReturnItemContext::getRuleIndex() const {
  return GQLParser::RuleReturnItem;
}


std::any GQLParser::ReturnItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitReturnItem(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ReturnItemContext* GQLParser::returnItem() {
  ReturnItemContext *_localctx = _tracker.createInstance<ReturnItemContext>(_ctx, getState());
  enterRule(_localctx, 364, GQLParser::RuleReturnItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2013);
    expression(0);
    setState(2015);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx)) {
    case 1: {
      setState(2014);
      returnItemAlias();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnItemAliasContext ------------------------------------------------------------------

GQLParser::ReturnItemAliasContext::ReturnItemAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ReturnItemAliasContext::AS() {
  return getToken(GQLParser::AS, 0);
}

GQLParser::IdentifierContext* GQLParser::ReturnItemAliasContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::ReturnItemAliasContext::getRuleIndex() const {
  return GQLParser::RuleReturnItemAlias;
}


std::any GQLParser::ReturnItemAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitReturnItemAlias(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ReturnItemAliasContext* GQLParser::returnItemAlias() {
  ReturnItemAliasContext *_localctx = _tracker.createInstance<ReturnItemAliasContext>(_ctx, getState());
  enterRule(_localctx, 366, GQLParser::RuleReturnItemAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2017);
    match(GQLParser::AS);
    setState(2018);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectStatementContext ------------------------------------------------------------------

GQLParser::SelectStatementContext::SelectStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SelectStatementContext::SELECT() {
  return getToken(GQLParser::SELECT, 0);
}

tree::TerminalNode* GQLParser::SelectStatementContext::ASTERISK() {
  return getToken(GQLParser::ASTERISK, 0);
}

GQLParser::SelectItemListContext* GQLParser::SelectStatementContext::selectItemList() {
  return getRuleContext<GQLParser::SelectItemListContext>(0);
}

GQLParser::SetQuantifierContext* GQLParser::SelectStatementContext::setQuantifier() {
  return getRuleContext<GQLParser::SetQuantifierContext>(0);
}

GQLParser::SelectStatementBodyContext* GQLParser::SelectStatementContext::selectStatementBody() {
  return getRuleContext<GQLParser::SelectStatementBodyContext>(0);
}

GQLParser::WhereClauseContext* GQLParser::SelectStatementContext::whereClause() {
  return getRuleContext<GQLParser::WhereClauseContext>(0);
}

GQLParser::GroupByClauseContext* GQLParser::SelectStatementContext::groupByClause() {
  return getRuleContext<GQLParser::GroupByClauseContext>(0);
}

GQLParser::HavingClauseContext* GQLParser::SelectStatementContext::havingClause() {
  return getRuleContext<GQLParser::HavingClauseContext>(0);
}

GQLParser::OrderByClauseContext* GQLParser::SelectStatementContext::orderByClause() {
  return getRuleContext<GQLParser::OrderByClauseContext>(0);
}

GQLParser::OffsetClauseContext* GQLParser::SelectStatementContext::offsetClause() {
  return getRuleContext<GQLParser::OffsetClauseContext>(0);
}

GQLParser::LimitClauseContext* GQLParser::SelectStatementContext::limitClause() {
  return getRuleContext<GQLParser::LimitClauseContext>(0);
}


size_t GQLParser::SelectStatementContext::getRuleIndex() const {
  return GQLParser::RuleSelectStatement;
}


std::any GQLParser::SelectStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SelectStatementContext* GQLParser::selectStatement() {
  SelectStatementContext *_localctx = _tracker.createInstance<SelectStatementContext>(_ctx, getState());
  enterRule(_localctx, 368, GQLParser::RuleSelectStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2020);
    match(GQLParser::SELECT);
    setState(2022);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
    case 1: {
      setState(2021);
      setQuantifier();
      break;
    }

    default:
      break;
    }
    setState(2026);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ASTERISK: {
        setState(2024);
        match(GQLParser::ASTERISK);
        break;
      }

      case GQLParser::DOLLAR_SIGN:
      case GQLParser::EXCLAMATION_MARK:
      case GQLParser::LEFT_BRACE:
      case GQLParser::LEFT_BRACKET:
      case GQLParser::LEFT_PAREN:
      case GQLParser::MINUS_SIGN:
      case GQLParser::PLUS_SIGN:
      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ACYCLIC:
      case GQLParser::ALL:
      case GQLParser::ALL_DIFFERENT:
      case GQLParser::AND:
      case GQLParser::ANY:
      case GQLParser::ARRAY:
      case GQLParser::AS:
      case GQLParser::ASC:
      case GQLParser::ASCENDING:
      case GQLParser::ASIN:
      case GQLParser::AT:
      case GQLParser::ATAN:
      case GQLParser::AVG:
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::BINARY:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::BOOL:
      case GQLParser::BOOLEAN:
      case GQLParser::BOTH:
      case GQLParser::BTRIM:
      case GQLParser::BY:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::BYTES:
      case GQLParser::CALL:
      case GQLParser::CASE:
      case GQLParser::CAST:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::CHARACTERISTICS:
      case GQLParser::CLOSE:
      case GQLParser::COALESCE:
      case GQLParser::COLLECT:
      case GQLParser::COMMIT:
      case GQLParser::CONNECTING:
      case GQLParser::COPY:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::COUNT:
      case GQLParser::CREATE:
      case GQLParser::CURRENT_DATE:
      case GQLParser::CURRENT_GRAPH:
      case GQLParser::CURRENT_PROPERTY_GRAPH:
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::CURRENT_TIME:
      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::CURRENT_USER:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DEC:
      case GQLParser::DECIMAL:
      case GQLParser::DEGREES:
      case GQLParser::DELETE:
      case GQLParser::DESC:
      case GQLParser::DESCENDING:
      case GQLParser::DESTINATION:
      case GQLParser::DETACH:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::DISTINCT:
      case GQLParser::DOUBLE:
      case GQLParser::DROP:
      case GQLParser::DURATION:
      case GQLParser::DURATION_BETWEEN:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENT_ID:
      case GQLParser::ELEMENTS:
      case GQLParser::ELSE:
      case GQLParser::END:
      case GQLParser::EXCEPT:
      case GQLParser::EXISTS:
      case GQLParser::EXP:
      case GQLParser::K_FALSE:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FIRST:
      case GQLParser::FLOAT:
      case GQLParser::FLOAT128:
      case GQLParser::FLOAT16:
      case GQLParser::FLOAT256:
      case GQLParser::FLOAT32:
      case GQLParser::FLOAT64:
      case GQLParser::FLOOR:
      case GQLParser::FOR:
      case GQLParser::FROM:
      case GQLParser::GRAPH:
      case GQLParser::GROUP:
      case GQLParser::GROUPS:
      case GQLParser::HAVING:
      case GQLParser::HOME_GRAPH:
      case GQLParser::HOME_PROPERTY_GRAPH:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::I_DONT_KNOW_1:
      case GQLParser::I_DONT_KNOW_2:
      case GQLParser::I_DONT_KNOW_3:
      case GQLParser::I_DONT_KNOW_4:
      case GQLParser::I_DONT_KNOW_5:
      case GQLParser::IF:
      case GQLParser::IN:
      case GQLParser::INSERT:
      case GQLParser::INT:
      case GQLParser::INT8:
      case GQLParser::INT16:
      case GQLParser::INT32:
      case GQLParser::INT64:
      case GQLParser::INT128:
      case GQLParser::INT256:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::INTERSECT:
      case GQLParser::IS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::LEADING:
      case GQLParser::LEFT:
      case GQLParser::LET:
      case GQLParser::LIKE:
      case GQLParser::LIMIT:
      case GQLParser::LIST:
      case GQLParser::LN:
      case GQLParser::LOCAL:
      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIME:
      case GQLParser::LOCAL_TIMESTAMP:
      case GQLParser::LOG:
      case GQLParser::LOG10:
      case GQLParser::LOWER:
      case GQLParser::LTRIM:
      case GQLParser::MATCH:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::MOD:
      case GQLParser::NEXT:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODETACH:
      case GQLParser::NORMALIZE:
      case GQLParser::NORMALIZED:
      case GQLParser::NOT:
      case GQLParser::NULL_:
      case GQLParser::NULLIF:
      case GQLParser::NULLS:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::OF:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::ONLY:
      case GQLParser::OPEN:
      case GQLParser::OPTIONAL:
      case GQLParser::OR:
      case GQLParser::ORDER:
      case GQLParser::ORDINALITY:
      case GQLParser::OTHERWISE:
      case GQLParser::PARAMETER:
      case GQLParser::PARAMETERS:
      case GQLParser::PATH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::PATHS:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::POWER:
      case GQLParser::PRECISION:
      case GQLParser::PROJECT:
      case GQLParser::PROPERTY:
      case GQLParser::PROPERTY_EXISTS:
      case GQLParser::RADIANS:
      case GQLParser::READ:
      case GQLParser::REAL:
      case GQLParser::RECORD:
      case GQLParser::REMOVE:
      case GQLParser::REPEATABLE:
      case GQLParser::REPLACE:
      case GQLParser::RESET:
      case GQLParser::RETURN:
      case GQLParser::ROLLBACK:
      case GQLParser::RTRIM:
      case GQLParser::RIGHT:
      case GQLParser::SAME:
      case GQLParser::SCHEMA:
      case GQLParser::SELECT:
      case GQLParser::SESSION:
      case GQLParser::SET:
      case GQLParser::SHORTEST:
      case GQLParser::SIGNED:
      case GQLParser::SIMPLE:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::SOURCE:
      case GQLParser::SQRT:
      case GQLParser::START:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::STRING:
      case GQLParser::SUM:
      case GQLParser::TABLE:
      case GQLParser::TAN:
      case GQLParser::TANH:
      case GQLParser::TEMP:
      case GQLParser::THEN:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::TIMEZONE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRAILING:
      case GQLParser::TRANSACTION:
      case GQLParser::TRIM:
      case GQLParser::K_TRUE:
      case GQLParser::TYPE:
      case GQLParser::TYPED:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT128:
      case GQLParser::UINT16:
      case GQLParser::UINT256:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT8:
      case GQLParser::UNDIRECTED:
      case GQLParser::UNION:
      case GQLParser::UNKNOWN:
      case GQLParser::UNSIGNED:
      case GQLParser::UPPER:
      case GQLParser::USE:
      case GQLParser::USMALLINT:
      case GQLParser::VALUE:
      case GQLParser::VARBINARY:
      case GQLParser::VARCHAR:
      case GQLParser::VARIABLE:
      case GQLParser::WALK:
      case GQLParser::WHEN:
      case GQLParser::WHERE:
      case GQLParser::WITH:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::XOR:
      case GQLParser::YIELD:
      case GQLParser::ZONE:
      case GQLParser::ZONED:
      case GQLParser::ZONED_DATETIME:
      case GQLParser::ZONED_TIME:
      case GQLParser::INTERVAL_DAY:
      case GQLParser::INTERVAL_WEEK:
      case GQLParser::INTERVAL_MONTH:
      case GQLParser::INTERVAL_YEAR:
      case GQLParser::EDGE_SYNONYM:
      case GQLParser::EDGES_SYNONYM:
      case GQLParser::NODE_SYNONYM:
      case GQLParser::KEY_WORD:
      case GQLParser::PRE_RESERVED_WORD:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER:
      case GQLParser::UNSIGNED_HEXADECIMAL_INTEGER:
      case GQLParser::UNSIGNED_OCTAL_INTEGER:
      case GQLParser::UNSIGNED_BINARY_INTEGER:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION:
      case GQLParser::SINGLE_QUOTED_STRING_LITERAL:
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL:
      case GQLParser::BYTE_STRING_LITERAL:
      case GQLParser::REGULAR_IDENTIFIER: {
        setState(2025);
        selectItemList();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2047);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx)) {
    case 1: {
      setState(2028);
      selectStatementBody();
      setState(2030);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx)) {
      case 1: {
        setState(2029);
        whereClause();
        break;
      }

      default:
        break;
      }
      setState(2033);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx)) {
      case 1: {
        setState(2032);
        groupByClause();
        break;
      }

      default:
        break;
      }
      setState(2036);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
      case 1: {
        setState(2035);
        havingClause();
        break;
      }

      default:
        break;
      }
      setState(2039);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx)) {
      case 1: {
        setState(2038);
        orderByClause();
        break;
      }

      default:
        break;
      }
      setState(2042);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx)) {
      case 1: {
        setState(2041);
        offsetClause();
        break;
      }

      default:
        break;
      }
      setState(2045);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
      case 1: {
        setState(2044);
        limitClause();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectItemListContext ------------------------------------------------------------------

GQLParser::SelectItemListContext::SelectItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SelectItemContext *> GQLParser::SelectItemListContext::selectItem() {
  return getRuleContexts<GQLParser::SelectItemContext>();
}

GQLParser::SelectItemContext* GQLParser::SelectItemListContext::selectItem(size_t i) {
  return getRuleContext<GQLParser::SelectItemContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SelectItemListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::SelectItemListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::SelectItemListContext::getRuleIndex() const {
  return GQLParser::RuleSelectItemList;
}


std::any GQLParser::SelectItemListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectItemList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SelectItemListContext* GQLParser::selectItemList() {
  SelectItemListContext *_localctx = _tracker.createInstance<SelectItemListContext>(_ctx, getState());
  enterRule(_localctx, 370, GQLParser::RuleSelectItemList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2049);
    selectItem();
    setState(2054);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2050);
        match(GQLParser::COMMA);
        setState(2051);
        selectItem(); 
      }
      setState(2056);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectItemContext ------------------------------------------------------------------

GQLParser::SelectItemContext::SelectItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ExpressionContext* GQLParser::SelectItemContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}

GQLParser::SelectItemAliasContext* GQLParser::SelectItemContext::selectItemAlias() {
  return getRuleContext<GQLParser::SelectItemAliasContext>(0);
}


size_t GQLParser::SelectItemContext::getRuleIndex() const {
  return GQLParser::RuleSelectItem;
}


std::any GQLParser::SelectItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectItem(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SelectItemContext* GQLParser::selectItem() {
  SelectItemContext *_localctx = _tracker.createInstance<SelectItemContext>(_ctx, getState());
  enterRule(_localctx, 372, GQLParser::RuleSelectItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2057);
    expression(0);
    setState(2059);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      setState(2058);
      selectItemAlias();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectItemAliasContext ------------------------------------------------------------------

GQLParser::SelectItemAliasContext::SelectItemAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SelectItemAliasContext::AS() {
  return getToken(GQLParser::AS, 0);
}

GQLParser::IdentifierContext* GQLParser::SelectItemAliasContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::SelectItemAliasContext::getRuleIndex() const {
  return GQLParser::RuleSelectItemAlias;
}


std::any GQLParser::SelectItemAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectItemAlias(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SelectItemAliasContext* GQLParser::selectItemAlias() {
  SelectItemAliasContext *_localctx = _tracker.createInstance<SelectItemAliasContext>(_ctx, getState());
  enterRule(_localctx, 374, GQLParser::RuleSelectItemAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2061);
    match(GQLParser::AS);
    setState(2062);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HavingClauseContext ------------------------------------------------------------------

GQLParser::HavingClauseContext::HavingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::HavingClauseContext::HAVING() {
  return getToken(GQLParser::HAVING, 0);
}

GQLParser::ExpressionContext* GQLParser::HavingClauseContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}


size_t GQLParser::HavingClauseContext::getRuleIndex() const {
  return GQLParser::RuleHavingClause;
}


std::any GQLParser::HavingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitHavingClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::HavingClauseContext* GQLParser::havingClause() {
  HavingClauseContext *_localctx = _tracker.createInstance<HavingClauseContext>(_ctx, getState());
  enterRule(_localctx, 376, GQLParser::RuleHavingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2064);
    match(GQLParser::HAVING);
    setState(2065);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectStatementBodyContext ------------------------------------------------------------------

GQLParser::SelectStatementBodyContext::SelectStatementBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SelectStatementBodyContext::FROM() {
  return getToken(GQLParser::FROM, 0);
}

GQLParser::SelectGraphMatchListContext* GQLParser::SelectStatementBodyContext::selectGraphMatchList() {
  return getRuleContext<GQLParser::SelectGraphMatchListContext>(0);
}

GQLParser::SelectQuerySpecificationContext* GQLParser::SelectStatementBodyContext::selectQuerySpecification() {
  return getRuleContext<GQLParser::SelectQuerySpecificationContext>(0);
}


size_t GQLParser::SelectStatementBodyContext::getRuleIndex() const {
  return GQLParser::RuleSelectStatementBody;
}


std::any GQLParser::SelectStatementBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectStatementBody(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SelectStatementBodyContext* GQLParser::selectStatementBody() {
  SelectStatementBodyContext *_localctx = _tracker.createInstance<SelectStatementBodyContext>(_ctx, getState());
  enterRule(_localctx, 378, GQLParser::RuleSelectStatementBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2071);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2067);
      match(GQLParser::FROM);
      setState(2068);
      selectGraphMatchList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2069);
      match(GQLParser::FROM);
      setState(2070);
      selectQuerySpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectGraphMatchListContext ------------------------------------------------------------------

GQLParser::SelectGraphMatchListContext::SelectGraphMatchListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SelectGraphMatchContext *> GQLParser::SelectGraphMatchListContext::selectGraphMatch() {
  return getRuleContexts<GQLParser::SelectGraphMatchContext>();
}

GQLParser::SelectGraphMatchContext* GQLParser::SelectGraphMatchListContext::selectGraphMatch(size_t i) {
  return getRuleContext<GQLParser::SelectGraphMatchContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SelectGraphMatchListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::SelectGraphMatchListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::SelectGraphMatchListContext::getRuleIndex() const {
  return GQLParser::RuleSelectGraphMatchList;
}


std::any GQLParser::SelectGraphMatchListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectGraphMatchList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SelectGraphMatchListContext* GQLParser::selectGraphMatchList() {
  SelectGraphMatchListContext *_localctx = _tracker.createInstance<SelectGraphMatchListContext>(_ctx, getState());
  enterRule(_localctx, 380, GQLParser::RuleSelectGraphMatchList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2073);
    selectGraphMatch();
    setState(2078);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2074);
        match(GQLParser::COMMA);
        setState(2075);
        selectGraphMatch(); 
      }
      setState(2080);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectGraphMatchContext ------------------------------------------------------------------

GQLParser::SelectGraphMatchContext::SelectGraphMatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphExpressionContext* GQLParser::SelectGraphMatchContext::graphExpression() {
  return getRuleContext<GQLParser::GraphExpressionContext>(0);
}

GQLParser::MatchStatementContext* GQLParser::SelectGraphMatchContext::matchStatement() {
  return getRuleContext<GQLParser::MatchStatementContext>(0);
}


size_t GQLParser::SelectGraphMatchContext::getRuleIndex() const {
  return GQLParser::RuleSelectGraphMatch;
}


std::any GQLParser::SelectGraphMatchContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectGraphMatch(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SelectGraphMatchContext* GQLParser::selectGraphMatch() {
  SelectGraphMatchContext *_localctx = _tracker.createInstance<SelectGraphMatchContext>(_ctx, getState());
  enterRule(_localctx, 382, GQLParser::RuleSelectGraphMatch);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2081);
    graphExpression();
    setState(2082);
    matchStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectQuerySpecificationContext ------------------------------------------------------------------

GQLParser::SelectQuerySpecificationContext::SelectQuerySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NestedQuerySpecificationContext* GQLParser::SelectQuerySpecificationContext::nestedQuerySpecification() {
  return getRuleContext<GQLParser::NestedQuerySpecificationContext>(0);
}

GQLParser::GraphExpressionContext* GQLParser::SelectQuerySpecificationContext::graphExpression() {
  return getRuleContext<GQLParser::GraphExpressionContext>(0);
}


size_t GQLParser::SelectQuerySpecificationContext::getRuleIndex() const {
  return GQLParser::RuleSelectQuerySpecification;
}


std::any GQLParser::SelectQuerySpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSelectQuerySpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SelectQuerySpecificationContext* GQLParser::selectQuerySpecification() {
  SelectQuerySpecificationContext *_localctx = _tracker.createInstance<SelectQuerySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 384, GQLParser::RuleSelectQuerySpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2088);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2084);
      nestedQuerySpecification();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2085);
      graphExpression();
      setState(2086);
      nestedQuerySpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallProcedureStatementContext ------------------------------------------------------------------

GQLParser::CallProcedureStatementContext::CallProcedureStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CallProcedureStatementContext::CALL() {
  return getToken(GQLParser::CALL, 0);
}

GQLParser::ProcedureCallContext* GQLParser::CallProcedureStatementContext::procedureCall() {
  return getRuleContext<GQLParser::ProcedureCallContext>(0);
}

tree::TerminalNode* GQLParser::CallProcedureStatementContext::OPTIONAL() {
  return getToken(GQLParser::OPTIONAL, 0);
}


size_t GQLParser::CallProcedureStatementContext::getRuleIndex() const {
  return GQLParser::RuleCallProcedureStatement;
}


std::any GQLParser::CallProcedureStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCallProcedureStatement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CallProcedureStatementContext* GQLParser::callProcedureStatement() {
  CallProcedureStatementContext *_localctx = _tracker.createInstance<CallProcedureStatementContext>(_ctx, getState());
  enterRule(_localctx, 386, GQLParser::RuleCallProcedureStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2091);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::OPTIONAL) {
      setState(2090);
      match(GQLParser::OPTIONAL);
    }
    setState(2093);
    match(GQLParser::CALL);
    setState(2094);
    procedureCall();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureCallContext ------------------------------------------------------------------

GQLParser::ProcedureCallContext::ProcedureCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::InlineProcedureCallContext* GQLParser::ProcedureCallContext::inlineProcedureCall() {
  return getRuleContext<GQLParser::InlineProcedureCallContext>(0);
}

GQLParser::NamedProcedureCallContext* GQLParser::ProcedureCallContext::namedProcedureCall() {
  return getRuleContext<GQLParser::NamedProcedureCallContext>(0);
}


size_t GQLParser::ProcedureCallContext::getRuleIndex() const {
  return GQLParser::RuleProcedureCall;
}


std::any GQLParser::ProcedureCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitProcedureCall(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ProcedureCallContext* GQLParser::procedureCall() {
  ProcedureCallContext *_localctx = _tracker.createInstance<ProcedureCallContext>(_ctx, getState());
  enterRule(_localctx, 388, GQLParser::RuleProcedureCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2098);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LEFT_BRACE:
      case GQLParser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 1);
        setState(2096);
        inlineProcedureCall();
        break;
      }

      case GQLParser::DOLLAR_SIGN:
      case GQLParser::PERIOD:
      case GQLParser::SOLIDUS:
      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ACYCLIC:
      case GQLParser::ALL:
      case GQLParser::ALL_DIFFERENT:
      case GQLParser::AND:
      case GQLParser::ANY:
      case GQLParser::ARRAY:
      case GQLParser::AS:
      case GQLParser::ASC:
      case GQLParser::ASCENDING:
      case GQLParser::ASIN:
      case GQLParser::AT:
      case GQLParser::ATAN:
      case GQLParser::AVG:
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::BINARY:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::BOOL:
      case GQLParser::BOOLEAN:
      case GQLParser::BOTH:
      case GQLParser::BTRIM:
      case GQLParser::BY:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::BYTES:
      case GQLParser::CALL:
      case GQLParser::CASE:
      case GQLParser::CAST:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::CHARACTERISTICS:
      case GQLParser::CLOSE:
      case GQLParser::COALESCE:
      case GQLParser::COLLECT:
      case GQLParser::COMMIT:
      case GQLParser::CONNECTING:
      case GQLParser::COPY:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::COUNT:
      case GQLParser::CREATE:
      case GQLParser::CURRENT_DATE:
      case GQLParser::CURRENT_GRAPH:
      case GQLParser::CURRENT_PROPERTY_GRAPH:
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::CURRENT_TIME:
      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::CURRENT_USER:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DEC:
      case GQLParser::DECIMAL:
      case GQLParser::DEGREES:
      case GQLParser::DELETE:
      case GQLParser::DESC:
      case GQLParser::DESCENDING:
      case GQLParser::DESTINATION:
      case GQLParser::DETACH:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::DISTINCT:
      case GQLParser::DOUBLE:
      case GQLParser::DROP:
      case GQLParser::DURATION:
      case GQLParser::DURATION_BETWEEN:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENT_ID:
      case GQLParser::ELEMENTS:
      case GQLParser::ELSE:
      case GQLParser::END:
      case GQLParser::EXCEPT:
      case GQLParser::EXISTS:
      case GQLParser::EXP:
      case GQLParser::K_FALSE:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FIRST:
      case GQLParser::FLOAT:
      case GQLParser::FLOAT128:
      case GQLParser::FLOAT16:
      case GQLParser::FLOAT256:
      case GQLParser::FLOAT32:
      case GQLParser::FLOAT64:
      case GQLParser::FLOOR:
      case GQLParser::FOR:
      case GQLParser::FROM:
      case GQLParser::GRAPH:
      case GQLParser::GROUP:
      case GQLParser::GROUPS:
      case GQLParser::HAVING:
      case GQLParser::HOME_GRAPH:
      case GQLParser::HOME_PROPERTY_GRAPH:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::I_DONT_KNOW_1:
      case GQLParser::I_DONT_KNOW_2:
      case GQLParser::I_DONT_KNOW_3:
      case GQLParser::I_DONT_KNOW_4:
      case GQLParser::I_DONT_KNOW_5:
      case GQLParser::IF:
      case GQLParser::IN:
      case GQLParser::INSERT:
      case GQLParser::INT:
      case GQLParser::INT8:
      case GQLParser::INT16:
      case GQLParser::INT32:
      case GQLParser::INT64:
      case GQLParser::INT128:
      case GQLParser::INT256:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::INTERSECT:
      case GQLParser::IS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::LEADING:
      case GQLParser::LEFT:
      case GQLParser::LET:
      case GQLParser::LIKE:
      case GQLParser::LIMIT:
      case GQLParser::LIST:
      case GQLParser::LN:
      case GQLParser::LOCAL:
      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIME:
      case GQLParser::LOCAL_TIMESTAMP:
      case GQLParser::LOG:
      case GQLParser::LOG10:
      case GQLParser::LOWER:
      case GQLParser::LTRIM:
      case GQLParser::MATCH:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::MOD:
      case GQLParser::NEXT:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODETACH:
      case GQLParser::NORMALIZE:
      case GQLParser::NORMALIZED:
      case GQLParser::NOT:
      case GQLParser::NULL_:
      case GQLParser::NULLIF:
      case GQLParser::NULLS:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::OF:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::ONLY:
      case GQLParser::OPEN:
      case GQLParser::OPTIONAL:
      case GQLParser::OR:
      case GQLParser::ORDER:
      case GQLParser::ORDINALITY:
      case GQLParser::OTHERWISE:
      case GQLParser::PARAMETER:
      case GQLParser::PARAMETERS:
      case GQLParser::PATH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::PATHS:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::POWER:
      case GQLParser::PRECISION:
      case GQLParser::PROJECT:
      case GQLParser::PROPERTY:
      case GQLParser::PROPERTY_EXISTS:
      case GQLParser::RADIANS:
      case GQLParser::READ:
      case GQLParser::REAL:
      case GQLParser::RECORD:
      case GQLParser::REMOVE:
      case GQLParser::REPEATABLE:
      case GQLParser::REPLACE:
      case GQLParser::RESET:
      case GQLParser::RETURN:
      case GQLParser::ROLLBACK:
      case GQLParser::RTRIM:
      case GQLParser::RIGHT:
      case GQLParser::SAME:
      case GQLParser::SCHEMA:
      case GQLParser::SELECT:
      case GQLParser::SESSION:
      case GQLParser::SET:
      case GQLParser::SHORTEST:
      case GQLParser::SIGNED:
      case GQLParser::SIMPLE:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::SOURCE:
      case GQLParser::SQRT:
      case GQLParser::START:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::STRING:
      case GQLParser::SUM:
      case GQLParser::TABLE:
      case GQLParser::TAN:
      case GQLParser::TANH:
      case GQLParser::TEMP:
      case GQLParser::THEN:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::TIMEZONE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRAILING:
      case GQLParser::TRANSACTION:
      case GQLParser::TRIM:
      case GQLParser::K_TRUE:
      case GQLParser::TYPE:
      case GQLParser::TYPED:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT128:
      case GQLParser::UINT16:
      case GQLParser::UINT256:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT8:
      case GQLParser::UNDIRECTED:
      case GQLParser::UNION:
      case GQLParser::UNKNOWN:
      case GQLParser::UNSIGNED:
      case GQLParser::UPPER:
      case GQLParser::USE:
      case GQLParser::USMALLINT:
      case GQLParser::VALUE:
      case GQLParser::VARBINARY:
      case GQLParser::VARCHAR:
      case GQLParser::VARIABLE:
      case GQLParser::WALK:
      case GQLParser::WHEN:
      case GQLParser::WHERE:
      case GQLParser::WITH:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::XOR:
      case GQLParser::YIELD:
      case GQLParser::ZONE:
      case GQLParser::ZONED:
      case GQLParser::ZONED_DATETIME:
      case GQLParser::ZONED_TIME:
      case GQLParser::INTERVAL_DAY:
      case GQLParser::INTERVAL_WEEK:
      case GQLParser::INTERVAL_MONTH:
      case GQLParser::INTERVAL_YEAR:
      case GQLParser::EDGE_SYNONYM:
      case GQLParser::EDGES_SYNONYM:
      case GQLParser::NODE_SYNONYM:
      case GQLParser::KEY_WORD:
      case GQLParser::PRE_RESERVED_WORD:
      case GQLParser::DOUBLE_PERIOD:
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(2097);
        namedProcedureCall();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InlineProcedureCallContext ------------------------------------------------------------------

GQLParser::InlineProcedureCallContext::InlineProcedureCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NestedProcedureSpecificationContext* GQLParser::InlineProcedureCallContext::nestedProcedureSpecification() {
  return getRuleContext<GQLParser::NestedProcedureSpecificationContext>(0);
}

GQLParser::VariableScopeClauseContext* GQLParser::InlineProcedureCallContext::variableScopeClause() {
  return getRuleContext<GQLParser::VariableScopeClauseContext>(0);
}


size_t GQLParser::InlineProcedureCallContext::getRuleIndex() const {
  return GQLParser::RuleInlineProcedureCall;
}


std::any GQLParser::InlineProcedureCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitInlineProcedureCall(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::InlineProcedureCallContext* GQLParser::inlineProcedureCall() {
  InlineProcedureCallContext *_localctx = _tracker.createInstance<InlineProcedureCallContext>(_ctx, getState());
  enterRule(_localctx, 390, GQLParser::RuleInlineProcedureCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2101);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::LEFT_PAREN) {
      setState(2100);
      variableScopeClause();
    }
    setState(2103);
    nestedProcedureSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableScopeClauseContext ------------------------------------------------------------------

GQLParser::VariableScopeClauseContext::VariableScopeClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::VariableScopeClauseContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::VariableScopeClauseContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::BindingVariableReferenceListContext* GQLParser::VariableScopeClauseContext::bindingVariableReferenceList() {
  return getRuleContext<GQLParser::BindingVariableReferenceListContext>(0);
}


size_t GQLParser::VariableScopeClauseContext::getRuleIndex() const {
  return GQLParser::RuleVariableScopeClause;
}


std::any GQLParser::VariableScopeClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitVariableScopeClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::VariableScopeClauseContext* GQLParser::variableScopeClause() {
  VariableScopeClauseContext *_localctx = _tracker.createInstance<VariableScopeClauseContext>(_ctx, getState());
  enterRule(_localctx, 392, GQLParser::RuleVariableScopeClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2105);
    match(GQLParser::LEFT_PAREN);
    setState(2107);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 28) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 28)) & -1) != 0) || ((((_la - 92) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 92)) & -1) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 156)) & -1) != 0) || ((((_la - 220) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 220)) & -1) != 0) || ((((_la - 284) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 284)) & 1206964700135305215) != 0)) {
      setState(2106);
      bindingVariableReferenceList();
    }
    setState(2109);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingVariableReferenceListContext ------------------------------------------------------------------

GQLParser::BindingVariableReferenceListContext::BindingVariableReferenceListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::BindingVariableReferenceContext *> GQLParser::BindingVariableReferenceListContext::bindingVariableReference() {
  return getRuleContexts<GQLParser::BindingVariableReferenceContext>();
}

GQLParser::BindingVariableReferenceContext* GQLParser::BindingVariableReferenceListContext::bindingVariableReference(size_t i) {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::BindingVariableReferenceListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::BindingVariableReferenceListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::BindingVariableReferenceListContext::getRuleIndex() const {
  return GQLParser::RuleBindingVariableReferenceList;
}


std::any GQLParser::BindingVariableReferenceListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBindingVariableReferenceList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BindingVariableReferenceListContext* GQLParser::bindingVariableReferenceList() {
  BindingVariableReferenceListContext *_localctx = _tracker.createInstance<BindingVariableReferenceListContext>(_ctx, getState());
  enterRule(_localctx, 394, GQLParser::RuleBindingVariableReferenceList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2111);
    bindingVariableReference();
    setState(2116);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(2112);
      match(GQLParser::COMMA);
      setState(2113);
      bindingVariableReference();
      setState(2118);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedProcedureCallContext ------------------------------------------------------------------

GQLParser::NamedProcedureCallContext::NamedProcedureCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ProcedureReferenceContext* GQLParser::NamedProcedureCallContext::procedureReference() {
  return getRuleContext<GQLParser::ProcedureReferenceContext>(0);
}

tree::TerminalNode* GQLParser::NamedProcedureCallContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::NamedProcedureCallContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::ProcedureArgumentListContext* GQLParser::NamedProcedureCallContext::procedureArgumentList() {
  return getRuleContext<GQLParser::ProcedureArgumentListContext>(0);
}

GQLParser::YieldClauseContext* GQLParser::NamedProcedureCallContext::yieldClause() {
  return getRuleContext<GQLParser::YieldClauseContext>(0);
}


size_t GQLParser::NamedProcedureCallContext::getRuleIndex() const {
  return GQLParser::RuleNamedProcedureCall;
}


std::any GQLParser::NamedProcedureCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNamedProcedureCall(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NamedProcedureCallContext* GQLParser::namedProcedureCall() {
  NamedProcedureCallContext *_localctx = _tracker.createInstance<NamedProcedureCallContext>(_ctx, getState());
  enterRule(_localctx, 396, GQLParser::RuleNamedProcedureCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2119);
    procedureReference();
    setState(2120);
    match(GQLParser::LEFT_PAREN);
    setState(2122);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -268280512) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & -1) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & 3298534883327) != 0) || ((((_la - 329) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 329)) & 36671) != 0)) {
      setState(2121);
      procedureArgumentList();
    }
    setState(2124);
    match(GQLParser::RIGHT_PAREN);
    setState(2126);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::YIELD) {
      setState(2125);
      yieldClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureArgumentListContext ------------------------------------------------------------------

GQLParser::ProcedureArgumentListContext::ProcedureArgumentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::ProcedureArgumentContext *> GQLParser::ProcedureArgumentListContext::procedureArgument() {
  return getRuleContexts<GQLParser::ProcedureArgumentContext>();
}

GQLParser::ProcedureArgumentContext* GQLParser::ProcedureArgumentListContext::procedureArgument(size_t i) {
  return getRuleContext<GQLParser::ProcedureArgumentContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::ProcedureArgumentListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::ProcedureArgumentListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::ProcedureArgumentListContext::getRuleIndex() const {
  return GQLParser::RuleProcedureArgumentList;
}


std::any GQLParser::ProcedureArgumentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitProcedureArgumentList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ProcedureArgumentListContext* GQLParser::procedureArgumentList() {
  ProcedureArgumentListContext *_localctx = _tracker.createInstance<ProcedureArgumentListContext>(_ctx, getState());
  enterRule(_localctx, 398, GQLParser::RuleProcedureArgumentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2128);
    procedureArgument();
    setState(2133);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(2129);
      match(GQLParser::COMMA);
      setState(2130);
      procedureArgument();
      setState(2135);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureArgumentContext ------------------------------------------------------------------

GQLParser::ProcedureArgumentContext::ProcedureArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ExpressionContext* GQLParser::ProcedureArgumentContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}


size_t GQLParser::ProcedureArgumentContext::getRuleIndex() const {
  return GQLParser::RuleProcedureArgument;
}


std::any GQLParser::ProcedureArgumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitProcedureArgument(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ProcedureArgumentContext* GQLParser::procedureArgument() {
  ProcedureArgumentContext *_localctx = _tracker.createInstance<ProcedureArgumentContext>(_ctx, getState());
  enterRule(_localctx, 400, GQLParser::RuleProcedureArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2136);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseGraphClauseContext ------------------------------------------------------------------

GQLParser::UseGraphClauseContext::UseGraphClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::UseGraphClauseContext::USE() {
  return getToken(GQLParser::USE, 0);
}

GQLParser::GraphExpressionContext* GQLParser::UseGraphClauseContext::graphExpression() {
  return getRuleContext<GQLParser::GraphExpressionContext>(0);
}


size_t GQLParser::UseGraphClauseContext::getRuleIndex() const {
  return GQLParser::RuleUseGraphClause;
}


std::any GQLParser::UseGraphClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitUseGraphClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::UseGraphClauseContext* GQLParser::useGraphClause() {
  UseGraphClauseContext *_localctx = _tracker.createInstance<UseGraphClauseContext>(_ctx, getState());
  enterRule(_localctx, 402, GQLParser::RuleUseGraphClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2138);
    match(GQLParser::USE);
    setState(2139);
    graphExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtSchemaClauseContext ------------------------------------------------------------------

GQLParser::AtSchemaClauseContext::AtSchemaClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AtSchemaClauseContext::AT() {
  return getToken(GQLParser::AT, 0);
}

GQLParser::SchemaReferenceContext* GQLParser::AtSchemaClauseContext::schemaReference() {
  return getRuleContext<GQLParser::SchemaReferenceContext>(0);
}


size_t GQLParser::AtSchemaClauseContext::getRuleIndex() const {
  return GQLParser::RuleAtSchemaClause;
}


std::any GQLParser::AtSchemaClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAtSchemaClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::AtSchemaClauseContext* GQLParser::atSchemaClause() {
  AtSchemaClauseContext *_localctx = _tracker.createInstance<AtSchemaClauseContext>(_ctx, getState());
  enterRule(_localctx, 404, GQLParser::RuleAtSchemaClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2141);
    match(GQLParser::AT);
    setState(2142);
    schemaReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingVariableReferenceContext ------------------------------------------------------------------

GQLParser::BindingVariableReferenceContext::BindingVariableReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableContext* GQLParser::BindingVariableReferenceContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}


size_t GQLParser::BindingVariableReferenceContext::getRuleIndex() const {
  return GQLParser::RuleBindingVariableReference;
}


std::any GQLParser::BindingVariableReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBindingVariableReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BindingVariableReferenceContext* GQLParser::bindingVariableReference() {
  BindingVariableReferenceContext *_localctx = _tracker.createInstance<BindingVariableReferenceContext>(_ctx, getState());
  enterRule(_localctx, 406, GQLParser::RuleBindingVariableReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2144);
    bindingVariable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementVariableReferenceContext ------------------------------------------------------------------

GQLParser::ElementVariableReferenceContext::ElementVariableReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::ElementVariableReferenceContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}


size_t GQLParser::ElementVariableReferenceContext::getRuleIndex() const {
  return GQLParser::RuleElementVariableReference;
}


std::any GQLParser::ElementVariableReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitElementVariableReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ElementVariableReferenceContext* GQLParser::elementVariableReference() {
  ElementVariableReferenceContext *_localctx = _tracker.createInstance<ElementVariableReferenceContext>(_ctx, getState());
  enterRule(_localctx, 408, GQLParser::RuleElementVariableReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2146);
    bindingVariableReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathVariableReferenceContext ------------------------------------------------------------------

GQLParser::PathVariableReferenceContext::PathVariableReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::PathVariableReferenceContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}


size_t GQLParser::PathVariableReferenceContext::getRuleIndex() const {
  return GQLParser::RulePathVariableReference;
}


std::any GQLParser::PathVariableReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathVariableReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathVariableReferenceContext* GQLParser::pathVariableReference() {
  PathVariableReferenceContext *_localctx = _tracker.createInstance<PathVariableReferenceContext>(_ctx, getState());
  enterRule(_localctx, 410, GQLParser::RulePathVariableReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2148);
    bindingVariableReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterContext ------------------------------------------------------------------

GQLParser::ParameterContext::ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ParameterNameContext* GQLParser::ParameterContext::parameterName() {
  return getRuleContext<GQLParser::ParameterNameContext>(0);
}


size_t GQLParser::ParameterContext::getRuleIndex() const {
  return GQLParser::RuleParameter;
}


std::any GQLParser::ParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitParameter(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ParameterContext* GQLParser::parameter() {
  ParameterContext *_localctx = _tracker.createInstance<ParameterContext>(_ctx, getState());
  enterRule(_localctx, 412, GQLParser::RuleParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2150);
    parameterName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternBindingTableContext ------------------------------------------------------------------

GQLParser::GraphPatternBindingTableContext::GraphPatternBindingTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphPatternContext* GQLParser::GraphPatternBindingTableContext::graphPattern() {
  return getRuleContext<GQLParser::GraphPatternContext>(0);
}

GQLParser::GraphPatternYieldClauseContext* GQLParser::GraphPatternBindingTableContext::graphPatternYieldClause() {
  return getRuleContext<GQLParser::GraphPatternYieldClauseContext>(0);
}


size_t GQLParser::GraphPatternBindingTableContext::getRuleIndex() const {
  return GQLParser::RuleGraphPatternBindingTable;
}


std::any GQLParser::GraphPatternBindingTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphPatternBindingTable(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphPatternBindingTableContext* GQLParser::graphPatternBindingTable() {
  GraphPatternBindingTableContext *_localctx = _tracker.createInstance<GraphPatternBindingTableContext>(_ctx, getState());
  enterRule(_localctx, 414, GQLParser::RuleGraphPatternBindingTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2152);
    graphPattern();
    setState(2154);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      setState(2153);
      graphPatternYieldClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternYieldClauseContext ------------------------------------------------------------------

GQLParser::GraphPatternYieldClauseContext::GraphPatternYieldClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GraphPatternYieldClauseContext::YIELD() {
  return getToken(GQLParser::YIELD, 0);
}

GQLParser::GraphPatternYieldItemListContext* GQLParser::GraphPatternYieldClauseContext::graphPatternYieldItemList() {
  return getRuleContext<GQLParser::GraphPatternYieldItemListContext>(0);
}


size_t GQLParser::GraphPatternYieldClauseContext::getRuleIndex() const {
  return GQLParser::RuleGraphPatternYieldClause;
}


std::any GQLParser::GraphPatternYieldClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphPatternYieldClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphPatternYieldClauseContext* GQLParser::graphPatternYieldClause() {
  GraphPatternYieldClauseContext *_localctx = _tracker.createInstance<GraphPatternYieldClauseContext>(_ctx, getState());
  enterRule(_localctx, 416, GQLParser::RuleGraphPatternYieldClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2156);
    match(GQLParser::YIELD);
    setState(2157);
    graphPatternYieldItemList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternYieldItemListContext ------------------------------------------------------------------

GQLParser::GraphPatternYieldItemListContext::GraphPatternYieldItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::GraphPatternYieldItemContext *> GQLParser::GraphPatternYieldItemListContext::graphPatternYieldItem() {
  return getRuleContexts<GQLParser::GraphPatternYieldItemContext>();
}

GQLParser::GraphPatternYieldItemContext* GQLParser::GraphPatternYieldItemListContext::graphPatternYieldItem(size_t i) {
  return getRuleContext<GQLParser::GraphPatternYieldItemContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::GraphPatternYieldItemListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::GraphPatternYieldItemListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}

tree::TerminalNode* GQLParser::GraphPatternYieldItemListContext::NO() {
  return getToken(GQLParser::NO, 0);
}

tree::TerminalNode* GQLParser::GraphPatternYieldItemListContext::BINDINGS() {
  return getToken(GQLParser::BINDINGS, 0);
}


size_t GQLParser::GraphPatternYieldItemListContext::getRuleIndex() const {
  return GQLParser::RuleGraphPatternYieldItemList;
}


std::any GQLParser::GraphPatternYieldItemListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphPatternYieldItemList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphPatternYieldItemListContext* GQLParser::graphPatternYieldItemList() {
  GraphPatternYieldItemListContext *_localctx = _tracker.createInstance<GraphPatternYieldItemListContext>(_ctx, getState());
  enterRule(_localctx, 418, GQLParser::RuleGraphPatternYieldItemList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2169);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2159);
      graphPatternYieldItem();
      setState(2164);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2160);
          match(GQLParser::COMMA);
          setState(2161);
          graphPatternYieldItem(); 
        }
        setState(2166);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2167);
      match(GQLParser::NO);
      setState(2168);
      match(GQLParser::BINDINGS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternYieldItemContext ------------------------------------------------------------------

GQLParser::GraphPatternYieldItemContext::GraphPatternYieldItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementVariableReferenceContext* GQLParser::GraphPatternYieldItemContext::elementVariableReference() {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(0);
}

GQLParser::PathVariableReferenceContext* GQLParser::GraphPatternYieldItemContext::pathVariableReference() {
  return getRuleContext<GQLParser::PathVariableReferenceContext>(0);
}


size_t GQLParser::GraphPatternYieldItemContext::getRuleIndex() const {
  return GQLParser::RuleGraphPatternYieldItem;
}


std::any GQLParser::GraphPatternYieldItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphPatternYieldItem(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphPatternYieldItemContext* GQLParser::graphPatternYieldItem() {
  GraphPatternYieldItemContext *_localctx = _tracker.createInstance<GraphPatternYieldItemContext>(_ctx, getState());
  enterRule(_localctx, 420, GQLParser::RuleGraphPatternYieldItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2173);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2171);
      elementVariableReference();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2172);
      pathVariableReference();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternContext ------------------------------------------------------------------

GQLParser::GraphPatternContext::GraphPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathPatternListContext* GQLParser::GraphPatternContext::pathPatternList() {
  return getRuleContext<GQLParser::PathPatternListContext>(0);
}

GQLParser::MatchModeContext* GQLParser::GraphPatternContext::matchMode() {
  return getRuleContext<GQLParser::MatchModeContext>(0);
}

GQLParser::KeepClauseContext* GQLParser::GraphPatternContext::keepClause() {
  return getRuleContext<GQLParser::KeepClauseContext>(0);
}

GQLParser::GraphPatternWhereClauseContext* GQLParser::GraphPatternContext::graphPatternWhereClause() {
  return getRuleContext<GQLParser::GraphPatternWhereClauseContext>(0);
}


size_t GQLParser::GraphPatternContext::getRuleIndex() const {
  return GQLParser::RuleGraphPattern;
}


std::any GQLParser::GraphPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphPattern(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphPatternContext* GQLParser::graphPattern() {
  GraphPatternContext *_localctx = _tracker.createInstance<GraphPatternContext>(_ctx, getState());
  enterRule(_localctx, 422, GQLParser::RuleGraphPattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2176);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx)) {
    case 1: {
      setState(2175);
      matchMode();
      break;
    }

    default:
      break;
    }
    setState(2178);
    pathPatternList();
    setState(2180);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
    case 1: {
      setState(2179);
      keepClause();
      break;
    }

    default:
      break;
    }
    setState(2183);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
    case 1: {
      setState(2182);
      graphPatternWhereClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MatchModeContext ------------------------------------------------------------------

GQLParser::MatchModeContext::MatchModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::RepeatableElementsMatchModeContext* GQLParser::MatchModeContext::repeatableElementsMatchMode() {
  return getRuleContext<GQLParser::RepeatableElementsMatchModeContext>(0);
}

GQLParser::DifferentEdgesMatchModeContext* GQLParser::MatchModeContext::differentEdgesMatchMode() {
  return getRuleContext<GQLParser::DifferentEdgesMatchModeContext>(0);
}


size_t GQLParser::MatchModeContext::getRuleIndex() const {
  return GQLParser::RuleMatchMode;
}


std::any GQLParser::MatchModeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitMatchMode(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::MatchModeContext* GQLParser::matchMode() {
  MatchModeContext *_localctx = _tracker.createInstance<MatchModeContext>(_ctx, getState());
  enterRule(_localctx, 424, GQLParser::RuleMatchMode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2187);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::REPEATABLE: {
        enterOuterAlt(_localctx, 1);
        setState(2185);
        repeatableElementsMatchMode();
        break;
      }

      case GQLParser::DIFFERENT: {
        enterOuterAlt(_localctx, 2);
        setState(2186);
        differentEdgesMatchMode();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RepeatableElementsMatchModeContext ------------------------------------------------------------------

GQLParser::RepeatableElementsMatchModeContext::RepeatableElementsMatchModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::RepeatableElementsMatchModeContext::REPEATABLE() {
  return getToken(GQLParser::REPEATABLE, 0);
}

GQLParser::ElementBindingsOrElementsContext* GQLParser::RepeatableElementsMatchModeContext::elementBindingsOrElements() {
  return getRuleContext<GQLParser::ElementBindingsOrElementsContext>(0);
}


size_t GQLParser::RepeatableElementsMatchModeContext::getRuleIndex() const {
  return GQLParser::RuleRepeatableElementsMatchMode;
}


std::any GQLParser::RepeatableElementsMatchModeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitRepeatableElementsMatchMode(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::RepeatableElementsMatchModeContext* GQLParser::repeatableElementsMatchMode() {
  RepeatableElementsMatchModeContext *_localctx = _tracker.createInstance<RepeatableElementsMatchModeContext>(_ctx, getState());
  enterRule(_localctx, 426, GQLParser::RuleRepeatableElementsMatchMode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2189);
    match(GQLParser::REPEATABLE);
    setState(2190);
    elementBindingsOrElements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DifferentEdgesMatchModeContext ------------------------------------------------------------------

GQLParser::DifferentEdgesMatchModeContext::DifferentEdgesMatchModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DifferentEdgesMatchModeContext::DIFFERENT() {
  return getToken(GQLParser::DIFFERENT, 0);
}

GQLParser::EdgeBindingsOrEdgesContext* GQLParser::DifferentEdgesMatchModeContext::edgeBindingsOrEdges() {
  return getRuleContext<GQLParser::EdgeBindingsOrEdgesContext>(0);
}


size_t GQLParser::DifferentEdgesMatchModeContext::getRuleIndex() const {
  return GQLParser::RuleDifferentEdgesMatchMode;
}


std::any GQLParser::DifferentEdgesMatchModeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDifferentEdgesMatchMode(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DifferentEdgesMatchModeContext* GQLParser::differentEdgesMatchMode() {
  DifferentEdgesMatchModeContext *_localctx = _tracker.createInstance<DifferentEdgesMatchModeContext>(_ctx, getState());
  enterRule(_localctx, 428, GQLParser::RuleDifferentEdgesMatchMode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2192);
    match(GQLParser::DIFFERENT);
    setState(2193);
    edgeBindingsOrEdges();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementBindingsOrElementsContext ------------------------------------------------------------------

GQLParser::ElementBindingsOrElementsContext::ElementBindingsOrElementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ElementBindingsOrElementsContext::ELEMENT() {
  return getToken(GQLParser::ELEMENT, 0);
}

tree::TerminalNode* GQLParser::ElementBindingsOrElementsContext::BINDINGS() {
  return getToken(GQLParser::BINDINGS, 0);
}

tree::TerminalNode* GQLParser::ElementBindingsOrElementsContext::ELEMENTS() {
  return getToken(GQLParser::ELEMENTS, 0);
}


size_t GQLParser::ElementBindingsOrElementsContext::getRuleIndex() const {
  return GQLParser::RuleElementBindingsOrElements;
}


std::any GQLParser::ElementBindingsOrElementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitElementBindingsOrElements(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ElementBindingsOrElementsContext* GQLParser::elementBindingsOrElements() {
  ElementBindingsOrElementsContext *_localctx = _tracker.createInstance<ElementBindingsOrElementsContext>(_ctx, getState());
  enterRule(_localctx, 430, GQLParser::RuleElementBindingsOrElements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2200);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ELEMENT: {
        enterOuterAlt(_localctx, 1);
        setState(2195);
        match(GQLParser::ELEMENT);
        setState(2197);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
        case 1: {
          setState(2196);
          match(GQLParser::BINDINGS);
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::ELEMENTS: {
        enterOuterAlt(_localctx, 2);
        setState(2199);
        match(GQLParser::ELEMENTS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeBindingsOrEdgesContext ------------------------------------------------------------------

GQLParser::EdgeBindingsOrEdgesContext::EdgeBindingsOrEdgesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EdgeBindingsOrEdgesContext::EDGE_SYNONYM() {
  return getToken(GQLParser::EDGE_SYNONYM, 0);
}

tree::TerminalNode* GQLParser::EdgeBindingsOrEdgesContext::BINDINGS() {
  return getToken(GQLParser::BINDINGS, 0);
}

tree::TerminalNode* GQLParser::EdgeBindingsOrEdgesContext::EDGES_SYNONYM() {
  return getToken(GQLParser::EDGES_SYNONYM, 0);
}


size_t GQLParser::EdgeBindingsOrEdgesContext::getRuleIndex() const {
  return GQLParser::RuleEdgeBindingsOrEdges;
}


std::any GQLParser::EdgeBindingsOrEdgesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEdgeBindingsOrEdges(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EdgeBindingsOrEdgesContext* GQLParser::edgeBindingsOrEdges() {
  EdgeBindingsOrEdgesContext *_localctx = _tracker.createInstance<EdgeBindingsOrEdgesContext>(_ctx, getState());
  enterRule(_localctx, 432, GQLParser::RuleEdgeBindingsOrEdges);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2207);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::EDGE_SYNONYM: {
        enterOuterAlt(_localctx, 1);
        setState(2202);
        match(GQLParser::EDGE_SYNONYM);
        setState(2204);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx)) {
        case 1: {
          setState(2203);
          match(GQLParser::BINDINGS);
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::EDGES_SYNONYM: {
        enterOuterAlt(_localctx, 2);
        setState(2206);
        match(GQLParser::EDGES_SYNONYM);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathPatternListContext ------------------------------------------------------------------

GQLParser::PathPatternListContext::PathPatternListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::PathPatternContext *> GQLParser::PathPatternListContext::pathPattern() {
  return getRuleContexts<GQLParser::PathPatternContext>();
}

GQLParser::PathPatternContext* GQLParser::PathPatternListContext::pathPattern(size_t i) {
  return getRuleContext<GQLParser::PathPatternContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::PathPatternListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::PathPatternListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::PathPatternListContext::getRuleIndex() const {
  return GQLParser::RulePathPatternList;
}


std::any GQLParser::PathPatternListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathPatternList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathPatternListContext* GQLParser::pathPatternList() {
  PathPatternListContext *_localctx = _tracker.createInstance<PathPatternListContext>(_ctx, getState());
  enterRule(_localctx, 434, GQLParser::RulePathPatternList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2209);
    pathPattern();
    setState(2214);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2210);
        match(GQLParser::COMMA);
        setState(2211);
        pathPattern(); 
      }
      setState(2216);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathPatternContext ------------------------------------------------------------------

GQLParser::PathPatternContext::PathPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathPatternExpressionContext* GQLParser::PathPatternContext::pathPatternExpression() {
  return getRuleContext<GQLParser::PathPatternExpressionContext>(0);
}

GQLParser::PathVariableDeclarationContext* GQLParser::PathPatternContext::pathVariableDeclaration() {
  return getRuleContext<GQLParser::PathVariableDeclarationContext>(0);
}

GQLParser::PathPatternPrefixContext* GQLParser::PathPatternContext::pathPatternPrefix() {
  return getRuleContext<GQLParser::PathPatternPrefixContext>(0);
}


size_t GQLParser::PathPatternContext::getRuleIndex() const {
  return GQLParser::RulePathPattern;
}


std::any GQLParser::PathPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathPattern(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathPatternContext* GQLParser::pathPattern() {
  PathPatternContext *_localctx = _tracker.createInstance<PathPatternContext>(_ctx, getState());
  enterRule(_localctx, 436, GQLParser::RulePathPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2218);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx)) {
    case 1: {
      setState(2217);
      pathVariableDeclaration();
      break;
    }

    default:
      break;
    }
    setState(2221);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 20401094656) != 0) || ((((_la - 227) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 227)) & 562949961809925) != 0)) {
      setState(2220);
      pathPatternPrefix();
    }
    setState(2223);
    pathPatternExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathVariableDeclarationContext ------------------------------------------------------------------

GQLParser::PathVariableDeclarationContext::PathVariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathVariableContext* GQLParser::PathVariableDeclarationContext::pathVariable() {
  return getRuleContext<GQLParser::PathVariableContext>(0);
}

tree::TerminalNode* GQLParser::PathVariableDeclarationContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}


size_t GQLParser::PathVariableDeclarationContext::getRuleIndex() const {
  return GQLParser::RulePathVariableDeclaration;
}


std::any GQLParser::PathVariableDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathVariableDeclaration(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathVariableDeclarationContext* GQLParser::pathVariableDeclaration() {
  PathVariableDeclarationContext *_localctx = _tracker.createInstance<PathVariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 438, GQLParser::RulePathVariableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2225);
    pathVariable();
    setState(2226);
    match(GQLParser::EQUALS_OPERATOR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeepClauseContext ------------------------------------------------------------------

GQLParser::KeepClauseContext::KeepClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::KeepClauseContext::KEEP() {
  return getToken(GQLParser::KEEP, 0);
}

GQLParser::PathPatternPrefixContext* GQLParser::KeepClauseContext::pathPatternPrefix() {
  return getRuleContext<GQLParser::PathPatternPrefixContext>(0);
}


size_t GQLParser::KeepClauseContext::getRuleIndex() const {
  return GQLParser::RuleKeepClause;
}


std::any GQLParser::KeepClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitKeepClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::KeepClauseContext* GQLParser::keepClause() {
  KeepClauseContext *_localctx = _tracker.createInstance<KeepClauseContext>(_ctx, getState());
  enterRule(_localctx, 440, GQLParser::RuleKeepClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2228);
    match(GQLParser::KEEP);
    setState(2229);
    pathPatternPrefix();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternWhereClauseContext ------------------------------------------------------------------

GQLParser::GraphPatternWhereClauseContext::GraphPatternWhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GraphPatternWhereClauseContext::WHERE() {
  return getToken(GQLParser::WHERE, 0);
}

GQLParser::ExpressionContext* GQLParser::GraphPatternWhereClauseContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}


size_t GQLParser::GraphPatternWhereClauseContext::getRuleIndex() const {
  return GQLParser::RuleGraphPatternWhereClause;
}


std::any GQLParser::GraphPatternWhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphPatternWhereClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphPatternWhereClauseContext* GQLParser::graphPatternWhereClause() {
  GraphPatternWhereClauseContext *_localctx = _tracker.createInstance<GraphPatternWhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 442, GQLParser::RuleGraphPatternWhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2231);
    match(GQLParser::WHERE);
    setState(2232);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathPatternPrefixContext ------------------------------------------------------------------

GQLParser::PathPatternPrefixContext::PathPatternPrefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathModePrefixContext* GQLParser::PathPatternPrefixContext::pathModePrefix() {
  return getRuleContext<GQLParser::PathModePrefixContext>(0);
}

GQLParser::PathSearchPrefixContext* GQLParser::PathPatternPrefixContext::pathSearchPrefix() {
  return getRuleContext<GQLParser::PathSearchPrefixContext>(0);
}


size_t GQLParser::PathPatternPrefixContext::getRuleIndex() const {
  return GQLParser::RulePathPatternPrefix;
}


std::any GQLParser::PathPatternPrefixContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathPatternPrefix(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathPatternPrefixContext* GQLParser::pathPatternPrefix() {
  PathPatternPrefixContext *_localctx = _tracker.createInstance<PathPatternPrefixContext>(_ctx, getState());
  enterRule(_localctx, 444, GQLParser::RulePathPatternPrefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2236);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ACYCLIC:
      case GQLParser::SIMPLE:
      case GQLParser::TRAIL:
      case GQLParser::WALK: {
        enterOuterAlt(_localctx, 1);
        setState(2234);
        pathModePrefix();
        break;
      }

      case GQLParser::ALL:
      case GQLParser::ANY:
      case GQLParser::SHORTEST: {
        enterOuterAlt(_localctx, 2);
        setState(2235);
        pathSearchPrefix();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathModePrefixContext ------------------------------------------------------------------

GQLParser::PathModePrefixContext::PathModePrefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathModeContext* GQLParser::PathModePrefixContext::pathMode() {
  return getRuleContext<GQLParser::PathModeContext>(0);
}

GQLParser::PathOrPathsContext* GQLParser::PathModePrefixContext::pathOrPaths() {
  return getRuleContext<GQLParser::PathOrPathsContext>(0);
}


size_t GQLParser::PathModePrefixContext::getRuleIndex() const {
  return GQLParser::RulePathModePrefix;
}


std::any GQLParser::PathModePrefixContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathModePrefix(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathModePrefixContext* GQLParser::pathModePrefix() {
  PathModePrefixContext *_localctx = _tracker.createInstance<PathModePrefixContext>(_ctx, getState());
  enterRule(_localctx, 446, GQLParser::RulePathModePrefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2238);
    pathMode();
    setState(2240);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
    case 1: {
      setState(2239);
      pathOrPaths();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathModeContext ------------------------------------------------------------------

GQLParser::PathModeContext::PathModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::PathModeContext::WALK() {
  return getToken(GQLParser::WALK, 0);
}

tree::TerminalNode* GQLParser::PathModeContext::TRAIL() {
  return getToken(GQLParser::TRAIL, 0);
}

tree::TerminalNode* GQLParser::PathModeContext::SIMPLE() {
  return getToken(GQLParser::SIMPLE, 0);
}

tree::TerminalNode* GQLParser::PathModeContext::ACYCLIC() {
  return getToken(GQLParser::ACYCLIC, 0);
}


size_t GQLParser::PathModeContext::getRuleIndex() const {
  return GQLParser::RulePathMode;
}


std::any GQLParser::PathModeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathMode(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathModeContext* GQLParser::pathMode() {
  PathModeContext *_localctx = _tracker.createInstance<PathModeContext>(_ctx, getState());
  enterRule(_localctx, 448, GQLParser::RulePathMode);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2242);
    _la = _input->LA(1);
    if (!(_la == GQLParser::ACYCLIC || ((((_la - 229) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 229)) & 140737490452481) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathSearchPrefixContext ------------------------------------------------------------------

GQLParser::PathSearchPrefixContext::PathSearchPrefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::AllPathSearchContext* GQLParser::PathSearchPrefixContext::allPathSearch() {
  return getRuleContext<GQLParser::AllPathSearchContext>(0);
}

GQLParser::AnyPathSearchContext* GQLParser::PathSearchPrefixContext::anyPathSearch() {
  return getRuleContext<GQLParser::AnyPathSearchContext>(0);
}

GQLParser::ShortestPathSearchContext* GQLParser::PathSearchPrefixContext::shortestPathSearch() {
  return getRuleContext<GQLParser::ShortestPathSearchContext>(0);
}


size_t GQLParser::PathSearchPrefixContext::getRuleIndex() const {
  return GQLParser::RulePathSearchPrefix;
}


std::any GQLParser::PathSearchPrefixContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathSearchPrefix(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathSearchPrefixContext* GQLParser::pathSearchPrefix() {
  PathSearchPrefixContext *_localctx = _tracker.createInstance<PathSearchPrefixContext>(_ctx, getState());
  enterRule(_localctx, 450, GQLParser::RulePathSearchPrefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2247);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2244);
      allPathSearch();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2245);
      anyPathSearch();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2246);
      shortestPathSearch();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllPathSearchContext ------------------------------------------------------------------

GQLParser::AllPathSearchContext::AllPathSearchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AllPathSearchContext::ALL() {
  return getToken(GQLParser::ALL, 0);
}

GQLParser::PathModeContext* GQLParser::AllPathSearchContext::pathMode() {
  return getRuleContext<GQLParser::PathModeContext>(0);
}

GQLParser::PathOrPathsContext* GQLParser::AllPathSearchContext::pathOrPaths() {
  return getRuleContext<GQLParser::PathOrPathsContext>(0);
}


size_t GQLParser::AllPathSearchContext::getRuleIndex() const {
  return GQLParser::RuleAllPathSearch;
}


std::any GQLParser::AllPathSearchContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAllPathSearch(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::AllPathSearchContext* GQLParser::allPathSearch() {
  AllPathSearchContext *_localctx = _tracker.createInstance<AllPathSearchContext>(_ctx, getState());
  enterRule(_localctx, 452, GQLParser::RuleAllPathSearch);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2249);
    match(GQLParser::ALL);
    setState(2251);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx)) {
    case 1: {
      setState(2250);
      pathMode();
      break;
    }

    default:
      break;
    }
    setState(2254);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx)) {
    case 1: {
      setState(2253);
      pathOrPaths();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathOrPathsContext ------------------------------------------------------------------

GQLParser::PathOrPathsContext::PathOrPathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::PathOrPathsContext::PATH() {
  return getToken(GQLParser::PATH, 0);
}

tree::TerminalNode* GQLParser::PathOrPathsContext::PATHS() {
  return getToken(GQLParser::PATHS, 0);
}


size_t GQLParser::PathOrPathsContext::getRuleIndex() const {
  return GQLParser::RulePathOrPaths;
}


std::any GQLParser::PathOrPathsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathOrPaths(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathOrPathsContext* GQLParser::pathOrPaths() {
  PathOrPathsContext *_localctx = _tracker.createInstance<PathOrPathsContext>(_ctx, getState());
  enterRule(_localctx, 454, GQLParser::RulePathOrPaths);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2256);
    _la = _input->LA(1);
    if (!(_la == GQLParser::PATH

    || _la == GQLParser::PATHS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnyPathSearchContext ------------------------------------------------------------------

GQLParser::AnyPathSearchContext::AnyPathSearchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AnyPathSearchContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

GQLParser::NumberOfPathsContext* GQLParser::AnyPathSearchContext::numberOfPaths() {
  return getRuleContext<GQLParser::NumberOfPathsContext>(0);
}

GQLParser::PathModeContext* GQLParser::AnyPathSearchContext::pathMode() {
  return getRuleContext<GQLParser::PathModeContext>(0);
}

GQLParser::PathOrPathsContext* GQLParser::AnyPathSearchContext::pathOrPaths() {
  return getRuleContext<GQLParser::PathOrPathsContext>(0);
}


size_t GQLParser::AnyPathSearchContext::getRuleIndex() const {
  return GQLParser::RuleAnyPathSearch;
}


std::any GQLParser::AnyPathSearchContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAnyPathSearch(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::AnyPathSearchContext* GQLParser::anyPathSearch() {
  AnyPathSearchContext *_localctx = _tracker.createInstance<AnyPathSearchContext>(_ctx, getState());
  enterRule(_localctx, 456, GQLParser::RuleAnyPathSearch);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2258);
    match(GQLParser::ANY);
    setState(2260);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx)) {
    case 1: {
      setState(2259);
      numberOfPaths();
      break;
    }

    default:
      break;
    }
    setState(2263);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx)) {
    case 1: {
      setState(2262);
      pathMode();
      break;
    }

    default:
      break;
    }
    setState(2266);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
    case 1: {
      setState(2265);
      pathOrPaths();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberOfPathsContext ------------------------------------------------------------------

GQLParser::NumberOfPathsContext::NumberOfPathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnsignedIntegerSpecificationContext* GQLParser::NumberOfPathsContext::unsignedIntegerSpecification() {
  return getRuleContext<GQLParser::UnsignedIntegerSpecificationContext>(0);
}


size_t GQLParser::NumberOfPathsContext::getRuleIndex() const {
  return GQLParser::RuleNumberOfPaths;
}


std::any GQLParser::NumberOfPathsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNumberOfPaths(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NumberOfPathsContext* GQLParser::numberOfPaths() {
  NumberOfPathsContext *_localctx = _tracker.createInstance<NumberOfPathsContext>(_ctx, getState());
  enterRule(_localctx, 458, GQLParser::RuleNumberOfPaths);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2268);
    unsignedIntegerSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShortestPathSearchContext ------------------------------------------------------------------

GQLParser::ShortestPathSearchContext::ShortestPathSearchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::AllShortestPathSearchContext* GQLParser::ShortestPathSearchContext::allShortestPathSearch() {
  return getRuleContext<GQLParser::AllShortestPathSearchContext>(0);
}

GQLParser::AnyShortestPathSearchContext* GQLParser::ShortestPathSearchContext::anyShortestPathSearch() {
  return getRuleContext<GQLParser::AnyShortestPathSearchContext>(0);
}

GQLParser::CountedShortestPathSearchContext* GQLParser::ShortestPathSearchContext::countedShortestPathSearch() {
  return getRuleContext<GQLParser::CountedShortestPathSearchContext>(0);
}

GQLParser::CountedShortestGroupSearchContext* GQLParser::ShortestPathSearchContext::countedShortestGroupSearch() {
  return getRuleContext<GQLParser::CountedShortestGroupSearchContext>(0);
}


size_t GQLParser::ShortestPathSearchContext::getRuleIndex() const {
  return GQLParser::RuleShortestPathSearch;
}


std::any GQLParser::ShortestPathSearchContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitShortestPathSearch(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ShortestPathSearchContext* GQLParser::shortestPathSearch() {
  ShortestPathSearchContext *_localctx = _tracker.createInstance<ShortestPathSearchContext>(_ctx, getState());
  enterRule(_localctx, 460, GQLParser::RuleShortestPathSearch);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2274);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2270);
      allShortestPathSearch();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2271);
      anyShortestPathSearch();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2272);
      countedShortestPathSearch();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2273);
      countedShortestGroupSearch();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllShortestPathSearchContext ------------------------------------------------------------------

GQLParser::AllShortestPathSearchContext::AllShortestPathSearchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AllShortestPathSearchContext::ALL() {
  return getToken(GQLParser::ALL, 0);
}

tree::TerminalNode* GQLParser::AllShortestPathSearchContext::SHORTEST() {
  return getToken(GQLParser::SHORTEST, 0);
}

GQLParser::PathModeContext* GQLParser::AllShortestPathSearchContext::pathMode() {
  return getRuleContext<GQLParser::PathModeContext>(0);
}

GQLParser::PathOrPathsContext* GQLParser::AllShortestPathSearchContext::pathOrPaths() {
  return getRuleContext<GQLParser::PathOrPathsContext>(0);
}


size_t GQLParser::AllShortestPathSearchContext::getRuleIndex() const {
  return GQLParser::RuleAllShortestPathSearch;
}


std::any GQLParser::AllShortestPathSearchContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAllShortestPathSearch(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::AllShortestPathSearchContext* GQLParser::allShortestPathSearch() {
  AllShortestPathSearchContext *_localctx = _tracker.createInstance<AllShortestPathSearchContext>(_ctx, getState());
  enterRule(_localctx, 462, GQLParser::RuleAllShortestPathSearch);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2276);
    match(GQLParser::ALL);
    setState(2277);
    match(GQLParser::SHORTEST);
    setState(2279);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
    case 1: {
      setState(2278);
      pathMode();
      break;
    }

    default:
      break;
    }
    setState(2282);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
    case 1: {
      setState(2281);
      pathOrPaths();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnyShortestPathSearchContext ------------------------------------------------------------------

GQLParser::AnyShortestPathSearchContext::AnyShortestPathSearchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AnyShortestPathSearchContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

tree::TerminalNode* GQLParser::AnyShortestPathSearchContext::SHORTEST() {
  return getToken(GQLParser::SHORTEST, 0);
}

GQLParser::PathModeContext* GQLParser::AnyShortestPathSearchContext::pathMode() {
  return getRuleContext<GQLParser::PathModeContext>(0);
}

GQLParser::PathOrPathsContext* GQLParser::AnyShortestPathSearchContext::pathOrPaths() {
  return getRuleContext<GQLParser::PathOrPathsContext>(0);
}


size_t GQLParser::AnyShortestPathSearchContext::getRuleIndex() const {
  return GQLParser::RuleAnyShortestPathSearch;
}


std::any GQLParser::AnyShortestPathSearchContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAnyShortestPathSearch(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::AnyShortestPathSearchContext* GQLParser::anyShortestPathSearch() {
  AnyShortestPathSearchContext *_localctx = _tracker.createInstance<AnyShortestPathSearchContext>(_ctx, getState());
  enterRule(_localctx, 464, GQLParser::RuleAnyShortestPathSearch);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2284);
    match(GQLParser::ANY);
    setState(2285);
    match(GQLParser::SHORTEST);
    setState(2287);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx)) {
    case 1: {
      setState(2286);
      pathMode();
      break;
    }

    default:
      break;
    }
    setState(2290);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
    case 1: {
      setState(2289);
      pathOrPaths();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CountedShortestPathSearchContext ------------------------------------------------------------------

GQLParser::CountedShortestPathSearchContext::CountedShortestPathSearchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CountedShortestPathSearchContext::SHORTEST() {
  return getToken(GQLParser::SHORTEST, 0);
}

GQLParser::NumberOfPathsContext* GQLParser::CountedShortestPathSearchContext::numberOfPaths() {
  return getRuleContext<GQLParser::NumberOfPathsContext>(0);
}

GQLParser::PathModeContext* GQLParser::CountedShortestPathSearchContext::pathMode() {
  return getRuleContext<GQLParser::PathModeContext>(0);
}

GQLParser::PathOrPathsContext* GQLParser::CountedShortestPathSearchContext::pathOrPaths() {
  return getRuleContext<GQLParser::PathOrPathsContext>(0);
}


size_t GQLParser::CountedShortestPathSearchContext::getRuleIndex() const {
  return GQLParser::RuleCountedShortestPathSearch;
}


std::any GQLParser::CountedShortestPathSearchContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCountedShortestPathSearch(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CountedShortestPathSearchContext* GQLParser::countedShortestPathSearch() {
  CountedShortestPathSearchContext *_localctx = _tracker.createInstance<CountedShortestPathSearchContext>(_ctx, getState());
  enterRule(_localctx, 466, GQLParser::RuleCountedShortestPathSearch);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2292);
    match(GQLParser::SHORTEST);
    setState(2293);
    numberOfPaths();
    setState(2295);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx)) {
    case 1: {
      setState(2294);
      pathMode();
      break;
    }

    default:
      break;
    }
    setState(2298);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      setState(2297);
      pathOrPaths();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CountedShortestGroupSearchContext ------------------------------------------------------------------

GQLParser::CountedShortestGroupSearchContext::CountedShortestGroupSearchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CountedShortestGroupSearchContext::SHORTEST() {
  return getToken(GQLParser::SHORTEST, 0);
}

GQLParser::NumberOfGroupsContext* GQLParser::CountedShortestGroupSearchContext::numberOfGroups() {
  return getRuleContext<GQLParser::NumberOfGroupsContext>(0);
}

tree::TerminalNode* GQLParser::CountedShortestGroupSearchContext::GROUP() {
  return getToken(GQLParser::GROUP, 0);
}

tree::TerminalNode* GQLParser::CountedShortestGroupSearchContext::GROUPS() {
  return getToken(GQLParser::GROUPS, 0);
}

GQLParser::PathModeContext* GQLParser::CountedShortestGroupSearchContext::pathMode() {
  return getRuleContext<GQLParser::PathModeContext>(0);
}

GQLParser::PathOrPathsContext* GQLParser::CountedShortestGroupSearchContext::pathOrPaths() {
  return getRuleContext<GQLParser::PathOrPathsContext>(0);
}


size_t GQLParser::CountedShortestGroupSearchContext::getRuleIndex() const {
  return GQLParser::RuleCountedShortestGroupSearch;
}


std::any GQLParser::CountedShortestGroupSearchContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCountedShortestGroupSearch(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CountedShortestGroupSearchContext* GQLParser::countedShortestGroupSearch() {
  CountedShortestGroupSearchContext *_localctx = _tracker.createInstance<CountedShortestGroupSearchContext>(_ctx, getState());
  enterRule(_localctx, 468, GQLParser::RuleCountedShortestGroupSearch);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2300);
    match(GQLParser::SHORTEST);
    setState(2301);
    numberOfGroups();
    setState(2303);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ACYCLIC || ((((_la - 229) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 229)) & 140737490452481) != 0)) {
      setState(2302);
      pathMode();
    }
    setState(2306);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::PATH

    || _la == GQLParser::PATHS) {
      setState(2305);
      pathOrPaths();
    }
    setState(2308);
    _la = _input->LA(1);
    if (!(_la == GQLParser::GROUP

    || _la == GQLParser::GROUPS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberOfGroupsContext ------------------------------------------------------------------

GQLParser::NumberOfGroupsContext::NumberOfGroupsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnsignedIntegerSpecificationContext* GQLParser::NumberOfGroupsContext::unsignedIntegerSpecification() {
  return getRuleContext<GQLParser::UnsignedIntegerSpecificationContext>(0);
}


size_t GQLParser::NumberOfGroupsContext::getRuleIndex() const {
  return GQLParser::RuleNumberOfGroups;
}


std::any GQLParser::NumberOfGroupsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNumberOfGroups(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NumberOfGroupsContext* GQLParser::numberOfGroups() {
  NumberOfGroupsContext *_localctx = _tracker.createInstance<NumberOfGroupsContext>(_ctx, getState());
  enterRule(_localctx, 470, GQLParser::RuleNumberOfGroups);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2310);
    unsignedIntegerSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathPatternExpressionContext ------------------------------------------------------------------

GQLParser::PathPatternExpressionContext::PathPatternExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathTermContext* GQLParser::PathPatternExpressionContext::pathTerm() {
  return getRuleContext<GQLParser::PathTermContext>(0);
}

GQLParser::PathMultisetAlternationContext* GQLParser::PathPatternExpressionContext::pathMultisetAlternation() {
  return getRuleContext<GQLParser::PathMultisetAlternationContext>(0);
}

GQLParser::PathPatternUnionContext* GQLParser::PathPatternExpressionContext::pathPatternUnion() {
  return getRuleContext<GQLParser::PathPatternUnionContext>(0);
}


size_t GQLParser::PathPatternExpressionContext::getRuleIndex() const {
  return GQLParser::RulePathPatternExpression;
}


std::any GQLParser::PathPatternExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathPatternExpression(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathPatternExpressionContext* GQLParser::pathPatternExpression() {
  PathPatternExpressionContext *_localctx = _tracker.createInstance<PathPatternExpressionContext>(_ctx, getState());
  enterRule(_localctx, 472, GQLParser::RulePathPatternExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2315);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2312);
      pathTerm();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2313);
      pathMultisetAlternation();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2314);
      pathPatternUnion();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathMultisetAlternationContext ------------------------------------------------------------------

GQLParser::PathMultisetAlternationContext::PathMultisetAlternationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::PathTermContext *> GQLParser::PathMultisetAlternationContext::pathTerm() {
  return getRuleContexts<GQLParser::PathTermContext>();
}

GQLParser::PathTermContext* GQLParser::PathMultisetAlternationContext::pathTerm(size_t i) {
  return getRuleContext<GQLParser::PathTermContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::PathMultisetAlternationContext::MULTISET_ALTERNATION_OPERATOR() {
  return getTokens(GQLParser::MULTISET_ALTERNATION_OPERATOR);
}

tree::TerminalNode* GQLParser::PathMultisetAlternationContext::MULTISET_ALTERNATION_OPERATOR(size_t i) {
  return getToken(GQLParser::MULTISET_ALTERNATION_OPERATOR, i);
}


size_t GQLParser::PathMultisetAlternationContext::getRuleIndex() const {
  return GQLParser::RulePathMultisetAlternation;
}


std::any GQLParser::PathMultisetAlternationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathMultisetAlternation(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathMultisetAlternationContext* GQLParser::pathMultisetAlternation() {
  PathMultisetAlternationContext *_localctx = _tracker.createInstance<PathMultisetAlternationContext>(_ctx, getState());
  enterRule(_localctx, 474, GQLParser::RulePathMultisetAlternation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2317);
    pathTerm();
    setState(2318);
    match(GQLParser::MULTISET_ALTERNATION_OPERATOR);
    setState(2319);
    pathTerm();
    setState(2324);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2320);
        match(GQLParser::MULTISET_ALTERNATION_OPERATOR);
        setState(2321);
        pathTerm(); 
      }
      setState(2326);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathPatternUnionContext ------------------------------------------------------------------

GQLParser::PathPatternUnionContext::PathPatternUnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::PathTermContext *> GQLParser::PathPatternUnionContext::pathTerm() {
  return getRuleContexts<GQLParser::PathTermContext>();
}

GQLParser::PathTermContext* GQLParser::PathPatternUnionContext::pathTerm(size_t i) {
  return getRuleContext<GQLParser::PathTermContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::PathPatternUnionContext::VERTICAL_BAR() {
  return getTokens(GQLParser::VERTICAL_BAR);
}

tree::TerminalNode* GQLParser::PathPatternUnionContext::VERTICAL_BAR(size_t i) {
  return getToken(GQLParser::VERTICAL_BAR, i);
}


size_t GQLParser::PathPatternUnionContext::getRuleIndex() const {
  return GQLParser::RulePathPatternUnion;
}


std::any GQLParser::PathPatternUnionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathPatternUnion(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathPatternUnionContext* GQLParser::pathPatternUnion() {
  PathPatternUnionContext *_localctx = _tracker.createInstance<PathPatternUnionContext>(_ctx, getState());
  enterRule(_localctx, 476, GQLParser::RulePathPatternUnion);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2327);
    pathTerm();
    setState(2328);
    match(GQLParser::VERTICAL_BAR);
    setState(2329);
    pathTerm();
    setState(2334);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2330);
        match(GQLParser::VERTICAL_BAR);
        setState(2331);
        pathTerm(); 
      }
      setState(2336);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathTermContext ------------------------------------------------------------------

GQLParser::PathTermContext::PathTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::PathFactorContext *> GQLParser::PathTermContext::pathFactor() {
  return getRuleContexts<GQLParser::PathFactorContext>();
}

GQLParser::PathFactorContext* GQLParser::PathTermContext::pathFactor(size_t i) {
  return getRuleContext<GQLParser::PathFactorContext>(i);
}


size_t GQLParser::PathTermContext::getRuleIndex() const {
  return GQLParser::RulePathTerm;
}


std::any GQLParser::PathTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathTerm(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathTermContext* GQLParser::pathTerm() {
  PathTermContext *_localctx = _tracker.createInstance<PathTermContext>(_ctx, getState());
  enterRule(_localctx, 478, GQLParser::RulePathTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2338); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2337);
              pathFactor();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2340); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathFactorContext ------------------------------------------------------------------

GQLParser::PathFactorContext::PathFactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathPrimaryContext* GQLParser::PathFactorContext::pathPrimary() {
  return getRuleContext<GQLParser::PathPrimaryContext>(0);
}

GQLParser::QuantifiedPathPrimaryContext* GQLParser::PathFactorContext::quantifiedPathPrimary() {
  return getRuleContext<GQLParser::QuantifiedPathPrimaryContext>(0);
}

GQLParser::QuestionedPathPrimaryContext* GQLParser::PathFactorContext::questionedPathPrimary() {
  return getRuleContext<GQLParser::QuestionedPathPrimaryContext>(0);
}


size_t GQLParser::PathFactorContext::getRuleIndex() const {
  return GQLParser::RulePathFactor;
}


std::any GQLParser::PathFactorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathFactor(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathFactorContext* GQLParser::pathFactor() {
  PathFactorContext *_localctx = _tracker.createInstance<PathFactorContext>(_ctx, getState());
  enterRule(_localctx, 480, GQLParser::RulePathFactor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2345);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2342);
      pathPrimary();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2343);
      quantifiedPathPrimary();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2344);
      questionedPathPrimary();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantifiedPathPrimaryContext ------------------------------------------------------------------

GQLParser::QuantifiedPathPrimaryContext::QuantifiedPathPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathPrimaryContext* GQLParser::QuantifiedPathPrimaryContext::pathPrimary() {
  return getRuleContext<GQLParser::PathPrimaryContext>(0);
}

GQLParser::GraphPatternQuantifierContext* GQLParser::QuantifiedPathPrimaryContext::graphPatternQuantifier() {
  return getRuleContext<GQLParser::GraphPatternQuantifierContext>(0);
}


size_t GQLParser::QuantifiedPathPrimaryContext::getRuleIndex() const {
  return GQLParser::RuleQuantifiedPathPrimary;
}


std::any GQLParser::QuantifiedPathPrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitQuantifiedPathPrimary(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::QuantifiedPathPrimaryContext* GQLParser::quantifiedPathPrimary() {
  QuantifiedPathPrimaryContext *_localctx = _tracker.createInstance<QuantifiedPathPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 482, GQLParser::RuleQuantifiedPathPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2347);
    pathPrimary();
    setState(2348);
    graphPatternQuantifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuestionedPathPrimaryContext ------------------------------------------------------------------

GQLParser::QuestionedPathPrimaryContext::QuestionedPathPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathPrimaryContext* GQLParser::QuestionedPathPrimaryContext::pathPrimary() {
  return getRuleContext<GQLParser::PathPrimaryContext>(0);
}

tree::TerminalNode* GQLParser::QuestionedPathPrimaryContext::QUESTION_MARK() {
  return getToken(GQLParser::QUESTION_MARK, 0);
}


size_t GQLParser::QuestionedPathPrimaryContext::getRuleIndex() const {
  return GQLParser::RuleQuestionedPathPrimary;
}


std::any GQLParser::QuestionedPathPrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitQuestionedPathPrimary(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::QuestionedPathPrimaryContext* GQLParser::questionedPathPrimary() {
  QuestionedPathPrimaryContext *_localctx = _tracker.createInstance<QuestionedPathPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 484, GQLParser::RuleQuestionedPathPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2350);
    pathPrimary();
    setState(2351);
    match(GQLParser::QUESTION_MARK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathPrimaryContext ------------------------------------------------------------------

GQLParser::PathPrimaryContext::PathPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementPatternContext* GQLParser::PathPrimaryContext::elementPattern() {
  return getRuleContext<GQLParser::ElementPatternContext>(0);
}

GQLParser::ParenthesizedPathPatternExpressionContext* GQLParser::PathPrimaryContext::parenthesizedPathPatternExpression() {
  return getRuleContext<GQLParser::ParenthesizedPathPatternExpressionContext>(0);
}

GQLParser::SimplifiedPathPatternExpressionContext* GQLParser::PathPrimaryContext::simplifiedPathPatternExpression() {
  return getRuleContext<GQLParser::SimplifiedPathPatternExpressionContext>(0);
}


size_t GQLParser::PathPrimaryContext::getRuleIndex() const {
  return GQLParser::RulePathPrimary;
}


std::any GQLParser::PathPrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathPrimary(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathPrimaryContext* GQLParser::pathPrimary() {
  PathPrimaryContext *_localctx = _tracker.createInstance<PathPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 486, GQLParser::RulePathPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2356);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2353);
      elementPattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2354);
      parenthesizedPathPatternExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2355);
      simplifiedPathPatternExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementPatternContext ------------------------------------------------------------------

GQLParser::ElementPatternContext::ElementPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodePatternContext* GQLParser::ElementPatternContext::nodePattern() {
  return getRuleContext<GQLParser::NodePatternContext>(0);
}

GQLParser::EdgePatternContext* GQLParser::ElementPatternContext::edgePattern() {
  return getRuleContext<GQLParser::EdgePatternContext>(0);
}


size_t GQLParser::ElementPatternContext::getRuleIndex() const {
  return GQLParser::RuleElementPattern;
}


std::any GQLParser::ElementPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitElementPattern(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ElementPatternContext* GQLParser::elementPattern() {
  ElementPatternContext *_localctx = _tracker.createInstance<ElementPatternContext>(_ctx, getState());
  enterRule(_localctx, 488, GQLParser::RuleElementPattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2360);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 1);
        setState(2358);
        nodePattern();
        break;
      }

      case GQLParser::LEFT_ANGLE_BRACKET:
      case GQLParser::MINUS_SIGN:
      case GQLParser::TILDE:
      case GQLParser::LEFT_MINUS_RIGHT:
      case GQLParser::RIGHT_ARROW:
      case GQLParser::TILDE_RIGHT_ARROW: {
        enterOuterAlt(_localctx, 2);
        setState(2359);
        edgePattern();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodePatternContext ------------------------------------------------------------------

GQLParser::NodePatternContext::NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NodePatternContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ElementPatternFillerContext* GQLParser::NodePatternContext::elementPatternFiller() {
  return getRuleContext<GQLParser::ElementPatternFillerContext>(0);
}

tree::TerminalNode* GQLParser::NodePatternContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::NodePatternContext::getRuleIndex() const {
  return GQLParser::RuleNodePattern;
}


std::any GQLParser::NodePatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNodePattern(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NodePatternContext* GQLParser::nodePattern() {
  NodePatternContext *_localctx = _tracker.createInstance<NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 490, GQLParser::RuleNodePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2362);
    match(GQLParser::LEFT_PAREN);
    setState(2363);
    elementPatternFiller();
    setState(2364);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementPatternFillerContext ------------------------------------------------------------------

GQLParser::ElementPatternFillerContext::ElementPatternFillerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementVariableDeclarationContext* GQLParser::ElementPatternFillerContext::elementVariableDeclaration() {
  return getRuleContext<GQLParser::ElementVariableDeclarationContext>(0);
}

GQLParser::IsLabelExpressionContext* GQLParser::ElementPatternFillerContext::isLabelExpression() {
  return getRuleContext<GQLParser::IsLabelExpressionContext>(0);
}

GQLParser::ElementPatternPredicateContext* GQLParser::ElementPatternFillerContext::elementPatternPredicate() {
  return getRuleContext<GQLParser::ElementPatternPredicateContext>(0);
}


size_t GQLParser::ElementPatternFillerContext::getRuleIndex() const {
  return GQLParser::RuleElementPatternFiller;
}


std::any GQLParser::ElementPatternFillerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitElementPatternFiller(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ElementPatternFillerContext* GQLParser::elementPatternFiller() {
  ElementPatternFillerContext *_localctx = _tracker.createInstance<ElementPatternFillerContext>(_ctx, getState());
  enterRule(_localctx, 492, GQLParser::RuleElementPatternFiller);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2367);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx)) {
    case 1: {
      setState(2366);
      elementVariableDeclaration();
      break;
    }

    default:
      break;
    }
    setState(2370);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::COLON || _la == GQLParser::IS) {
      setState(2369);
      isLabelExpression();
    }
    setState(2373);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::LEFT_BRACE || _la == GQLParser::WHERE) {
      setState(2372);
      elementPatternPredicate();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementVariableDeclarationContext ------------------------------------------------------------------

GQLParser::ElementVariableDeclarationContext::ElementVariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementVariableContext* GQLParser::ElementVariableDeclarationContext::elementVariable() {
  return getRuleContext<GQLParser::ElementVariableContext>(0);
}

tree::TerminalNode* GQLParser::ElementVariableDeclarationContext::TEMP() {
  return getToken(GQLParser::TEMP, 0);
}


size_t GQLParser::ElementVariableDeclarationContext::getRuleIndex() const {
  return GQLParser::RuleElementVariableDeclaration;
}


std::any GQLParser::ElementVariableDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitElementVariableDeclaration(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ElementVariableDeclarationContext* GQLParser::elementVariableDeclaration() {
  ElementVariableDeclarationContext *_localctx = _tracker.createInstance<ElementVariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 494, GQLParser::RuleElementVariableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2376);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
    case 1: {
      setState(2375);
      match(GQLParser::TEMP);
      break;
    }

    default:
      break;
    }
    setState(2378);
    elementVariable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsLabelExpressionContext ------------------------------------------------------------------

GQLParser::IsLabelExpressionContext::IsLabelExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IsOrColonContext* GQLParser::IsLabelExpressionContext::isOrColon() {
  return getRuleContext<GQLParser::IsOrColonContext>(0);
}

GQLParser::LabelExpressionContext* GQLParser::IsLabelExpressionContext::labelExpression() {
  return getRuleContext<GQLParser::LabelExpressionContext>(0);
}


size_t GQLParser::IsLabelExpressionContext::getRuleIndex() const {
  return GQLParser::RuleIsLabelExpression;
}


std::any GQLParser::IsLabelExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitIsLabelExpression(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::IsLabelExpressionContext* GQLParser::isLabelExpression() {
  IsLabelExpressionContext *_localctx = _tracker.createInstance<IsLabelExpressionContext>(_ctx, getState());
  enterRule(_localctx, 496, GQLParser::RuleIsLabelExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2380);
    isOrColon();
    setState(2381);
    labelExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsOrColonContext ------------------------------------------------------------------

GQLParser::IsOrColonContext::IsOrColonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::IsOrColonContext::IS() {
  return getToken(GQLParser::IS, 0);
}

tree::TerminalNode* GQLParser::IsOrColonContext::COLON() {
  return getToken(GQLParser::COLON, 0);
}


size_t GQLParser::IsOrColonContext::getRuleIndex() const {
  return GQLParser::RuleIsOrColon;
}


std::any GQLParser::IsOrColonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitIsOrColon(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::IsOrColonContext* GQLParser::isOrColon() {
  IsOrColonContext *_localctx = _tracker.createInstance<IsOrColonContext>(_ctx, getState());
  enterRule(_localctx, 498, GQLParser::RuleIsOrColon);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2383);
    _la = _input->LA(1);
    if (!(_la == GQLParser::COLON || _la == GQLParser::IS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementPatternPredicateContext ------------------------------------------------------------------

GQLParser::ElementPatternPredicateContext::ElementPatternPredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementPatternWhereClauseContext* GQLParser::ElementPatternPredicateContext::elementPatternWhereClause() {
  return getRuleContext<GQLParser::ElementPatternWhereClauseContext>(0);
}

GQLParser::ElementPropertySpecificationContext* GQLParser::ElementPatternPredicateContext::elementPropertySpecification() {
  return getRuleContext<GQLParser::ElementPropertySpecificationContext>(0);
}


size_t GQLParser::ElementPatternPredicateContext::getRuleIndex() const {
  return GQLParser::RuleElementPatternPredicate;
}


std::any GQLParser::ElementPatternPredicateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitElementPatternPredicate(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ElementPatternPredicateContext* GQLParser::elementPatternPredicate() {
  ElementPatternPredicateContext *_localctx = _tracker.createInstance<ElementPatternPredicateContext>(_ctx, getState());
  enterRule(_localctx, 500, GQLParser::RuleElementPatternPredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2387);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::WHERE: {
        enterOuterAlt(_localctx, 1);
        setState(2385);
        elementPatternWhereClause();
        break;
      }

      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(2386);
        elementPropertySpecification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementPatternWhereClauseContext ------------------------------------------------------------------

GQLParser::ElementPatternWhereClauseContext::ElementPatternWhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ElementPatternWhereClauseContext::WHERE() {
  return getToken(GQLParser::WHERE, 0);
}

GQLParser::ExpressionContext* GQLParser::ElementPatternWhereClauseContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}


size_t GQLParser::ElementPatternWhereClauseContext::getRuleIndex() const {
  return GQLParser::RuleElementPatternWhereClause;
}


std::any GQLParser::ElementPatternWhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitElementPatternWhereClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ElementPatternWhereClauseContext* GQLParser::elementPatternWhereClause() {
  ElementPatternWhereClauseContext *_localctx = _tracker.createInstance<ElementPatternWhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 502, GQLParser::RuleElementPatternWhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2389);
    match(GQLParser::WHERE);
    setState(2390);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementPropertySpecificationContext ------------------------------------------------------------------

GQLParser::ElementPropertySpecificationContext::ElementPropertySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ElementPropertySpecificationContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

GQLParser::PropertyKeyValuePairListContext* GQLParser::ElementPropertySpecificationContext::propertyKeyValuePairList() {
  return getRuleContext<GQLParser::PropertyKeyValuePairListContext>(0);
}

tree::TerminalNode* GQLParser::ElementPropertySpecificationContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}


size_t GQLParser::ElementPropertySpecificationContext::getRuleIndex() const {
  return GQLParser::RuleElementPropertySpecification;
}


std::any GQLParser::ElementPropertySpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitElementPropertySpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ElementPropertySpecificationContext* GQLParser::elementPropertySpecification() {
  ElementPropertySpecificationContext *_localctx = _tracker.createInstance<ElementPropertySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 504, GQLParser::RuleElementPropertySpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2392);
    match(GQLParser::LEFT_BRACE);
    setState(2393);
    propertyKeyValuePairList();
    setState(2394);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyKeyValuePairListContext ------------------------------------------------------------------

GQLParser::PropertyKeyValuePairListContext::PropertyKeyValuePairListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::PropertyKeyValuePairContext *> GQLParser::PropertyKeyValuePairListContext::propertyKeyValuePair() {
  return getRuleContexts<GQLParser::PropertyKeyValuePairContext>();
}

GQLParser::PropertyKeyValuePairContext* GQLParser::PropertyKeyValuePairListContext::propertyKeyValuePair(size_t i) {
  return getRuleContext<GQLParser::PropertyKeyValuePairContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::PropertyKeyValuePairListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::PropertyKeyValuePairListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::PropertyKeyValuePairListContext::getRuleIndex() const {
  return GQLParser::RulePropertyKeyValuePairList;
}


std::any GQLParser::PropertyKeyValuePairListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPropertyKeyValuePairList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PropertyKeyValuePairListContext* GQLParser::propertyKeyValuePairList() {
  PropertyKeyValuePairListContext *_localctx = _tracker.createInstance<PropertyKeyValuePairListContext>(_ctx, getState());
  enterRule(_localctx, 506, GQLParser::RulePropertyKeyValuePairList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2396);
    propertyKeyValuePair();
    setState(2401);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(2397);
      match(GQLParser::COMMA);
      setState(2398);
      propertyKeyValuePair();
      setState(2403);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyKeyValuePairContext ------------------------------------------------------------------

GQLParser::PropertyKeyValuePairContext::PropertyKeyValuePairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PropertyNameContext* GQLParser::PropertyKeyValuePairContext::propertyName() {
  return getRuleContext<GQLParser::PropertyNameContext>(0);
}

tree::TerminalNode* GQLParser::PropertyKeyValuePairContext::COLON() {
  return getToken(GQLParser::COLON, 0);
}

GQLParser::ExpressionContext* GQLParser::PropertyKeyValuePairContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}


size_t GQLParser::PropertyKeyValuePairContext::getRuleIndex() const {
  return GQLParser::RulePropertyKeyValuePair;
}


std::any GQLParser::PropertyKeyValuePairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPropertyKeyValuePair(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PropertyKeyValuePairContext* GQLParser::propertyKeyValuePair() {
  PropertyKeyValuePairContext *_localctx = _tracker.createInstance<PropertyKeyValuePairContext>(_ctx, getState());
  enterRule(_localctx, 508, GQLParser::RulePropertyKeyValuePair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2404);
    propertyName();
    setState(2405);
    match(GQLParser::COLON);
    setState(2406);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgePatternContext ------------------------------------------------------------------

GQLParser::EdgePatternContext::EdgePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FullEdgePatternContext* GQLParser::EdgePatternContext::fullEdgePattern() {
  return getRuleContext<GQLParser::FullEdgePatternContext>(0);
}

GQLParser::AbbreviatedEdgePatternContext* GQLParser::EdgePatternContext::abbreviatedEdgePattern() {
  return getRuleContext<GQLParser::AbbreviatedEdgePatternContext>(0);
}


size_t GQLParser::EdgePatternContext::getRuleIndex() const {
  return GQLParser::RuleEdgePattern;
}


std::any GQLParser::EdgePatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEdgePattern(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EdgePatternContext* GQLParser::edgePattern() {
  EdgePatternContext *_localctx = _tracker.createInstance<EdgePatternContext>(_ctx, getState());
  enterRule(_localctx, 510, GQLParser::RuleEdgePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2410);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2408);
      fullEdgePattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2409);
      abbreviatedEdgePattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgePatternContext ------------------------------------------------------------------

GQLParser::FullEdgePatternContext::FullEdgePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FullEdgePointingLeftContext* GQLParser::FullEdgePatternContext::fullEdgePointingLeft() {
  return getRuleContext<GQLParser::FullEdgePointingLeftContext>(0);
}

GQLParser::FullEdgeUndirectedContext* GQLParser::FullEdgePatternContext::fullEdgeUndirected() {
  return getRuleContext<GQLParser::FullEdgeUndirectedContext>(0);
}

GQLParser::FullEdgePointingRightContext* GQLParser::FullEdgePatternContext::fullEdgePointingRight() {
  return getRuleContext<GQLParser::FullEdgePointingRightContext>(0);
}

GQLParser::FullEdgeLeftOrUndirectedContext* GQLParser::FullEdgePatternContext::fullEdgeLeftOrUndirected() {
  return getRuleContext<GQLParser::FullEdgeLeftOrUndirectedContext>(0);
}

GQLParser::FullEdgeUndirectedOrRightContext* GQLParser::FullEdgePatternContext::fullEdgeUndirectedOrRight() {
  return getRuleContext<GQLParser::FullEdgeUndirectedOrRightContext>(0);
}

GQLParser::FullEdgeLeftOrRightContext* GQLParser::FullEdgePatternContext::fullEdgeLeftOrRight() {
  return getRuleContext<GQLParser::FullEdgeLeftOrRightContext>(0);
}

GQLParser::FullEdgeAnyDirectionContext* GQLParser::FullEdgePatternContext::fullEdgeAnyDirection() {
  return getRuleContext<GQLParser::FullEdgeAnyDirectionContext>(0);
}


size_t GQLParser::FullEdgePatternContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgePattern;
}


std::any GQLParser::FullEdgePatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFullEdgePattern(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FullEdgePatternContext* GQLParser::fullEdgePattern() {
  FullEdgePatternContext *_localctx = _tracker.createInstance<FullEdgePatternContext>(_ctx, getState());
  enterRule(_localctx, 512, GQLParser::RuleFullEdgePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2419);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2412);
      fullEdgePointingLeft();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2413);
      fullEdgeUndirected();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2414);
      fullEdgePointingRight();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2415);
      fullEdgeLeftOrUndirected();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2416);
      fullEdgeUndirectedOrRight();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2417);
      fullEdgeLeftOrRight();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2418);
      fullEdgeAnyDirection();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgePointingLeftContext ------------------------------------------------------------------

GQLParser::FullEdgePointingLeftContext::FullEdgePointingLeftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FullEdgePointingLeftContext::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

std::vector<tree::TerminalNode *> GQLParser::FullEdgePointingLeftContext::MINUS_SIGN() {
  return getTokens(GQLParser::MINUS_SIGN);
}

tree::TerminalNode* GQLParser::FullEdgePointingLeftContext::MINUS_SIGN(size_t i) {
  return getToken(GQLParser::MINUS_SIGN, i);
}

tree::TerminalNode* GQLParser::FullEdgePointingLeftContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

GQLParser::ElementPatternFillerContext* GQLParser::FullEdgePointingLeftContext::elementPatternFiller() {
  return getRuleContext<GQLParser::ElementPatternFillerContext>(0);
}

tree::TerminalNode* GQLParser::FullEdgePointingLeftContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}


size_t GQLParser::FullEdgePointingLeftContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgePointingLeft;
}


std::any GQLParser::FullEdgePointingLeftContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFullEdgePointingLeft(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FullEdgePointingLeftContext* GQLParser::fullEdgePointingLeft() {
  FullEdgePointingLeftContext *_localctx = _tracker.createInstance<FullEdgePointingLeftContext>(_ctx, getState());
  enterRule(_localctx, 514, GQLParser::RuleFullEdgePointingLeft);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2421);
    match(GQLParser::LEFT_ANGLE_BRACKET);
    setState(2422);
    match(GQLParser::MINUS_SIGN);
    setState(2423);
    match(GQLParser::LEFT_BRACKET);
    setState(2424);
    elementPatternFiller();
    setState(2425);
    match(GQLParser::RIGHT_BRACKET);
    setState(2426);
    match(GQLParser::MINUS_SIGN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgeUndirectedContext ------------------------------------------------------------------

GQLParser::FullEdgeUndirectedContext::FullEdgeUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GQLParser::FullEdgeUndirectedContext::TILDE() {
  return getTokens(GQLParser::TILDE);
}

tree::TerminalNode* GQLParser::FullEdgeUndirectedContext::TILDE(size_t i) {
  return getToken(GQLParser::TILDE, i);
}

tree::TerminalNode* GQLParser::FullEdgeUndirectedContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

GQLParser::ElementPatternFillerContext* GQLParser::FullEdgeUndirectedContext::elementPatternFiller() {
  return getRuleContext<GQLParser::ElementPatternFillerContext>(0);
}

tree::TerminalNode* GQLParser::FullEdgeUndirectedContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}


size_t GQLParser::FullEdgeUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgeUndirected;
}


std::any GQLParser::FullEdgeUndirectedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFullEdgeUndirected(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FullEdgeUndirectedContext* GQLParser::fullEdgeUndirected() {
  FullEdgeUndirectedContext *_localctx = _tracker.createInstance<FullEdgeUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 516, GQLParser::RuleFullEdgeUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2428);
    match(GQLParser::TILDE);
    setState(2429);
    match(GQLParser::LEFT_BRACKET);
    setState(2430);
    elementPatternFiller();
    setState(2431);
    match(GQLParser::RIGHT_BRACKET);
    setState(2432);
    match(GQLParser::TILDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgePointingRightContext ------------------------------------------------------------------

GQLParser::FullEdgePointingRightContext::FullEdgePointingRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FullEdgePointingRightContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}

tree::TerminalNode* GQLParser::FullEdgePointingRightContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

GQLParser::ElementPatternFillerContext* GQLParser::FullEdgePointingRightContext::elementPatternFiller() {
  return getRuleContext<GQLParser::ElementPatternFillerContext>(0);
}

tree::TerminalNode* GQLParser::FullEdgePointingRightContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}

tree::TerminalNode* GQLParser::FullEdgePointingRightContext::RIGHT_ARROW() {
  return getToken(GQLParser::RIGHT_ARROW, 0);
}


size_t GQLParser::FullEdgePointingRightContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgePointingRight;
}


std::any GQLParser::FullEdgePointingRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFullEdgePointingRight(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FullEdgePointingRightContext* GQLParser::fullEdgePointingRight() {
  FullEdgePointingRightContext *_localctx = _tracker.createInstance<FullEdgePointingRightContext>(_ctx, getState());
  enterRule(_localctx, 518, GQLParser::RuleFullEdgePointingRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2434);
    match(GQLParser::MINUS_SIGN);
    setState(2435);
    match(GQLParser::LEFT_BRACKET);
    setState(2436);
    elementPatternFiller();
    setState(2437);
    match(GQLParser::RIGHT_BRACKET);
    setState(2438);
    match(GQLParser::RIGHT_ARROW);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgeLeftOrUndirectedContext ------------------------------------------------------------------

GQLParser::FullEdgeLeftOrUndirectedContext::FullEdgeLeftOrUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FullEdgeLeftOrUndirectedContext::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

std::vector<tree::TerminalNode *> GQLParser::FullEdgeLeftOrUndirectedContext::TILDE() {
  return getTokens(GQLParser::TILDE);
}

tree::TerminalNode* GQLParser::FullEdgeLeftOrUndirectedContext::TILDE(size_t i) {
  return getToken(GQLParser::TILDE, i);
}

tree::TerminalNode* GQLParser::FullEdgeLeftOrUndirectedContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

GQLParser::ElementPatternFillerContext* GQLParser::FullEdgeLeftOrUndirectedContext::elementPatternFiller() {
  return getRuleContext<GQLParser::ElementPatternFillerContext>(0);
}

tree::TerminalNode* GQLParser::FullEdgeLeftOrUndirectedContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}


size_t GQLParser::FullEdgeLeftOrUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgeLeftOrUndirected;
}


std::any GQLParser::FullEdgeLeftOrUndirectedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFullEdgeLeftOrUndirected(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FullEdgeLeftOrUndirectedContext* GQLParser::fullEdgeLeftOrUndirected() {
  FullEdgeLeftOrUndirectedContext *_localctx = _tracker.createInstance<FullEdgeLeftOrUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 520, GQLParser::RuleFullEdgeLeftOrUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2440);
    match(GQLParser::LEFT_ANGLE_BRACKET);
    setState(2441);
    match(GQLParser::TILDE);
    setState(2442);
    match(GQLParser::LEFT_BRACKET);
    setState(2443);
    elementPatternFiller();
    setState(2444);
    match(GQLParser::RIGHT_BRACKET);
    setState(2445);
    match(GQLParser::TILDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgeUndirectedOrRightContext ------------------------------------------------------------------

GQLParser::FullEdgeUndirectedOrRightContext::FullEdgeUndirectedOrRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FullEdgeUndirectedOrRightContext::TILDE() {
  return getToken(GQLParser::TILDE, 0);
}

tree::TerminalNode* GQLParser::FullEdgeUndirectedOrRightContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

GQLParser::ElementPatternFillerContext* GQLParser::FullEdgeUndirectedOrRightContext::elementPatternFiller() {
  return getRuleContext<GQLParser::ElementPatternFillerContext>(0);
}

tree::TerminalNode* GQLParser::FullEdgeUndirectedOrRightContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}

tree::TerminalNode* GQLParser::FullEdgeUndirectedOrRightContext::TILDE_RIGHT_ARROW() {
  return getToken(GQLParser::TILDE_RIGHT_ARROW, 0);
}


size_t GQLParser::FullEdgeUndirectedOrRightContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgeUndirectedOrRight;
}


std::any GQLParser::FullEdgeUndirectedOrRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFullEdgeUndirectedOrRight(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FullEdgeUndirectedOrRightContext* GQLParser::fullEdgeUndirectedOrRight() {
  FullEdgeUndirectedOrRightContext *_localctx = _tracker.createInstance<FullEdgeUndirectedOrRightContext>(_ctx, getState());
  enterRule(_localctx, 522, GQLParser::RuleFullEdgeUndirectedOrRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2447);
    match(GQLParser::TILDE);
    setState(2448);
    match(GQLParser::LEFT_BRACKET);
    setState(2449);
    elementPatternFiller();
    setState(2450);
    match(GQLParser::RIGHT_BRACKET);
    setState(2451);
    match(GQLParser::TILDE_RIGHT_ARROW);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgeLeftOrRightContext ------------------------------------------------------------------

GQLParser::FullEdgeLeftOrRightContext::FullEdgeLeftOrRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FullEdgeLeftOrRightContext::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

tree::TerminalNode* GQLParser::FullEdgeLeftOrRightContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}

tree::TerminalNode* GQLParser::FullEdgeLeftOrRightContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

GQLParser::ElementPatternFillerContext* GQLParser::FullEdgeLeftOrRightContext::elementPatternFiller() {
  return getRuleContext<GQLParser::ElementPatternFillerContext>(0);
}

tree::TerminalNode* GQLParser::FullEdgeLeftOrRightContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}

tree::TerminalNode* GQLParser::FullEdgeLeftOrRightContext::RIGHT_ARROW() {
  return getToken(GQLParser::RIGHT_ARROW, 0);
}


size_t GQLParser::FullEdgeLeftOrRightContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgeLeftOrRight;
}


std::any GQLParser::FullEdgeLeftOrRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFullEdgeLeftOrRight(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FullEdgeLeftOrRightContext* GQLParser::fullEdgeLeftOrRight() {
  FullEdgeLeftOrRightContext *_localctx = _tracker.createInstance<FullEdgeLeftOrRightContext>(_ctx, getState());
  enterRule(_localctx, 524, GQLParser::RuleFullEdgeLeftOrRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2453);
    match(GQLParser::LEFT_ANGLE_BRACKET);
    setState(2454);
    match(GQLParser::MINUS_SIGN);
    setState(2455);
    match(GQLParser::LEFT_BRACKET);
    setState(2456);
    elementPatternFiller();
    setState(2457);
    match(GQLParser::RIGHT_BRACKET);
    setState(2458);
    match(GQLParser::RIGHT_ARROW);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgeAnyDirectionContext ------------------------------------------------------------------

GQLParser::FullEdgeAnyDirectionContext::FullEdgeAnyDirectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GQLParser::FullEdgeAnyDirectionContext::MINUS_SIGN() {
  return getTokens(GQLParser::MINUS_SIGN);
}

tree::TerminalNode* GQLParser::FullEdgeAnyDirectionContext::MINUS_SIGN(size_t i) {
  return getToken(GQLParser::MINUS_SIGN, i);
}

tree::TerminalNode* GQLParser::FullEdgeAnyDirectionContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

GQLParser::ElementPatternFillerContext* GQLParser::FullEdgeAnyDirectionContext::elementPatternFiller() {
  return getRuleContext<GQLParser::ElementPatternFillerContext>(0);
}

tree::TerminalNode* GQLParser::FullEdgeAnyDirectionContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}


size_t GQLParser::FullEdgeAnyDirectionContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgeAnyDirection;
}


std::any GQLParser::FullEdgeAnyDirectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFullEdgeAnyDirection(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FullEdgeAnyDirectionContext* GQLParser::fullEdgeAnyDirection() {
  FullEdgeAnyDirectionContext *_localctx = _tracker.createInstance<FullEdgeAnyDirectionContext>(_ctx, getState());
  enterRule(_localctx, 526, GQLParser::RuleFullEdgeAnyDirection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2460);
    match(GQLParser::MINUS_SIGN);
    setState(2461);
    match(GQLParser::LEFT_BRACKET);
    setState(2462);
    elementPatternFiller();
    setState(2463);
    match(GQLParser::RIGHT_BRACKET);
    setState(2464);
    match(GQLParser::MINUS_SIGN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbbreviatedEdgePatternContext ------------------------------------------------------------------

GQLParser::AbbreviatedEdgePatternContext::AbbreviatedEdgePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::AbbreviatedEdgePatternContext::getRuleIndex() const {
  return GQLParser::RuleAbbreviatedEdgePattern;
}

void GQLParser::AbbreviatedEdgePatternContext::copyFrom(AbbreviatedEdgePatternContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AbbreviatedEdgeLeftOrUndirectedContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::AbbreviatedEdgeLeftOrUndirectedContext::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

tree::TerminalNode* GQLParser::AbbreviatedEdgeLeftOrUndirectedContext::TILDE() {
  return getToken(GQLParser::TILDE, 0);
}

GQLParser::AbbreviatedEdgeLeftOrUndirectedContext::AbbreviatedEdgeLeftOrUndirectedContext(AbbreviatedEdgePatternContext *ctx) { copyFrom(ctx); }


std::any GQLParser::AbbreviatedEdgeLeftOrUndirectedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAbbreviatedEdgeLeftOrUndirected(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AbbreviatedEdgePointingLeftContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::AbbreviatedEdgePointingLeftContext::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

tree::TerminalNode* GQLParser::AbbreviatedEdgePointingLeftContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}

GQLParser::AbbreviatedEdgePointingLeftContext::AbbreviatedEdgePointingLeftContext(AbbreviatedEdgePatternContext *ctx) { copyFrom(ctx); }


std::any GQLParser::AbbreviatedEdgePointingLeftContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAbbreviatedEdgePointingLeft(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AbbreviatedEdgePointingRightContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::AbbreviatedEdgePointingRightContext::RIGHT_ARROW() {
  return getToken(GQLParser::RIGHT_ARROW, 0);
}

GQLParser::AbbreviatedEdgePointingRightContext::AbbreviatedEdgePointingRightContext(AbbreviatedEdgePatternContext *ctx) { copyFrom(ctx); }


std::any GQLParser::AbbreviatedEdgePointingRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAbbreviatedEdgePointingRight(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AbbreviatedEdgeUndirectedOrRightContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::AbbreviatedEdgeUndirectedOrRightContext::TILDE_RIGHT_ARROW() {
  return getToken(GQLParser::TILDE_RIGHT_ARROW, 0);
}

GQLParser::AbbreviatedEdgeUndirectedOrRightContext::AbbreviatedEdgeUndirectedOrRightContext(AbbreviatedEdgePatternContext *ctx) { copyFrom(ctx); }


std::any GQLParser::AbbreviatedEdgeUndirectedOrRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAbbreviatedEdgeUndirectedOrRight(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AbbreviatedEdgeUndirectedContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::AbbreviatedEdgeUndirectedContext::TILDE() {
  return getToken(GQLParser::TILDE, 0);
}

GQLParser::AbbreviatedEdgeUndirectedContext::AbbreviatedEdgeUndirectedContext(AbbreviatedEdgePatternContext *ctx) { copyFrom(ctx); }


std::any GQLParser::AbbreviatedEdgeUndirectedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAbbreviatedEdgeUndirected(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AbbreviatedEdgeLeftOrRightContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::AbbreviatedEdgeLeftOrRightContext::LEFT_MINUS_RIGHT() {
  return getToken(GQLParser::LEFT_MINUS_RIGHT, 0);
}

GQLParser::AbbreviatedEdgeLeftOrRightContext::AbbreviatedEdgeLeftOrRightContext(AbbreviatedEdgePatternContext *ctx) { copyFrom(ctx); }


std::any GQLParser::AbbreviatedEdgeLeftOrRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAbbreviatedEdgeLeftOrRight(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AbbreviatedEdgeAnyDirectionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::AbbreviatedEdgeAnyDirectionContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}

GQLParser::AbbreviatedEdgeAnyDirectionContext::AbbreviatedEdgeAnyDirectionContext(AbbreviatedEdgePatternContext *ctx) { copyFrom(ctx); }


std::any GQLParser::AbbreviatedEdgeAnyDirectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAbbreviatedEdgeAnyDirection(this);
  else
    return visitor->visitChildren(this);
}
GQLParser::AbbreviatedEdgePatternContext* GQLParser::abbreviatedEdgePattern() {
  AbbreviatedEdgePatternContext *_localctx = _tracker.createInstance<AbbreviatedEdgePatternContext>(_ctx, getState());
  enterRule(_localctx, 528, GQLParser::RuleAbbreviatedEdgePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2475);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<GQLParser::AbbreviatedEdgePointingLeftContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(2466);
      match(GQLParser::LEFT_ANGLE_BRACKET);
      setState(2467);
      match(GQLParser::MINUS_SIGN);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<GQLParser::AbbreviatedEdgeUndirectedContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(2468);
      match(GQLParser::TILDE);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<GQLParser::AbbreviatedEdgePointingRightContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(2469);
      match(GQLParser::RIGHT_ARROW);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<GQLParser::AbbreviatedEdgeLeftOrUndirectedContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(2470);
      match(GQLParser::LEFT_ANGLE_BRACKET);
      setState(2471);
      match(GQLParser::TILDE);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<GQLParser::AbbreviatedEdgeUndirectedOrRightContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(2472);
      match(GQLParser::TILDE_RIGHT_ARROW);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<GQLParser::AbbreviatedEdgeLeftOrRightContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(2473);
      match(GQLParser::LEFT_MINUS_RIGHT);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<GQLParser::AbbreviatedEdgeAnyDirectionContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(2474);
      match(GQLParser::MINUS_SIGN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParenthesizedPathPatternExpressionContext ------------------------------------------------------------------

GQLParser::ParenthesizedPathPatternExpressionContext::ParenthesizedPathPatternExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ParenthesizedPathPatternExpressionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::PathPatternExpressionContext* GQLParser::ParenthesizedPathPatternExpressionContext::pathPatternExpression() {
  return getRuleContext<GQLParser::PathPatternExpressionContext>(0);
}

tree::TerminalNode* GQLParser::ParenthesizedPathPatternExpressionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::SubpathVariableDeclarationContext* GQLParser::ParenthesizedPathPatternExpressionContext::subpathVariableDeclaration() {
  return getRuleContext<GQLParser::SubpathVariableDeclarationContext>(0);
}

GQLParser::PathModePrefixContext* GQLParser::ParenthesizedPathPatternExpressionContext::pathModePrefix() {
  return getRuleContext<GQLParser::PathModePrefixContext>(0);
}

GQLParser::ParenthesizedPathPatternWhereClauseContext* GQLParser::ParenthesizedPathPatternExpressionContext::parenthesizedPathPatternWhereClause() {
  return getRuleContext<GQLParser::ParenthesizedPathPatternWhereClauseContext>(0);
}


size_t GQLParser::ParenthesizedPathPatternExpressionContext::getRuleIndex() const {
  return GQLParser::RuleParenthesizedPathPatternExpression;
}


std::any GQLParser::ParenthesizedPathPatternExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitParenthesizedPathPatternExpression(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ParenthesizedPathPatternExpressionContext* GQLParser::parenthesizedPathPatternExpression() {
  ParenthesizedPathPatternExpressionContext *_localctx = _tracker.createInstance<ParenthesizedPathPatternExpressionContext>(_ctx, getState());
  enterRule(_localctx, 530, GQLParser::RuleParenthesizedPathPatternExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2477);
    match(GQLParser::LEFT_PAREN);
    setState(2479);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 67) != 0)) {
      setState(2478);
      subpathVariableDeclaration();
    }
    setState(2482);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ACYCLIC || ((((_la - 229) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 229)) & 140737490452481) != 0)) {
      setState(2481);
      pathModePrefix();
    }
    setState(2484);
    pathPatternExpression();
    setState(2486);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::WHERE) {
      setState(2485);
      parenthesizedPathPatternWhereClause();
    }
    setState(2488);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubpathVariableDeclarationContext ------------------------------------------------------------------

GQLParser::SubpathVariableDeclarationContext::SubpathVariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SubpathVariableContext* GQLParser::SubpathVariableDeclarationContext::subpathVariable() {
  return getRuleContext<GQLParser::SubpathVariableContext>(0);
}

tree::TerminalNode* GQLParser::SubpathVariableDeclarationContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}


size_t GQLParser::SubpathVariableDeclarationContext::getRuleIndex() const {
  return GQLParser::RuleSubpathVariableDeclaration;
}


std::any GQLParser::SubpathVariableDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSubpathVariableDeclaration(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SubpathVariableDeclarationContext* GQLParser::subpathVariableDeclaration() {
  SubpathVariableDeclarationContext *_localctx = _tracker.createInstance<SubpathVariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 532, GQLParser::RuleSubpathVariableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2490);
    subpathVariable();
    setState(2491);
    match(GQLParser::EQUALS_OPERATOR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParenthesizedPathPatternWhereClauseContext ------------------------------------------------------------------

GQLParser::ParenthesizedPathPatternWhereClauseContext::ParenthesizedPathPatternWhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ParenthesizedPathPatternWhereClauseContext::WHERE() {
  return getToken(GQLParser::WHERE, 0);
}

GQLParser::ExpressionContext* GQLParser::ParenthesizedPathPatternWhereClauseContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}


size_t GQLParser::ParenthesizedPathPatternWhereClauseContext::getRuleIndex() const {
  return GQLParser::RuleParenthesizedPathPatternWhereClause;
}


std::any GQLParser::ParenthesizedPathPatternWhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitParenthesizedPathPatternWhereClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ParenthesizedPathPatternWhereClauseContext* GQLParser::parenthesizedPathPatternWhereClause() {
  ParenthesizedPathPatternWhereClauseContext *_localctx = _tracker.createInstance<ParenthesizedPathPatternWhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 534, GQLParser::RuleParenthesizedPathPatternWhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2493);
    match(GQLParser::WHERE);
    setState(2494);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertGraphPatternContext ------------------------------------------------------------------

GQLParser::InsertGraphPatternContext::InsertGraphPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::InsertPathPatternListContext* GQLParser::InsertGraphPatternContext::insertPathPatternList() {
  return getRuleContext<GQLParser::InsertPathPatternListContext>(0);
}


size_t GQLParser::InsertGraphPatternContext::getRuleIndex() const {
  return GQLParser::RuleInsertGraphPattern;
}


std::any GQLParser::InsertGraphPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitInsertGraphPattern(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::InsertGraphPatternContext* GQLParser::insertGraphPattern() {
  InsertGraphPatternContext *_localctx = _tracker.createInstance<InsertGraphPatternContext>(_ctx, getState());
  enterRule(_localctx, 536, GQLParser::RuleInsertGraphPattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2496);
    insertPathPatternList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertPathPatternListContext ------------------------------------------------------------------

GQLParser::InsertPathPatternListContext::InsertPathPatternListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::InsertPathPatternContext *> GQLParser::InsertPathPatternListContext::insertPathPattern() {
  return getRuleContexts<GQLParser::InsertPathPatternContext>();
}

GQLParser::InsertPathPatternContext* GQLParser::InsertPathPatternListContext::insertPathPattern(size_t i) {
  return getRuleContext<GQLParser::InsertPathPatternContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::InsertPathPatternListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::InsertPathPatternListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::InsertPathPatternListContext::getRuleIndex() const {
  return GQLParser::RuleInsertPathPatternList;
}


std::any GQLParser::InsertPathPatternListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitInsertPathPatternList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::InsertPathPatternListContext* GQLParser::insertPathPatternList() {
  InsertPathPatternListContext *_localctx = _tracker.createInstance<InsertPathPatternListContext>(_ctx, getState());
  enterRule(_localctx, 538, GQLParser::RuleInsertPathPatternList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2498);
    insertPathPattern();
    setState(2503);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(2499);
      match(GQLParser::COMMA);
      setState(2500);
      insertPathPattern();
      setState(2505);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertPathPatternContext ------------------------------------------------------------------

GQLParser::InsertPathPatternContext::InsertPathPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::InsertNodePatternContext *> GQLParser::InsertPathPatternContext::insertNodePattern() {
  return getRuleContexts<GQLParser::InsertNodePatternContext>();
}

GQLParser::InsertNodePatternContext* GQLParser::InsertPathPatternContext::insertNodePattern(size_t i) {
  return getRuleContext<GQLParser::InsertNodePatternContext>(i);
}

std::vector<GQLParser::InsertEdgePatternContext *> GQLParser::InsertPathPatternContext::insertEdgePattern() {
  return getRuleContexts<GQLParser::InsertEdgePatternContext>();
}

GQLParser::InsertEdgePatternContext* GQLParser::InsertPathPatternContext::insertEdgePattern(size_t i) {
  return getRuleContext<GQLParser::InsertEdgePatternContext>(i);
}


size_t GQLParser::InsertPathPatternContext::getRuleIndex() const {
  return GQLParser::RuleInsertPathPattern;
}


std::any GQLParser::InsertPathPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitInsertPathPattern(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::InsertPathPatternContext* GQLParser::insertPathPattern() {
  InsertPathPatternContext *_localctx = _tracker.createInstance<InsertPathPatternContext>(_ctx, getState());
  enterRule(_localctx, 540, GQLParser::RuleInsertPathPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2506);
    insertNodePattern();
    setState(2512);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 33579008) != 0)) {
      setState(2507);
      insertEdgePattern();
      setState(2508);
      insertNodePattern();
      setState(2514);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertNodePatternContext ------------------------------------------------------------------

GQLParser::InsertNodePatternContext::InsertNodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::InsertNodePatternContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::InsertNodePatternContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::InsertElementPatternFillerContext* GQLParser::InsertNodePatternContext::insertElementPatternFiller() {
  return getRuleContext<GQLParser::InsertElementPatternFillerContext>(0);
}


size_t GQLParser::InsertNodePatternContext::getRuleIndex() const {
  return GQLParser::RuleInsertNodePattern;
}


std::any GQLParser::InsertNodePatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitInsertNodePattern(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::InsertNodePatternContext* GQLParser::insertNodePattern() {
  InsertNodePatternContext *_localctx = _tracker.createInstance<InsertNodePatternContext>(_ctx, getState());
  enterRule(_localctx, 542, GQLParser::RuleInsertNodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2515);
    match(GQLParser::LEFT_PAREN);
    setState(2517);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -268434416) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & -1) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & 3298534883327) != 0) || ((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 67) != 0)) {
      setState(2516);
      insertElementPatternFiller();
    }
    setState(2519);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertEdgePatternContext ------------------------------------------------------------------

GQLParser::InsertEdgePatternContext::InsertEdgePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::InsertEdgePointingLeftContext* GQLParser::InsertEdgePatternContext::insertEdgePointingLeft() {
  return getRuleContext<GQLParser::InsertEdgePointingLeftContext>(0);
}

GQLParser::InsertEdgePointingRightContext* GQLParser::InsertEdgePatternContext::insertEdgePointingRight() {
  return getRuleContext<GQLParser::InsertEdgePointingRightContext>(0);
}

GQLParser::InsertEdgeUndirectedContext* GQLParser::InsertEdgePatternContext::insertEdgeUndirected() {
  return getRuleContext<GQLParser::InsertEdgeUndirectedContext>(0);
}


size_t GQLParser::InsertEdgePatternContext::getRuleIndex() const {
  return GQLParser::RuleInsertEdgePattern;
}


std::any GQLParser::InsertEdgePatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitInsertEdgePattern(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::InsertEdgePatternContext* GQLParser::insertEdgePattern() {
  InsertEdgePatternContext *_localctx = _tracker.createInstance<InsertEdgePatternContext>(_ctx, getState());
  enterRule(_localctx, 544, GQLParser::RuleInsertEdgePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2524);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LEFT_ANGLE_BRACKET: {
        enterOuterAlt(_localctx, 1);
        setState(2521);
        insertEdgePointingLeft();
        break;
      }

      case GQLParser::MINUS_SIGN: {
        enterOuterAlt(_localctx, 2);
        setState(2522);
        insertEdgePointingRight();
        break;
      }

      case GQLParser::TILDE: {
        enterOuterAlt(_localctx, 3);
        setState(2523);
        insertEdgeUndirected();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertEdgePointingLeftContext ------------------------------------------------------------------

GQLParser::InsertEdgePointingLeftContext::InsertEdgePointingLeftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::InsertEdgePointingLeftContext::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

std::vector<tree::TerminalNode *> GQLParser::InsertEdgePointingLeftContext::MINUS_SIGN() {
  return getTokens(GQLParser::MINUS_SIGN);
}

tree::TerminalNode* GQLParser::InsertEdgePointingLeftContext::MINUS_SIGN(size_t i) {
  return getToken(GQLParser::MINUS_SIGN, i);
}

tree::TerminalNode* GQLParser::InsertEdgePointingLeftContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

tree::TerminalNode* GQLParser::InsertEdgePointingLeftContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}

GQLParser::InsertElementPatternFillerContext* GQLParser::InsertEdgePointingLeftContext::insertElementPatternFiller() {
  return getRuleContext<GQLParser::InsertElementPatternFillerContext>(0);
}


size_t GQLParser::InsertEdgePointingLeftContext::getRuleIndex() const {
  return GQLParser::RuleInsertEdgePointingLeft;
}


std::any GQLParser::InsertEdgePointingLeftContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitInsertEdgePointingLeft(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::InsertEdgePointingLeftContext* GQLParser::insertEdgePointingLeft() {
  InsertEdgePointingLeftContext *_localctx = _tracker.createInstance<InsertEdgePointingLeftContext>(_ctx, getState());
  enterRule(_localctx, 546, GQLParser::RuleInsertEdgePointingLeft);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2526);
    match(GQLParser::LEFT_ANGLE_BRACKET);
    setState(2527);
    match(GQLParser::MINUS_SIGN);
    setState(2528);
    match(GQLParser::LEFT_BRACKET);
    setState(2530);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -268434416) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & -1) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & 3298534883327) != 0) || ((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 67) != 0)) {
      setState(2529);
      insertElementPatternFiller();
    }
    setState(2532);
    match(GQLParser::RIGHT_BRACKET);
    setState(2533);
    match(GQLParser::MINUS_SIGN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertEdgePointingRightContext ------------------------------------------------------------------

GQLParser::InsertEdgePointingRightContext::InsertEdgePointingRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::InsertEdgePointingRightContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}

tree::TerminalNode* GQLParser::InsertEdgePointingRightContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

tree::TerminalNode* GQLParser::InsertEdgePointingRightContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}

tree::TerminalNode* GQLParser::InsertEdgePointingRightContext::RIGHT_ARROW() {
  return getToken(GQLParser::RIGHT_ARROW, 0);
}

GQLParser::InsertElementPatternFillerContext* GQLParser::InsertEdgePointingRightContext::insertElementPatternFiller() {
  return getRuleContext<GQLParser::InsertElementPatternFillerContext>(0);
}


size_t GQLParser::InsertEdgePointingRightContext::getRuleIndex() const {
  return GQLParser::RuleInsertEdgePointingRight;
}


std::any GQLParser::InsertEdgePointingRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitInsertEdgePointingRight(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::InsertEdgePointingRightContext* GQLParser::insertEdgePointingRight() {
  InsertEdgePointingRightContext *_localctx = _tracker.createInstance<InsertEdgePointingRightContext>(_ctx, getState());
  enterRule(_localctx, 548, GQLParser::RuleInsertEdgePointingRight);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2535);
    match(GQLParser::MINUS_SIGN);
    setState(2536);
    match(GQLParser::LEFT_BRACKET);
    setState(2538);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -268434416) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & -1) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & 3298534883327) != 0) || ((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 67) != 0)) {
      setState(2537);
      insertElementPatternFiller();
    }
    setState(2540);
    match(GQLParser::RIGHT_BRACKET);
    setState(2541);
    match(GQLParser::RIGHT_ARROW);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertEdgeUndirectedContext ------------------------------------------------------------------

GQLParser::InsertEdgeUndirectedContext::InsertEdgeUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GQLParser::InsertEdgeUndirectedContext::TILDE() {
  return getTokens(GQLParser::TILDE);
}

tree::TerminalNode* GQLParser::InsertEdgeUndirectedContext::TILDE(size_t i) {
  return getToken(GQLParser::TILDE, i);
}

tree::TerminalNode* GQLParser::InsertEdgeUndirectedContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

tree::TerminalNode* GQLParser::InsertEdgeUndirectedContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}

GQLParser::InsertElementPatternFillerContext* GQLParser::InsertEdgeUndirectedContext::insertElementPatternFiller() {
  return getRuleContext<GQLParser::InsertElementPatternFillerContext>(0);
}


size_t GQLParser::InsertEdgeUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleInsertEdgeUndirected;
}


std::any GQLParser::InsertEdgeUndirectedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitInsertEdgeUndirected(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::InsertEdgeUndirectedContext* GQLParser::insertEdgeUndirected() {
  InsertEdgeUndirectedContext *_localctx = _tracker.createInstance<InsertEdgeUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 550, GQLParser::RuleInsertEdgeUndirected);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2543);
    match(GQLParser::TILDE);
    setState(2544);
    match(GQLParser::LEFT_BRACKET);
    setState(2546);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -268434416) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & -1) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & 3298534883327) != 0) || ((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 67) != 0)) {
      setState(2545);
      insertElementPatternFiller();
    }
    setState(2548);
    match(GQLParser::RIGHT_BRACKET);
    setState(2549);
    match(GQLParser::TILDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertElementPatternFillerContext ------------------------------------------------------------------

GQLParser::InsertElementPatternFillerContext::InsertElementPatternFillerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementVariableDeclarationContext* GQLParser::InsertElementPatternFillerContext::elementVariableDeclaration() {
  return getRuleContext<GQLParser::ElementVariableDeclarationContext>(0);
}

GQLParser::LabelAndPropertySetSpecificationContext* GQLParser::InsertElementPatternFillerContext::labelAndPropertySetSpecification() {
  return getRuleContext<GQLParser::LabelAndPropertySetSpecificationContext>(0);
}


size_t GQLParser::InsertElementPatternFillerContext::getRuleIndex() const {
  return GQLParser::RuleInsertElementPatternFiller;
}


std::any GQLParser::InsertElementPatternFillerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitInsertElementPatternFiller(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::InsertElementPatternFillerContext* GQLParser::insertElementPatternFiller() {
  InsertElementPatternFillerContext *_localctx = _tracker.createInstance<InsertElementPatternFillerContext>(_ctx, getState());
  enterRule(_localctx, 552, GQLParser::RuleInsertElementPatternFiller);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2556);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2551);
      elementVariableDeclaration();
      setState(2552);
      labelAndPropertySetSpecification();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2554);
      elementVariableDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2555);
      labelAndPropertySetSpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelAndPropertySetSpecificationContext ------------------------------------------------------------------

GQLParser::LabelAndPropertySetSpecificationContext::LabelAndPropertySetSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IsOrColonContext* GQLParser::LabelAndPropertySetSpecificationContext::isOrColon() {
  return getRuleContext<GQLParser::IsOrColonContext>(0);
}

GQLParser::LabelSetSpecificationContext* GQLParser::LabelAndPropertySetSpecificationContext::labelSetSpecification() {
  return getRuleContext<GQLParser::LabelSetSpecificationContext>(0);
}

GQLParser::ElementPropertySpecificationContext* GQLParser::LabelAndPropertySetSpecificationContext::elementPropertySpecification() {
  return getRuleContext<GQLParser::ElementPropertySpecificationContext>(0);
}


size_t GQLParser::LabelAndPropertySetSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleLabelAndPropertySetSpecification;
}


std::any GQLParser::LabelAndPropertySetSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLabelAndPropertySetSpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LabelAndPropertySetSpecificationContext* GQLParser::labelAndPropertySetSpecification() {
  LabelAndPropertySetSpecificationContext *_localctx = _tracker.createInstance<LabelAndPropertySetSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 554, GQLParser::RuleLabelAndPropertySetSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2566);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2558);
      isOrColon();
      setState(2559);
      labelSetSpecification();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2561);
      isOrColon();
      setState(2562);
      labelSetSpecification();
      setState(2563);
      elementPropertySpecification();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2565);
      elementPropertySpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelExpressionContext ------------------------------------------------------------------

GQLParser::LabelExpressionContext::LabelExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::LabelTermContext *> GQLParser::LabelExpressionContext::labelTerm() {
  return getRuleContexts<GQLParser::LabelTermContext>();
}

GQLParser::LabelTermContext* GQLParser::LabelExpressionContext::labelTerm(size_t i) {
  return getRuleContext<GQLParser::LabelTermContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::LabelExpressionContext::VERTICAL_BAR() {
  return getTokens(GQLParser::VERTICAL_BAR);
}

tree::TerminalNode* GQLParser::LabelExpressionContext::VERTICAL_BAR(size_t i) {
  return getToken(GQLParser::VERTICAL_BAR, i);
}


size_t GQLParser::LabelExpressionContext::getRuleIndex() const {
  return GQLParser::RuleLabelExpression;
}


std::any GQLParser::LabelExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLabelExpression(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LabelExpressionContext* GQLParser::labelExpression() {
  LabelExpressionContext *_localctx = _tracker.createInstance<LabelExpressionContext>(_ctx, getState());
  enterRule(_localctx, 556, GQLParser::RuleLabelExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2568);
    labelTerm();
    setState(2573);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2569);
        match(GQLParser::VERTICAL_BAR);
        setState(2570);
        labelTerm(); 
      }
      setState(2575);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelTermContext ------------------------------------------------------------------

GQLParser::LabelTermContext::LabelTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::LabelFactorContext *> GQLParser::LabelTermContext::labelFactor() {
  return getRuleContexts<GQLParser::LabelFactorContext>();
}

GQLParser::LabelFactorContext* GQLParser::LabelTermContext::labelFactor(size_t i) {
  return getRuleContext<GQLParser::LabelFactorContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::LabelTermContext::AMPERSAND() {
  return getTokens(GQLParser::AMPERSAND);
}

tree::TerminalNode* GQLParser::LabelTermContext::AMPERSAND(size_t i) {
  return getToken(GQLParser::AMPERSAND, i);
}


size_t GQLParser::LabelTermContext::getRuleIndex() const {
  return GQLParser::RuleLabelTerm;
}


std::any GQLParser::LabelTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLabelTerm(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LabelTermContext* GQLParser::labelTerm() {
  LabelTermContext *_localctx = _tracker.createInstance<LabelTermContext>(_ctx, getState());
  enterRule(_localctx, 558, GQLParser::RuleLabelTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2576);
    labelFactor();
    setState(2581);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2577);
        match(GQLParser::AMPERSAND);
        setState(2578);
        labelFactor(); 
      }
      setState(2583);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelFactorContext ------------------------------------------------------------------

GQLParser::LabelFactorContext::LabelFactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::LabelPrimaryContext* GQLParser::LabelFactorContext::labelPrimary() {
  return getRuleContext<GQLParser::LabelPrimaryContext>(0);
}

tree::TerminalNode* GQLParser::LabelFactorContext::EXCLAMATION_MARK() {
  return getToken(GQLParser::EXCLAMATION_MARK, 0);
}


size_t GQLParser::LabelFactorContext::getRuleIndex() const {
  return GQLParser::RuleLabelFactor;
}


std::any GQLParser::LabelFactorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLabelFactor(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LabelFactorContext* GQLParser::labelFactor() {
  LabelFactorContext *_localctx = _tracker.createInstance<LabelFactorContext>(_ctx, getState());
  enterRule(_localctx, 560, GQLParser::RuleLabelFactor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2585);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::EXCLAMATION_MARK) {
      setState(2584);
      match(GQLParser::EXCLAMATION_MARK);
    }
    setState(2587);
    labelPrimary();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelPrimaryContext ------------------------------------------------------------------

GQLParser::LabelPrimaryContext::LabelPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::LabelNameContext* GQLParser::LabelPrimaryContext::labelName() {
  return getRuleContext<GQLParser::LabelNameContext>(0);
}

GQLParser::WildcardLabelContext* GQLParser::LabelPrimaryContext::wildcardLabel() {
  return getRuleContext<GQLParser::WildcardLabelContext>(0);
}

GQLParser::ParenthesizedLabelExpressionContext* GQLParser::LabelPrimaryContext::parenthesizedLabelExpression() {
  return getRuleContext<GQLParser::ParenthesizedLabelExpressionContext>(0);
}


size_t GQLParser::LabelPrimaryContext::getRuleIndex() const {
  return GQLParser::RuleLabelPrimary;
}


std::any GQLParser::LabelPrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLabelPrimary(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LabelPrimaryContext* GQLParser::labelPrimary() {
  LabelPrimaryContext *_localctx = _tracker.createInstance<LabelPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 562, GQLParser::RuleLabelPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2592);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ACYCLIC:
      case GQLParser::ALL:
      case GQLParser::ALL_DIFFERENT:
      case GQLParser::AND:
      case GQLParser::ANY:
      case GQLParser::ARRAY:
      case GQLParser::AS:
      case GQLParser::ASC:
      case GQLParser::ASCENDING:
      case GQLParser::ASIN:
      case GQLParser::AT:
      case GQLParser::ATAN:
      case GQLParser::AVG:
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::BINARY:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::BOOL:
      case GQLParser::BOOLEAN:
      case GQLParser::BOTH:
      case GQLParser::BTRIM:
      case GQLParser::BY:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::BYTES:
      case GQLParser::CALL:
      case GQLParser::CASE:
      case GQLParser::CAST:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::CHARACTERISTICS:
      case GQLParser::CLOSE:
      case GQLParser::COALESCE:
      case GQLParser::COLLECT:
      case GQLParser::COMMIT:
      case GQLParser::CONNECTING:
      case GQLParser::COPY:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::COUNT:
      case GQLParser::CREATE:
      case GQLParser::CURRENT_DATE:
      case GQLParser::CURRENT_GRAPH:
      case GQLParser::CURRENT_PROPERTY_GRAPH:
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::CURRENT_TIME:
      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::CURRENT_USER:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DEC:
      case GQLParser::DECIMAL:
      case GQLParser::DEGREES:
      case GQLParser::DELETE:
      case GQLParser::DESC:
      case GQLParser::DESCENDING:
      case GQLParser::DESTINATION:
      case GQLParser::DETACH:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::DISTINCT:
      case GQLParser::DOUBLE:
      case GQLParser::DROP:
      case GQLParser::DURATION:
      case GQLParser::DURATION_BETWEEN:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENT_ID:
      case GQLParser::ELEMENTS:
      case GQLParser::ELSE:
      case GQLParser::END:
      case GQLParser::EXCEPT:
      case GQLParser::EXISTS:
      case GQLParser::EXP:
      case GQLParser::K_FALSE:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FIRST:
      case GQLParser::FLOAT:
      case GQLParser::FLOAT128:
      case GQLParser::FLOAT16:
      case GQLParser::FLOAT256:
      case GQLParser::FLOAT32:
      case GQLParser::FLOAT64:
      case GQLParser::FLOOR:
      case GQLParser::FOR:
      case GQLParser::FROM:
      case GQLParser::GRAPH:
      case GQLParser::GROUP:
      case GQLParser::GROUPS:
      case GQLParser::HAVING:
      case GQLParser::HOME_GRAPH:
      case GQLParser::HOME_PROPERTY_GRAPH:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::I_DONT_KNOW_1:
      case GQLParser::I_DONT_KNOW_2:
      case GQLParser::I_DONT_KNOW_3:
      case GQLParser::I_DONT_KNOW_4:
      case GQLParser::I_DONT_KNOW_5:
      case GQLParser::IF:
      case GQLParser::IN:
      case GQLParser::INSERT:
      case GQLParser::INT:
      case GQLParser::INT8:
      case GQLParser::INT16:
      case GQLParser::INT32:
      case GQLParser::INT64:
      case GQLParser::INT128:
      case GQLParser::INT256:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::INTERSECT:
      case GQLParser::IS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::LEADING:
      case GQLParser::LEFT:
      case GQLParser::LET:
      case GQLParser::LIKE:
      case GQLParser::LIMIT:
      case GQLParser::LIST:
      case GQLParser::LN:
      case GQLParser::LOCAL:
      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIME:
      case GQLParser::LOCAL_TIMESTAMP:
      case GQLParser::LOG:
      case GQLParser::LOG10:
      case GQLParser::LOWER:
      case GQLParser::LTRIM:
      case GQLParser::MATCH:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::MOD:
      case GQLParser::NEXT:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODETACH:
      case GQLParser::NORMALIZE:
      case GQLParser::NORMALIZED:
      case GQLParser::NOT:
      case GQLParser::NULL_:
      case GQLParser::NULLIF:
      case GQLParser::NULLS:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::OF:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::ONLY:
      case GQLParser::OPEN:
      case GQLParser::OPTIONAL:
      case GQLParser::OR:
      case GQLParser::ORDER:
      case GQLParser::ORDINALITY:
      case GQLParser::OTHERWISE:
      case GQLParser::PARAMETER:
      case GQLParser::PARAMETERS:
      case GQLParser::PATH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::PATHS:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::POWER:
      case GQLParser::PRECISION:
      case GQLParser::PROJECT:
      case GQLParser::PROPERTY:
      case GQLParser::PROPERTY_EXISTS:
      case GQLParser::RADIANS:
      case GQLParser::READ:
      case GQLParser::REAL:
      case GQLParser::RECORD:
      case GQLParser::REMOVE:
      case GQLParser::REPEATABLE:
      case GQLParser::REPLACE:
      case GQLParser::RESET:
      case GQLParser::RETURN:
      case GQLParser::ROLLBACK:
      case GQLParser::RTRIM:
      case GQLParser::RIGHT:
      case GQLParser::SAME:
      case GQLParser::SCHEMA:
      case GQLParser::SELECT:
      case GQLParser::SESSION:
      case GQLParser::SET:
      case GQLParser::SHORTEST:
      case GQLParser::SIGNED:
      case GQLParser::SIMPLE:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::SOURCE:
      case GQLParser::SQRT:
      case GQLParser::START:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::STRING:
      case GQLParser::SUM:
      case GQLParser::TABLE:
      case GQLParser::TAN:
      case GQLParser::TANH:
      case GQLParser::TEMP:
      case GQLParser::THEN:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::TIMEZONE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRAILING:
      case GQLParser::TRANSACTION:
      case GQLParser::TRIM:
      case GQLParser::K_TRUE:
      case GQLParser::TYPE:
      case GQLParser::TYPED:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT128:
      case GQLParser::UINT16:
      case GQLParser::UINT256:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT8:
      case GQLParser::UNDIRECTED:
      case GQLParser::UNION:
      case GQLParser::UNKNOWN:
      case GQLParser::UNSIGNED:
      case GQLParser::UPPER:
      case GQLParser::USE:
      case GQLParser::USMALLINT:
      case GQLParser::VALUE:
      case GQLParser::VARBINARY:
      case GQLParser::VARCHAR:
      case GQLParser::VARIABLE:
      case GQLParser::WALK:
      case GQLParser::WHEN:
      case GQLParser::WHERE:
      case GQLParser::WITH:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::XOR:
      case GQLParser::YIELD:
      case GQLParser::ZONE:
      case GQLParser::ZONED:
      case GQLParser::ZONED_DATETIME:
      case GQLParser::ZONED_TIME:
      case GQLParser::INTERVAL_DAY:
      case GQLParser::INTERVAL_WEEK:
      case GQLParser::INTERVAL_MONTH:
      case GQLParser::INTERVAL_YEAR:
      case GQLParser::EDGE_SYNONYM:
      case GQLParser::EDGES_SYNONYM:
      case GQLParser::NODE_SYNONYM:
      case GQLParser::KEY_WORD:
      case GQLParser::PRE_RESERVED_WORD:
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(2589);
        labelName();
        break;
      }

      case GQLParser::PERCENT: {
        enterOuterAlt(_localctx, 2);
        setState(2590);
        wildcardLabel();
        break;
      }

      case GQLParser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 3);
        setState(2591);
        parenthesizedLabelExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WildcardLabelContext ------------------------------------------------------------------

GQLParser::WildcardLabelContext::WildcardLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::WildcardLabelContext::PERCENT() {
  return getToken(GQLParser::PERCENT, 0);
}


size_t GQLParser::WildcardLabelContext::getRuleIndex() const {
  return GQLParser::RuleWildcardLabel;
}


std::any GQLParser::WildcardLabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitWildcardLabel(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::WildcardLabelContext* GQLParser::wildcardLabel() {
  WildcardLabelContext *_localctx = _tracker.createInstance<WildcardLabelContext>(_ctx, getState());
  enterRule(_localctx, 564, GQLParser::RuleWildcardLabel);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2594);
    match(GQLParser::PERCENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParenthesizedLabelExpressionContext ------------------------------------------------------------------

GQLParser::ParenthesizedLabelExpressionContext::ParenthesizedLabelExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ParenthesizedLabelExpressionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::LabelExpressionContext* GQLParser::ParenthesizedLabelExpressionContext::labelExpression() {
  return getRuleContext<GQLParser::LabelExpressionContext>(0);
}

tree::TerminalNode* GQLParser::ParenthesizedLabelExpressionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::ParenthesizedLabelExpressionContext::getRuleIndex() const {
  return GQLParser::RuleParenthesizedLabelExpression;
}


std::any GQLParser::ParenthesizedLabelExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitParenthesizedLabelExpression(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ParenthesizedLabelExpressionContext* GQLParser::parenthesizedLabelExpression() {
  ParenthesizedLabelExpressionContext *_localctx = _tracker.createInstance<ParenthesizedLabelExpressionContext>(_ctx, getState());
  enterRule(_localctx, 566, GQLParser::RuleParenthesizedLabelExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2596);
    match(GQLParser::LEFT_PAREN);
    setState(2597);
    labelExpression();
    setState(2598);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternQuantifierContext ------------------------------------------------------------------

GQLParser::GraphPatternQuantifierContext::GraphPatternQuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GraphPatternQuantifierContext::ASTERISK() {
  return getToken(GQLParser::ASTERISK, 0);
}

tree::TerminalNode* GQLParser::GraphPatternQuantifierContext::PLUS_SIGN() {
  return getToken(GQLParser::PLUS_SIGN, 0);
}

GQLParser::FixedQuantifierContext* GQLParser::GraphPatternQuantifierContext::fixedQuantifier() {
  return getRuleContext<GQLParser::FixedQuantifierContext>(0);
}

GQLParser::GeneralQuantifierContext* GQLParser::GraphPatternQuantifierContext::generalQuantifier() {
  return getRuleContext<GQLParser::GeneralQuantifierContext>(0);
}


size_t GQLParser::GraphPatternQuantifierContext::getRuleIndex() const {
  return GQLParser::RuleGraphPatternQuantifier;
}


std::any GQLParser::GraphPatternQuantifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphPatternQuantifier(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphPatternQuantifierContext* GQLParser::graphPatternQuantifier() {
  GraphPatternQuantifierContext *_localctx = _tracker.createInstance<GraphPatternQuantifierContext>(_ctx, getState());
  enterRule(_localctx, 568, GQLParser::RuleGraphPatternQuantifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2604);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 234, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2600);
      match(GQLParser::ASTERISK);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2601);
      match(GQLParser::PLUS_SIGN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2602);
      fixedQuantifier();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2603);
      generalQuantifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FixedQuantifierContext ------------------------------------------------------------------

GQLParser::FixedQuantifierContext::FixedQuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FixedQuantifierContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

tree::TerminalNode* GQLParser::FixedQuantifierContext::UNSIGNED_DECIMAL_INTEGER() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_INTEGER, 0);
}

tree::TerminalNode* GQLParser::FixedQuantifierContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}


size_t GQLParser::FixedQuantifierContext::getRuleIndex() const {
  return GQLParser::RuleFixedQuantifier;
}


std::any GQLParser::FixedQuantifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFixedQuantifier(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FixedQuantifierContext* GQLParser::fixedQuantifier() {
  FixedQuantifierContext *_localctx = _tracker.createInstance<FixedQuantifierContext>(_ctx, getState());
  enterRule(_localctx, 570, GQLParser::RuleFixedQuantifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2606);
    match(GQLParser::LEFT_BRACE);
    setState(2607);
    match(GQLParser::UNSIGNED_DECIMAL_INTEGER);
    setState(2608);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneralQuantifierContext ------------------------------------------------------------------

GQLParser::GeneralQuantifierContext::GeneralQuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GeneralQuantifierContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

tree::TerminalNode* GQLParser::GeneralQuantifierContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

tree::TerminalNode* GQLParser::GeneralQuantifierContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}

GQLParser::LowerBoundContext* GQLParser::GeneralQuantifierContext::lowerBound() {
  return getRuleContext<GQLParser::LowerBoundContext>(0);
}

GQLParser::UpperBoundContext* GQLParser::GeneralQuantifierContext::upperBound() {
  return getRuleContext<GQLParser::UpperBoundContext>(0);
}


size_t GQLParser::GeneralQuantifierContext::getRuleIndex() const {
  return GQLParser::RuleGeneralQuantifier;
}


std::any GQLParser::GeneralQuantifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGeneralQuantifier(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GeneralQuantifierContext* GQLParser::generalQuantifier() {
  GeneralQuantifierContext *_localctx = _tracker.createInstance<GeneralQuantifierContext>(_ctx, getState());
  enterRule(_localctx, 572, GQLParser::RuleGeneralQuantifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2610);
    match(GQLParser::LEFT_BRACE);
    setState(2612);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::UNSIGNED_DECIMAL_INTEGER) {
      setState(2611);
      lowerBound();
    }
    setState(2614);
    match(GQLParser::COMMA);
    setState(2616);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::UNSIGNED_DECIMAL_INTEGER) {
      setState(2615);
      upperBound();
    }
    setState(2618);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LowerBoundContext ------------------------------------------------------------------

GQLParser::LowerBoundContext::LowerBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::LowerBoundContext::UNSIGNED_DECIMAL_INTEGER() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_INTEGER, 0);
}


size_t GQLParser::LowerBoundContext::getRuleIndex() const {
  return GQLParser::RuleLowerBound;
}


std::any GQLParser::LowerBoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLowerBound(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LowerBoundContext* GQLParser::lowerBound() {
  LowerBoundContext *_localctx = _tracker.createInstance<LowerBoundContext>(_ctx, getState());
  enterRule(_localctx, 574, GQLParser::RuleLowerBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2620);
    match(GQLParser::UNSIGNED_DECIMAL_INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UpperBoundContext ------------------------------------------------------------------

GQLParser::UpperBoundContext::UpperBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::UpperBoundContext::UNSIGNED_DECIMAL_INTEGER() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_INTEGER, 0);
}


size_t GQLParser::UpperBoundContext::getRuleIndex() const {
  return GQLParser::RuleUpperBound;
}


std::any GQLParser::UpperBoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitUpperBound(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::UpperBoundContext* GQLParser::upperBound() {
  UpperBoundContext *_localctx = _tracker.createInstance<UpperBoundContext>(_ctx, getState());
  enterRule(_localctx, 576, GQLParser::RuleUpperBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2622);
    match(GQLParser::UNSIGNED_DECIMAL_INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedPathPatternExpressionContext ------------------------------------------------------------------

GQLParser::SimplifiedPathPatternExpressionContext::SimplifiedPathPatternExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedDefaultingLeftContext* GQLParser::SimplifiedPathPatternExpressionContext::simplifiedDefaultingLeft() {
  return getRuleContext<GQLParser::SimplifiedDefaultingLeftContext>(0);
}

GQLParser::SimplifiedDefaultingUndirectedContext* GQLParser::SimplifiedPathPatternExpressionContext::simplifiedDefaultingUndirected() {
  return getRuleContext<GQLParser::SimplifiedDefaultingUndirectedContext>(0);
}

GQLParser::SimplifiedDefaultingRightContext* GQLParser::SimplifiedPathPatternExpressionContext::simplifiedDefaultingRight() {
  return getRuleContext<GQLParser::SimplifiedDefaultingRightContext>(0);
}

GQLParser::SimplifiedDefaultingLeftOrUndirectedContext* GQLParser::SimplifiedPathPatternExpressionContext::simplifiedDefaultingLeftOrUndirected() {
  return getRuleContext<GQLParser::SimplifiedDefaultingLeftOrUndirectedContext>(0);
}

GQLParser::SimplifiedDefaultingUndirectedOrRightContext* GQLParser::SimplifiedPathPatternExpressionContext::simplifiedDefaultingUndirectedOrRight() {
  return getRuleContext<GQLParser::SimplifiedDefaultingUndirectedOrRightContext>(0);
}

GQLParser::SimplifiedDefaultingLeftOrRightContext* GQLParser::SimplifiedPathPatternExpressionContext::simplifiedDefaultingLeftOrRight() {
  return getRuleContext<GQLParser::SimplifiedDefaultingLeftOrRightContext>(0);
}

GQLParser::SimplifiedDefaultingAnyDirectionContext* GQLParser::SimplifiedPathPatternExpressionContext::simplifiedDefaultingAnyDirection() {
  return getRuleContext<GQLParser::SimplifiedDefaultingAnyDirectionContext>(0);
}


size_t GQLParser::SimplifiedPathPatternExpressionContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedPathPatternExpression;
}


std::any GQLParser::SimplifiedPathPatternExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedPathPatternExpression(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedPathPatternExpressionContext* GQLParser::simplifiedPathPatternExpression() {
  SimplifiedPathPatternExpressionContext *_localctx = _tracker.createInstance<SimplifiedPathPatternExpressionContext>(_ctx, getState());
  enterRule(_localctx, 578, GQLParser::RuleSimplifiedPathPatternExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2631);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2624);
      simplifiedDefaultingLeft();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2625);
      simplifiedDefaultingUndirected();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2626);
      simplifiedDefaultingRight();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2627);
      simplifiedDefaultingLeftOrUndirected();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2628);
      simplifiedDefaultingUndirectedOrRight();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2629);
      simplifiedDefaultingLeftOrRight();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2630);
      simplifiedDefaultingAnyDirection();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedDefaultingLeftContext ------------------------------------------------------------------

GQLParser::SimplifiedDefaultingLeftContext::SimplifiedDefaultingLeftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingLeftContext::LEFT_MINUS_SLASH() {
  return getToken(GQLParser::LEFT_MINUS_SLASH, 0);
}

GQLParser::SimplifiedContentsContext* GQLParser::SimplifiedDefaultingLeftContext::simplifiedContents() {
  return getRuleContext<GQLParser::SimplifiedContentsContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingLeftContext::SOLIDUS() {
  return getToken(GQLParser::SOLIDUS, 0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingLeftContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}


size_t GQLParser::SimplifiedDefaultingLeftContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedDefaultingLeft;
}


std::any GQLParser::SimplifiedDefaultingLeftContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedDefaultingLeft(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedDefaultingLeftContext* GQLParser::simplifiedDefaultingLeft() {
  SimplifiedDefaultingLeftContext *_localctx = _tracker.createInstance<SimplifiedDefaultingLeftContext>(_ctx, getState());
  enterRule(_localctx, 580, GQLParser::RuleSimplifiedDefaultingLeft);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2633);
    match(GQLParser::LEFT_MINUS_SLASH);
    setState(2634);
    simplifiedContents();
    setState(2635);
    match(GQLParser::SOLIDUS);
    setState(2636);
    match(GQLParser::MINUS_SIGN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedDefaultingUndirectedContext ------------------------------------------------------------------

GQLParser::SimplifiedDefaultingUndirectedContext::SimplifiedDefaultingUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingUndirectedContext::TILDE_SLASH() {
  return getToken(GQLParser::TILDE_SLASH, 0);
}

GQLParser::SimplifiedContentsContext* GQLParser::SimplifiedDefaultingUndirectedContext::simplifiedContents() {
  return getRuleContext<GQLParser::SimplifiedContentsContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingUndirectedContext::SOLIDUS() {
  return getToken(GQLParser::SOLIDUS, 0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingUndirectedContext::TILDE() {
  return getToken(GQLParser::TILDE, 0);
}


size_t GQLParser::SimplifiedDefaultingUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedDefaultingUndirected;
}


std::any GQLParser::SimplifiedDefaultingUndirectedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedDefaultingUndirected(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedDefaultingUndirectedContext* GQLParser::simplifiedDefaultingUndirected() {
  SimplifiedDefaultingUndirectedContext *_localctx = _tracker.createInstance<SimplifiedDefaultingUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 582, GQLParser::RuleSimplifiedDefaultingUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2638);
    match(GQLParser::TILDE_SLASH);
    setState(2639);
    simplifiedContents();
    setState(2640);
    match(GQLParser::SOLIDUS);
    setState(2641);
    match(GQLParser::TILDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedDefaultingRightContext ------------------------------------------------------------------

GQLParser::SimplifiedDefaultingRightContext::SimplifiedDefaultingRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingRightContext::MINUS_SLASH() {
  return getToken(GQLParser::MINUS_SLASH, 0);
}

GQLParser::SimplifiedContentsContext* GQLParser::SimplifiedDefaultingRightContext::simplifiedContents() {
  return getRuleContext<GQLParser::SimplifiedContentsContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingRightContext::SLASH_MINUS_RIGHT() {
  return getToken(GQLParser::SLASH_MINUS_RIGHT, 0);
}


size_t GQLParser::SimplifiedDefaultingRightContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedDefaultingRight;
}


std::any GQLParser::SimplifiedDefaultingRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedDefaultingRight(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedDefaultingRightContext* GQLParser::simplifiedDefaultingRight() {
  SimplifiedDefaultingRightContext *_localctx = _tracker.createInstance<SimplifiedDefaultingRightContext>(_ctx, getState());
  enterRule(_localctx, 584, GQLParser::RuleSimplifiedDefaultingRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2643);
    match(GQLParser::MINUS_SLASH);
    setState(2644);
    simplifiedContents();
    setState(2645);
    match(GQLParser::SLASH_MINUS_RIGHT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedDefaultingLeftOrUndirectedContext ------------------------------------------------------------------

GQLParser::SimplifiedDefaultingLeftOrUndirectedContext::SimplifiedDefaultingLeftOrUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingLeftOrUndirectedContext::LEFT_TILDE_SLASH() {
  return getToken(GQLParser::LEFT_TILDE_SLASH, 0);
}

GQLParser::SimplifiedContentsContext* GQLParser::SimplifiedDefaultingLeftOrUndirectedContext::simplifiedContents() {
  return getRuleContext<GQLParser::SimplifiedContentsContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingLeftOrUndirectedContext::SOLIDUS() {
  return getToken(GQLParser::SOLIDUS, 0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingLeftOrUndirectedContext::TILDE() {
  return getToken(GQLParser::TILDE, 0);
}


size_t GQLParser::SimplifiedDefaultingLeftOrUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedDefaultingLeftOrUndirected;
}


std::any GQLParser::SimplifiedDefaultingLeftOrUndirectedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedDefaultingLeftOrUndirected(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedDefaultingLeftOrUndirectedContext* GQLParser::simplifiedDefaultingLeftOrUndirected() {
  SimplifiedDefaultingLeftOrUndirectedContext *_localctx = _tracker.createInstance<SimplifiedDefaultingLeftOrUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 586, GQLParser::RuleSimplifiedDefaultingLeftOrUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2647);
    match(GQLParser::LEFT_TILDE_SLASH);
    setState(2648);
    simplifiedContents();
    setState(2649);
    match(GQLParser::SOLIDUS);
    setState(2650);
    match(GQLParser::TILDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedDefaultingUndirectedOrRightContext ------------------------------------------------------------------

GQLParser::SimplifiedDefaultingUndirectedOrRightContext::SimplifiedDefaultingUndirectedOrRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingUndirectedOrRightContext::TILDE_SLASH() {
  return getToken(GQLParser::TILDE_SLASH, 0);
}

GQLParser::SimplifiedContentsContext* GQLParser::SimplifiedDefaultingUndirectedOrRightContext::simplifiedContents() {
  return getRuleContext<GQLParser::SimplifiedContentsContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingUndirectedOrRightContext::SLASH_TILDE_RIGHT() {
  return getToken(GQLParser::SLASH_TILDE_RIGHT, 0);
}


size_t GQLParser::SimplifiedDefaultingUndirectedOrRightContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedDefaultingUndirectedOrRight;
}


std::any GQLParser::SimplifiedDefaultingUndirectedOrRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedDefaultingUndirectedOrRight(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedDefaultingUndirectedOrRightContext* GQLParser::simplifiedDefaultingUndirectedOrRight() {
  SimplifiedDefaultingUndirectedOrRightContext *_localctx = _tracker.createInstance<SimplifiedDefaultingUndirectedOrRightContext>(_ctx, getState());
  enterRule(_localctx, 588, GQLParser::RuleSimplifiedDefaultingUndirectedOrRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2652);
    match(GQLParser::TILDE_SLASH);
    setState(2653);
    simplifiedContents();
    setState(2654);
    match(GQLParser::SLASH_TILDE_RIGHT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedDefaultingLeftOrRightContext ------------------------------------------------------------------

GQLParser::SimplifiedDefaultingLeftOrRightContext::SimplifiedDefaultingLeftOrRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingLeftOrRightContext::LEFT_MINUS_SLASH() {
  return getToken(GQLParser::LEFT_MINUS_SLASH, 0);
}

GQLParser::SimplifiedContentsContext* GQLParser::SimplifiedDefaultingLeftOrRightContext::simplifiedContents() {
  return getRuleContext<GQLParser::SimplifiedContentsContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingLeftOrRightContext::SLASH_MINUS_RIGHT() {
  return getToken(GQLParser::SLASH_MINUS_RIGHT, 0);
}


size_t GQLParser::SimplifiedDefaultingLeftOrRightContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedDefaultingLeftOrRight;
}


std::any GQLParser::SimplifiedDefaultingLeftOrRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedDefaultingLeftOrRight(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedDefaultingLeftOrRightContext* GQLParser::simplifiedDefaultingLeftOrRight() {
  SimplifiedDefaultingLeftOrRightContext *_localctx = _tracker.createInstance<SimplifiedDefaultingLeftOrRightContext>(_ctx, getState());
  enterRule(_localctx, 590, GQLParser::RuleSimplifiedDefaultingLeftOrRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2656);
    match(GQLParser::LEFT_MINUS_SLASH);
    setState(2657);
    simplifiedContents();
    setState(2658);
    match(GQLParser::SLASH_MINUS_RIGHT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedDefaultingAnyDirectionContext ------------------------------------------------------------------

GQLParser::SimplifiedDefaultingAnyDirectionContext::SimplifiedDefaultingAnyDirectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingAnyDirectionContext::MINUS_SLASH() {
  return getToken(GQLParser::MINUS_SLASH, 0);
}

GQLParser::SimplifiedContentsContext* GQLParser::SimplifiedDefaultingAnyDirectionContext::simplifiedContents() {
  return getRuleContext<GQLParser::SimplifiedContentsContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingAnyDirectionContext::SOLIDUS() {
  return getToken(GQLParser::SOLIDUS, 0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingAnyDirectionContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}


size_t GQLParser::SimplifiedDefaultingAnyDirectionContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedDefaultingAnyDirection;
}


std::any GQLParser::SimplifiedDefaultingAnyDirectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedDefaultingAnyDirection(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedDefaultingAnyDirectionContext* GQLParser::simplifiedDefaultingAnyDirection() {
  SimplifiedDefaultingAnyDirectionContext *_localctx = _tracker.createInstance<SimplifiedDefaultingAnyDirectionContext>(_ctx, getState());
  enterRule(_localctx, 592, GQLParser::RuleSimplifiedDefaultingAnyDirection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2660);
    match(GQLParser::MINUS_SLASH);
    setState(2661);
    simplifiedContents();
    setState(2662);
    match(GQLParser::SOLIDUS);
    setState(2663);
    match(GQLParser::MINUS_SIGN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedContentsContext ------------------------------------------------------------------

GQLParser::SimplifiedContentsContext::SimplifiedContentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedTermContext* GQLParser::SimplifiedContentsContext::simplifiedTerm() {
  return getRuleContext<GQLParser::SimplifiedTermContext>(0);
}

GQLParser::SimplifiedPathUnionContext* GQLParser::SimplifiedContentsContext::simplifiedPathUnion() {
  return getRuleContext<GQLParser::SimplifiedPathUnionContext>(0);
}

GQLParser::SimplifiedMultisetAlternationContext* GQLParser::SimplifiedContentsContext::simplifiedMultisetAlternation() {
  return getRuleContext<GQLParser::SimplifiedMultisetAlternationContext>(0);
}


size_t GQLParser::SimplifiedContentsContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedContents;
}


std::any GQLParser::SimplifiedContentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedContents(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedContentsContext* GQLParser::simplifiedContents() {
  SimplifiedContentsContext *_localctx = _tracker.createInstance<SimplifiedContentsContext>(_ctx, getState());
  enterRule(_localctx, 594, GQLParser::RuleSimplifiedContents);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2668);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2665);
      simplifiedTerm();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2666);
      simplifiedPathUnion();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2667);
      simplifiedMultisetAlternation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedPathUnionContext ------------------------------------------------------------------

GQLParser::SimplifiedPathUnionContext::SimplifiedPathUnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SimplifiedTermContext *> GQLParser::SimplifiedPathUnionContext::simplifiedTerm() {
  return getRuleContexts<GQLParser::SimplifiedTermContext>();
}

GQLParser::SimplifiedTermContext* GQLParser::SimplifiedPathUnionContext::simplifiedTerm(size_t i) {
  return getRuleContext<GQLParser::SimplifiedTermContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SimplifiedPathUnionContext::VERTICAL_BAR() {
  return getTokens(GQLParser::VERTICAL_BAR);
}

tree::TerminalNode* GQLParser::SimplifiedPathUnionContext::VERTICAL_BAR(size_t i) {
  return getToken(GQLParser::VERTICAL_BAR, i);
}


size_t GQLParser::SimplifiedPathUnionContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedPathUnion;
}


std::any GQLParser::SimplifiedPathUnionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedPathUnion(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedPathUnionContext* GQLParser::simplifiedPathUnion() {
  SimplifiedPathUnionContext *_localctx = _tracker.createInstance<SimplifiedPathUnionContext>(_ctx, getState());
  enterRule(_localctx, 596, GQLParser::RuleSimplifiedPathUnion);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2670);
    simplifiedTerm();
    setState(2671);
    match(GQLParser::VERTICAL_BAR);
    setState(2672);
    simplifiedTerm();
    setState(2677);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::VERTICAL_BAR) {
      setState(2673);
      match(GQLParser::VERTICAL_BAR);
      setState(2674);
      simplifiedTerm();
      setState(2679);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedMultisetAlternationContext ------------------------------------------------------------------

GQLParser::SimplifiedMultisetAlternationContext::SimplifiedMultisetAlternationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SimplifiedTermContext *> GQLParser::SimplifiedMultisetAlternationContext::simplifiedTerm() {
  return getRuleContexts<GQLParser::SimplifiedTermContext>();
}

GQLParser::SimplifiedTermContext* GQLParser::SimplifiedMultisetAlternationContext::simplifiedTerm(size_t i) {
  return getRuleContext<GQLParser::SimplifiedTermContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SimplifiedMultisetAlternationContext::MULTISET_ALTERNATION_OPERATOR() {
  return getTokens(GQLParser::MULTISET_ALTERNATION_OPERATOR);
}

tree::TerminalNode* GQLParser::SimplifiedMultisetAlternationContext::MULTISET_ALTERNATION_OPERATOR(size_t i) {
  return getToken(GQLParser::MULTISET_ALTERNATION_OPERATOR, i);
}


size_t GQLParser::SimplifiedMultisetAlternationContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedMultisetAlternation;
}


std::any GQLParser::SimplifiedMultisetAlternationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedMultisetAlternation(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedMultisetAlternationContext* GQLParser::simplifiedMultisetAlternation() {
  SimplifiedMultisetAlternationContext *_localctx = _tracker.createInstance<SimplifiedMultisetAlternationContext>(_ctx, getState());
  enterRule(_localctx, 598, GQLParser::RuleSimplifiedMultisetAlternation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2680);
    simplifiedTerm();
    setState(2681);
    match(GQLParser::MULTISET_ALTERNATION_OPERATOR);
    setState(2682);
    simplifiedTerm();
    setState(2687);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::MULTISET_ALTERNATION_OPERATOR) {
      setState(2683);
      match(GQLParser::MULTISET_ALTERNATION_OPERATOR);
      setState(2684);
      simplifiedTerm();
      setState(2689);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedTermContext ------------------------------------------------------------------

GQLParser::SimplifiedTermContext::SimplifiedTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SimplifiedFactorLowContext *> GQLParser::SimplifiedTermContext::simplifiedFactorLow() {
  return getRuleContexts<GQLParser::SimplifiedFactorLowContext>();
}

GQLParser::SimplifiedFactorLowContext* GQLParser::SimplifiedTermContext::simplifiedFactorLow(size_t i) {
  return getRuleContext<GQLParser::SimplifiedFactorLowContext>(i);
}


size_t GQLParser::SimplifiedTermContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedTerm;
}


std::any GQLParser::SimplifiedTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedTerm(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedTermContext* GQLParser::simplifiedTerm() {
  SimplifiedTermContext *_localctx = _tracker.createInstance<SimplifiedTermContext>(_ctx, getState());
  enterRule(_localctx, 600, GQLParser::RuleSimplifiedTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2691); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2690);
      simplifiedFactorLow();
      setState(2693); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -234852096) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & -1) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & 3298534883327) != 0) || ((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 67) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedFactorLowContext ------------------------------------------------------------------

GQLParser::SimplifiedFactorLowContext::SimplifiedFactorLowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SimplifiedFactorHighContext *> GQLParser::SimplifiedFactorLowContext::simplifiedFactorHigh() {
  return getRuleContexts<GQLParser::SimplifiedFactorHighContext>();
}

GQLParser::SimplifiedFactorHighContext* GQLParser::SimplifiedFactorLowContext::simplifiedFactorHigh(size_t i) {
  return getRuleContext<GQLParser::SimplifiedFactorHighContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SimplifiedFactorLowContext::AMPERSAND() {
  return getTokens(GQLParser::AMPERSAND);
}

tree::TerminalNode* GQLParser::SimplifiedFactorLowContext::AMPERSAND(size_t i) {
  return getToken(GQLParser::AMPERSAND, i);
}


size_t GQLParser::SimplifiedFactorLowContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedFactorLow;
}


std::any GQLParser::SimplifiedFactorLowContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedFactorLow(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedFactorLowContext* GQLParser::simplifiedFactorLow() {
  SimplifiedFactorLowContext *_localctx = _tracker.createInstance<SimplifiedFactorLowContext>(_ctx, getState());
  enterRule(_localctx, 602, GQLParser::RuleSimplifiedFactorLow);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2695);
    simplifiedFactorHigh();
    setState(2700);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::AMPERSAND) {
      setState(2696);
      match(GQLParser::AMPERSAND);
      setState(2697);
      simplifiedFactorHigh();
      setState(2702);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedFactorHighContext ------------------------------------------------------------------

GQLParser::SimplifiedFactorHighContext::SimplifiedFactorHighContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedTertiaryContext* GQLParser::SimplifiedFactorHighContext::simplifiedTertiary() {
  return getRuleContext<GQLParser::SimplifiedTertiaryContext>(0);
}

GQLParser::SimplifiedQuantifiedContext* GQLParser::SimplifiedFactorHighContext::simplifiedQuantified() {
  return getRuleContext<GQLParser::SimplifiedQuantifiedContext>(0);
}

GQLParser::SimplifiedQuestionedContext* GQLParser::SimplifiedFactorHighContext::simplifiedQuestioned() {
  return getRuleContext<GQLParser::SimplifiedQuestionedContext>(0);
}


size_t GQLParser::SimplifiedFactorHighContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedFactorHigh;
}


std::any GQLParser::SimplifiedFactorHighContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedFactorHigh(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedFactorHighContext* GQLParser::simplifiedFactorHigh() {
  SimplifiedFactorHighContext *_localctx = _tracker.createInstance<SimplifiedFactorHighContext>(_ctx, getState());
  enterRule(_localctx, 604, GQLParser::RuleSimplifiedFactorHigh);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2706);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2703);
      simplifiedTertiary();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2704);
      simplifiedQuantified();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2705);
      simplifiedQuestioned();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedQuantifiedContext ------------------------------------------------------------------

GQLParser::SimplifiedQuantifiedContext::SimplifiedQuantifiedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedTertiaryContext* GQLParser::SimplifiedQuantifiedContext::simplifiedTertiary() {
  return getRuleContext<GQLParser::SimplifiedTertiaryContext>(0);
}

GQLParser::GraphPatternQuantifierContext* GQLParser::SimplifiedQuantifiedContext::graphPatternQuantifier() {
  return getRuleContext<GQLParser::GraphPatternQuantifierContext>(0);
}


size_t GQLParser::SimplifiedQuantifiedContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedQuantified;
}


std::any GQLParser::SimplifiedQuantifiedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedQuantified(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedQuantifiedContext* GQLParser::simplifiedQuantified() {
  SimplifiedQuantifiedContext *_localctx = _tracker.createInstance<SimplifiedQuantifiedContext>(_ctx, getState());
  enterRule(_localctx, 606, GQLParser::RuleSimplifiedQuantified);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2708);
    simplifiedTertiary();
    setState(2709);
    graphPatternQuantifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedQuestionedContext ------------------------------------------------------------------

GQLParser::SimplifiedQuestionedContext::SimplifiedQuestionedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedTertiaryContext* GQLParser::SimplifiedQuestionedContext::simplifiedTertiary() {
  return getRuleContext<GQLParser::SimplifiedTertiaryContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedQuestionedContext::QUESTION_MARK() {
  return getToken(GQLParser::QUESTION_MARK, 0);
}


size_t GQLParser::SimplifiedQuestionedContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedQuestioned;
}


std::any GQLParser::SimplifiedQuestionedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedQuestioned(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedQuestionedContext* GQLParser::simplifiedQuestioned() {
  SimplifiedQuestionedContext *_localctx = _tracker.createInstance<SimplifiedQuestionedContext>(_ctx, getState());
  enterRule(_localctx, 608, GQLParser::RuleSimplifiedQuestioned);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2711);
    simplifiedTertiary();
    setState(2712);
    match(GQLParser::QUESTION_MARK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedTertiaryContext ------------------------------------------------------------------

GQLParser::SimplifiedTertiaryContext::SimplifiedTertiaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedDirectionOverrideContext* GQLParser::SimplifiedTertiaryContext::simplifiedDirectionOverride() {
  return getRuleContext<GQLParser::SimplifiedDirectionOverrideContext>(0);
}

GQLParser::SimplifiedSecondaryContext* GQLParser::SimplifiedTertiaryContext::simplifiedSecondary() {
  return getRuleContext<GQLParser::SimplifiedSecondaryContext>(0);
}


size_t GQLParser::SimplifiedTertiaryContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedTertiary;
}


std::any GQLParser::SimplifiedTertiaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedTertiary(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedTertiaryContext* GQLParser::simplifiedTertiary() {
  SimplifiedTertiaryContext *_localctx = _tracker.createInstance<SimplifiedTertiaryContext>(_ctx, getState());
  enterRule(_localctx, 610, GQLParser::RuleSimplifiedTertiary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2716);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2714);
      simplifiedDirectionOverride();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2715);
      simplifiedSecondary();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedDirectionOverrideContext ------------------------------------------------------------------

GQLParser::SimplifiedDirectionOverrideContext::SimplifiedDirectionOverrideContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedOverrideLeftContext* GQLParser::SimplifiedDirectionOverrideContext::simplifiedOverrideLeft() {
  return getRuleContext<GQLParser::SimplifiedOverrideLeftContext>(0);
}

GQLParser::SimplifiedOverrideUndirectedContext* GQLParser::SimplifiedDirectionOverrideContext::simplifiedOverrideUndirected() {
  return getRuleContext<GQLParser::SimplifiedOverrideUndirectedContext>(0);
}

GQLParser::SimplifiedOverrideRightContext* GQLParser::SimplifiedDirectionOverrideContext::simplifiedOverrideRight() {
  return getRuleContext<GQLParser::SimplifiedOverrideRightContext>(0);
}

GQLParser::SimplifiedOverrideLeftOrUndirectedContext* GQLParser::SimplifiedDirectionOverrideContext::simplifiedOverrideLeftOrUndirected() {
  return getRuleContext<GQLParser::SimplifiedOverrideLeftOrUndirectedContext>(0);
}

GQLParser::SimplifiedOverrideUndirectedOrRightContext* GQLParser::SimplifiedDirectionOverrideContext::simplifiedOverrideUndirectedOrRight() {
  return getRuleContext<GQLParser::SimplifiedOverrideUndirectedOrRightContext>(0);
}

GQLParser::SimplifiedOverrideLeftOrRightContext* GQLParser::SimplifiedDirectionOverrideContext::simplifiedOverrideLeftOrRight() {
  return getRuleContext<GQLParser::SimplifiedOverrideLeftOrRightContext>(0);
}

GQLParser::SimplifiedOverrideAnyDirectionContext* GQLParser::SimplifiedDirectionOverrideContext::simplifiedOverrideAnyDirection() {
  return getRuleContext<GQLParser::SimplifiedOverrideAnyDirectionContext>(0);
}


size_t GQLParser::SimplifiedDirectionOverrideContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedDirectionOverride;
}


std::any GQLParser::SimplifiedDirectionOverrideContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedDirectionOverride(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedDirectionOverrideContext* GQLParser::simplifiedDirectionOverride() {
  SimplifiedDirectionOverrideContext *_localctx = _tracker.createInstance<SimplifiedDirectionOverrideContext>(_ctx, getState());
  enterRule(_localctx, 612, GQLParser::RuleSimplifiedDirectionOverride);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2725);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 245, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2718);
      simplifiedOverrideLeft();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2719);
      simplifiedOverrideUndirected();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2720);
      simplifiedOverrideRight();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2721);
      simplifiedOverrideLeftOrUndirected();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2722);
      simplifiedOverrideUndirectedOrRight();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2723);
      simplifiedOverrideLeftOrRight();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2724);
      simplifiedOverrideAnyDirection();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedOverrideLeftContext ------------------------------------------------------------------

GQLParser::SimplifiedOverrideLeftContext::SimplifiedOverrideLeftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedOverrideLeftContext::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

GQLParser::SimplifiedSecondaryContext* GQLParser::SimplifiedOverrideLeftContext::simplifiedSecondary() {
  return getRuleContext<GQLParser::SimplifiedSecondaryContext>(0);
}


size_t GQLParser::SimplifiedOverrideLeftContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedOverrideLeft;
}


std::any GQLParser::SimplifiedOverrideLeftContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedOverrideLeft(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedOverrideLeftContext* GQLParser::simplifiedOverrideLeft() {
  SimplifiedOverrideLeftContext *_localctx = _tracker.createInstance<SimplifiedOverrideLeftContext>(_ctx, getState());
  enterRule(_localctx, 614, GQLParser::RuleSimplifiedOverrideLeft);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2727);
    match(GQLParser::LEFT_ANGLE_BRACKET);
    setState(2728);
    simplifiedSecondary();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedOverrideUndirectedContext ------------------------------------------------------------------

GQLParser::SimplifiedOverrideUndirectedContext::SimplifiedOverrideUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedOverrideUndirectedContext::TILDE() {
  return getToken(GQLParser::TILDE, 0);
}

GQLParser::SimplifiedSecondaryContext* GQLParser::SimplifiedOverrideUndirectedContext::simplifiedSecondary() {
  return getRuleContext<GQLParser::SimplifiedSecondaryContext>(0);
}


size_t GQLParser::SimplifiedOverrideUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedOverrideUndirected;
}


std::any GQLParser::SimplifiedOverrideUndirectedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedOverrideUndirected(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedOverrideUndirectedContext* GQLParser::simplifiedOverrideUndirected() {
  SimplifiedOverrideUndirectedContext *_localctx = _tracker.createInstance<SimplifiedOverrideUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 616, GQLParser::RuleSimplifiedOverrideUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2730);
    match(GQLParser::TILDE);
    setState(2731);
    simplifiedSecondary();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedOverrideRightContext ------------------------------------------------------------------

GQLParser::SimplifiedOverrideRightContext::SimplifiedOverrideRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedSecondaryContext* GQLParser::SimplifiedOverrideRightContext::simplifiedSecondary() {
  return getRuleContext<GQLParser::SimplifiedSecondaryContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedOverrideRightContext::RIGHT_ANGLE_BRACKET() {
  return getToken(GQLParser::RIGHT_ANGLE_BRACKET, 0);
}


size_t GQLParser::SimplifiedOverrideRightContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedOverrideRight;
}


std::any GQLParser::SimplifiedOverrideRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedOverrideRight(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedOverrideRightContext* GQLParser::simplifiedOverrideRight() {
  SimplifiedOverrideRightContext *_localctx = _tracker.createInstance<SimplifiedOverrideRightContext>(_ctx, getState());
  enterRule(_localctx, 618, GQLParser::RuleSimplifiedOverrideRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2733);
    simplifiedSecondary();
    setState(2734);
    match(GQLParser::RIGHT_ANGLE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedOverrideLeftOrUndirectedContext ------------------------------------------------------------------

GQLParser::SimplifiedOverrideLeftOrUndirectedContext::SimplifiedOverrideLeftOrUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedOverrideLeftOrUndirectedContext::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

tree::TerminalNode* GQLParser::SimplifiedOverrideLeftOrUndirectedContext::TILDE() {
  return getToken(GQLParser::TILDE, 0);
}

GQLParser::SimplifiedSecondaryContext* GQLParser::SimplifiedOverrideLeftOrUndirectedContext::simplifiedSecondary() {
  return getRuleContext<GQLParser::SimplifiedSecondaryContext>(0);
}


size_t GQLParser::SimplifiedOverrideLeftOrUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedOverrideLeftOrUndirected;
}


std::any GQLParser::SimplifiedOverrideLeftOrUndirectedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedOverrideLeftOrUndirected(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedOverrideLeftOrUndirectedContext* GQLParser::simplifiedOverrideLeftOrUndirected() {
  SimplifiedOverrideLeftOrUndirectedContext *_localctx = _tracker.createInstance<SimplifiedOverrideLeftOrUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 620, GQLParser::RuleSimplifiedOverrideLeftOrUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2736);
    match(GQLParser::LEFT_ANGLE_BRACKET);
    setState(2737);
    match(GQLParser::TILDE);
    setState(2738);
    simplifiedSecondary();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedOverrideUndirectedOrRightContext ------------------------------------------------------------------

GQLParser::SimplifiedOverrideUndirectedOrRightContext::SimplifiedOverrideUndirectedOrRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedOverrideUndirectedOrRightContext::TILDE() {
  return getToken(GQLParser::TILDE, 0);
}

GQLParser::SimplifiedSecondaryContext* GQLParser::SimplifiedOverrideUndirectedOrRightContext::simplifiedSecondary() {
  return getRuleContext<GQLParser::SimplifiedSecondaryContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedOverrideUndirectedOrRightContext::RIGHT_ANGLE_BRACKET() {
  return getToken(GQLParser::RIGHT_ANGLE_BRACKET, 0);
}


size_t GQLParser::SimplifiedOverrideUndirectedOrRightContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedOverrideUndirectedOrRight;
}


std::any GQLParser::SimplifiedOverrideUndirectedOrRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedOverrideUndirectedOrRight(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedOverrideUndirectedOrRightContext* GQLParser::simplifiedOverrideUndirectedOrRight() {
  SimplifiedOverrideUndirectedOrRightContext *_localctx = _tracker.createInstance<SimplifiedOverrideUndirectedOrRightContext>(_ctx, getState());
  enterRule(_localctx, 622, GQLParser::RuleSimplifiedOverrideUndirectedOrRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2740);
    match(GQLParser::TILDE);
    setState(2741);
    simplifiedSecondary();
    setState(2742);
    match(GQLParser::RIGHT_ANGLE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedOverrideLeftOrRightContext ------------------------------------------------------------------

GQLParser::SimplifiedOverrideLeftOrRightContext::SimplifiedOverrideLeftOrRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedOverrideLeftOrRightContext::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

GQLParser::SimplifiedSecondaryContext* GQLParser::SimplifiedOverrideLeftOrRightContext::simplifiedSecondary() {
  return getRuleContext<GQLParser::SimplifiedSecondaryContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedOverrideLeftOrRightContext::RIGHT_ANGLE_BRACKET() {
  return getToken(GQLParser::RIGHT_ANGLE_BRACKET, 0);
}


size_t GQLParser::SimplifiedOverrideLeftOrRightContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedOverrideLeftOrRight;
}


std::any GQLParser::SimplifiedOverrideLeftOrRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedOverrideLeftOrRight(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedOverrideLeftOrRightContext* GQLParser::simplifiedOverrideLeftOrRight() {
  SimplifiedOverrideLeftOrRightContext *_localctx = _tracker.createInstance<SimplifiedOverrideLeftOrRightContext>(_ctx, getState());
  enterRule(_localctx, 624, GQLParser::RuleSimplifiedOverrideLeftOrRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2744);
    match(GQLParser::LEFT_ANGLE_BRACKET);
    setState(2745);
    simplifiedSecondary();
    setState(2746);
    match(GQLParser::RIGHT_ANGLE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedOverrideAnyDirectionContext ------------------------------------------------------------------

GQLParser::SimplifiedOverrideAnyDirectionContext::SimplifiedOverrideAnyDirectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedOverrideAnyDirectionContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}

GQLParser::SimplifiedSecondaryContext* GQLParser::SimplifiedOverrideAnyDirectionContext::simplifiedSecondary() {
  return getRuleContext<GQLParser::SimplifiedSecondaryContext>(0);
}


size_t GQLParser::SimplifiedOverrideAnyDirectionContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedOverrideAnyDirection;
}


std::any GQLParser::SimplifiedOverrideAnyDirectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedOverrideAnyDirection(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedOverrideAnyDirectionContext* GQLParser::simplifiedOverrideAnyDirection() {
  SimplifiedOverrideAnyDirectionContext *_localctx = _tracker.createInstance<SimplifiedOverrideAnyDirectionContext>(_ctx, getState());
  enterRule(_localctx, 626, GQLParser::RuleSimplifiedOverrideAnyDirection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2748);
    match(GQLParser::MINUS_SIGN);
    setState(2749);
    simplifiedSecondary();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedSecondaryContext ------------------------------------------------------------------

GQLParser::SimplifiedSecondaryContext::SimplifiedSecondaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedPrimaryContext* GQLParser::SimplifiedSecondaryContext::simplifiedPrimary() {
  return getRuleContext<GQLParser::SimplifiedPrimaryContext>(0);
}

GQLParser::SimplifiedNegationContext* GQLParser::SimplifiedSecondaryContext::simplifiedNegation() {
  return getRuleContext<GQLParser::SimplifiedNegationContext>(0);
}


size_t GQLParser::SimplifiedSecondaryContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedSecondary;
}


std::any GQLParser::SimplifiedSecondaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedSecondary(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedSecondaryContext* GQLParser::simplifiedSecondary() {
  SimplifiedSecondaryContext *_localctx = _tracker.createInstance<SimplifiedSecondaryContext>(_ctx, getState());
  enterRule(_localctx, 628, GQLParser::RuleSimplifiedSecondary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2753);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LEFT_PAREN:
      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ACYCLIC:
      case GQLParser::ALL:
      case GQLParser::ALL_DIFFERENT:
      case GQLParser::AND:
      case GQLParser::ANY:
      case GQLParser::ARRAY:
      case GQLParser::AS:
      case GQLParser::ASC:
      case GQLParser::ASCENDING:
      case GQLParser::ASIN:
      case GQLParser::AT:
      case GQLParser::ATAN:
      case GQLParser::AVG:
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::BINARY:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::BOOL:
      case GQLParser::BOOLEAN:
      case GQLParser::BOTH:
      case GQLParser::BTRIM:
      case GQLParser::BY:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::BYTES:
      case GQLParser::CALL:
      case GQLParser::CASE:
      case GQLParser::CAST:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::CHARACTERISTICS:
      case GQLParser::CLOSE:
      case GQLParser::COALESCE:
      case GQLParser::COLLECT:
      case GQLParser::COMMIT:
      case GQLParser::CONNECTING:
      case GQLParser::COPY:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::COUNT:
      case GQLParser::CREATE:
      case GQLParser::CURRENT_DATE:
      case GQLParser::CURRENT_GRAPH:
      case GQLParser::CURRENT_PROPERTY_GRAPH:
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::CURRENT_TIME:
      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::CURRENT_USER:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DEC:
      case GQLParser::DECIMAL:
      case GQLParser::DEGREES:
      case GQLParser::DELETE:
      case GQLParser::DESC:
      case GQLParser::DESCENDING:
      case GQLParser::DESTINATION:
      case GQLParser::DETACH:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::DISTINCT:
      case GQLParser::DOUBLE:
      case GQLParser::DROP:
      case GQLParser::DURATION:
      case GQLParser::DURATION_BETWEEN:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENT_ID:
      case GQLParser::ELEMENTS:
      case GQLParser::ELSE:
      case GQLParser::END:
      case GQLParser::EXCEPT:
      case GQLParser::EXISTS:
      case GQLParser::EXP:
      case GQLParser::K_FALSE:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FIRST:
      case GQLParser::FLOAT:
      case GQLParser::FLOAT128:
      case GQLParser::FLOAT16:
      case GQLParser::FLOAT256:
      case GQLParser::FLOAT32:
      case GQLParser::FLOAT64:
      case GQLParser::FLOOR:
      case GQLParser::FOR:
      case GQLParser::FROM:
      case GQLParser::GRAPH:
      case GQLParser::GROUP:
      case GQLParser::GROUPS:
      case GQLParser::HAVING:
      case GQLParser::HOME_GRAPH:
      case GQLParser::HOME_PROPERTY_GRAPH:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::I_DONT_KNOW_1:
      case GQLParser::I_DONT_KNOW_2:
      case GQLParser::I_DONT_KNOW_3:
      case GQLParser::I_DONT_KNOW_4:
      case GQLParser::I_DONT_KNOW_5:
      case GQLParser::IF:
      case GQLParser::IN:
      case GQLParser::INSERT:
      case GQLParser::INT:
      case GQLParser::INT8:
      case GQLParser::INT16:
      case GQLParser::INT32:
      case GQLParser::INT64:
      case GQLParser::INT128:
      case GQLParser::INT256:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::INTERSECT:
      case GQLParser::IS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::LEADING:
      case GQLParser::LEFT:
      case GQLParser::LET:
      case GQLParser::LIKE:
      case GQLParser::LIMIT:
      case GQLParser::LIST:
      case GQLParser::LN:
      case GQLParser::LOCAL:
      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIME:
      case GQLParser::LOCAL_TIMESTAMP:
      case GQLParser::LOG:
      case GQLParser::LOG10:
      case GQLParser::LOWER:
      case GQLParser::LTRIM:
      case GQLParser::MATCH:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::MOD:
      case GQLParser::NEXT:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODETACH:
      case GQLParser::NORMALIZE:
      case GQLParser::NORMALIZED:
      case GQLParser::NOT:
      case GQLParser::NULL_:
      case GQLParser::NULLIF:
      case GQLParser::NULLS:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::OF:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::ONLY:
      case GQLParser::OPEN:
      case GQLParser::OPTIONAL:
      case GQLParser::OR:
      case GQLParser::ORDER:
      case GQLParser::ORDINALITY:
      case GQLParser::OTHERWISE:
      case GQLParser::PARAMETER:
      case GQLParser::PARAMETERS:
      case GQLParser::PATH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::PATHS:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::POWER:
      case GQLParser::PRECISION:
      case GQLParser::PROJECT:
      case GQLParser::PROPERTY:
      case GQLParser::PROPERTY_EXISTS:
      case GQLParser::RADIANS:
      case GQLParser::READ:
      case GQLParser::REAL:
      case GQLParser::RECORD:
      case GQLParser::REMOVE:
      case GQLParser::REPEATABLE:
      case GQLParser::REPLACE:
      case GQLParser::RESET:
      case GQLParser::RETURN:
      case GQLParser::ROLLBACK:
      case GQLParser::RTRIM:
      case GQLParser::RIGHT:
      case GQLParser::SAME:
      case GQLParser::SCHEMA:
      case GQLParser::SELECT:
      case GQLParser::SESSION:
      case GQLParser::SET:
      case GQLParser::SHORTEST:
      case GQLParser::SIGNED:
      case GQLParser::SIMPLE:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::SOURCE:
      case GQLParser::SQRT:
      case GQLParser::START:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::STRING:
      case GQLParser::SUM:
      case GQLParser::TABLE:
      case GQLParser::TAN:
      case GQLParser::TANH:
      case GQLParser::TEMP:
      case GQLParser::THEN:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::TIMEZONE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRAILING:
      case GQLParser::TRANSACTION:
      case GQLParser::TRIM:
      case GQLParser::K_TRUE:
      case GQLParser::TYPE:
      case GQLParser::TYPED:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT128:
      case GQLParser::UINT16:
      case GQLParser::UINT256:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT8:
      case GQLParser::UNDIRECTED:
      case GQLParser::UNION:
      case GQLParser::UNKNOWN:
      case GQLParser::UNSIGNED:
      case GQLParser::UPPER:
      case GQLParser::USE:
      case GQLParser::USMALLINT:
      case GQLParser::VALUE:
      case GQLParser::VARBINARY:
      case GQLParser::VARCHAR:
      case GQLParser::VARIABLE:
      case GQLParser::WALK:
      case GQLParser::WHEN:
      case GQLParser::WHERE:
      case GQLParser::WITH:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::XOR:
      case GQLParser::YIELD:
      case GQLParser::ZONE:
      case GQLParser::ZONED:
      case GQLParser::ZONED_DATETIME:
      case GQLParser::ZONED_TIME:
      case GQLParser::INTERVAL_DAY:
      case GQLParser::INTERVAL_WEEK:
      case GQLParser::INTERVAL_MONTH:
      case GQLParser::INTERVAL_YEAR:
      case GQLParser::EDGE_SYNONYM:
      case GQLParser::EDGES_SYNONYM:
      case GQLParser::NODE_SYNONYM:
      case GQLParser::KEY_WORD:
      case GQLParser::PRE_RESERVED_WORD:
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(2751);
        simplifiedPrimary();
        break;
      }

      case GQLParser::EXCLAMATION_MARK: {
        enterOuterAlt(_localctx, 2);
        setState(2752);
        simplifiedNegation();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedNegationContext ------------------------------------------------------------------

GQLParser::SimplifiedNegationContext::SimplifiedNegationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedNegationContext::EXCLAMATION_MARK() {
  return getToken(GQLParser::EXCLAMATION_MARK, 0);
}

GQLParser::SimplifiedPrimaryContext* GQLParser::SimplifiedNegationContext::simplifiedPrimary() {
  return getRuleContext<GQLParser::SimplifiedPrimaryContext>(0);
}


size_t GQLParser::SimplifiedNegationContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedNegation;
}


std::any GQLParser::SimplifiedNegationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedNegation(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedNegationContext* GQLParser::simplifiedNegation() {
  SimplifiedNegationContext *_localctx = _tracker.createInstance<SimplifiedNegationContext>(_ctx, getState());
  enterRule(_localctx, 630, GQLParser::RuleSimplifiedNegation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2755);
    match(GQLParser::EXCLAMATION_MARK);
    setState(2756);
    simplifiedPrimary();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedPrimaryContext ------------------------------------------------------------------

GQLParser::SimplifiedPrimaryContext::SimplifiedPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::LabelNameContext* GQLParser::SimplifiedPrimaryContext::labelName() {
  return getRuleContext<GQLParser::LabelNameContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedPrimaryContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::SimplifiedContentsContext* GQLParser::SimplifiedPrimaryContext::simplifiedContents() {
  return getRuleContext<GQLParser::SimplifiedContentsContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedPrimaryContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::SimplifiedPrimaryContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedPrimary;
}


std::any GQLParser::SimplifiedPrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimplifiedPrimary(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimplifiedPrimaryContext* GQLParser::simplifiedPrimary() {
  SimplifiedPrimaryContext *_localctx = _tracker.createInstance<SimplifiedPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 632, GQLParser::RuleSimplifiedPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2763);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ACYCLIC:
      case GQLParser::ALL:
      case GQLParser::ALL_DIFFERENT:
      case GQLParser::AND:
      case GQLParser::ANY:
      case GQLParser::ARRAY:
      case GQLParser::AS:
      case GQLParser::ASC:
      case GQLParser::ASCENDING:
      case GQLParser::ASIN:
      case GQLParser::AT:
      case GQLParser::ATAN:
      case GQLParser::AVG:
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::BINARY:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::BOOL:
      case GQLParser::BOOLEAN:
      case GQLParser::BOTH:
      case GQLParser::BTRIM:
      case GQLParser::BY:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::BYTES:
      case GQLParser::CALL:
      case GQLParser::CASE:
      case GQLParser::CAST:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::CHARACTERISTICS:
      case GQLParser::CLOSE:
      case GQLParser::COALESCE:
      case GQLParser::COLLECT:
      case GQLParser::COMMIT:
      case GQLParser::CONNECTING:
      case GQLParser::COPY:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::COUNT:
      case GQLParser::CREATE:
      case GQLParser::CURRENT_DATE:
      case GQLParser::CURRENT_GRAPH:
      case GQLParser::CURRENT_PROPERTY_GRAPH:
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::CURRENT_TIME:
      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::CURRENT_USER:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DEC:
      case GQLParser::DECIMAL:
      case GQLParser::DEGREES:
      case GQLParser::DELETE:
      case GQLParser::DESC:
      case GQLParser::DESCENDING:
      case GQLParser::DESTINATION:
      case GQLParser::DETACH:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::DISTINCT:
      case GQLParser::DOUBLE:
      case GQLParser::DROP:
      case GQLParser::DURATION:
      case GQLParser::DURATION_BETWEEN:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENT_ID:
      case GQLParser::ELEMENTS:
      case GQLParser::ELSE:
      case GQLParser::END:
      case GQLParser::EXCEPT:
      case GQLParser::EXISTS:
      case GQLParser::EXP:
      case GQLParser::K_FALSE:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FIRST:
      case GQLParser::FLOAT:
      case GQLParser::FLOAT128:
      case GQLParser::FLOAT16:
      case GQLParser::FLOAT256:
      case GQLParser::FLOAT32:
      case GQLParser::FLOAT64:
      case GQLParser::FLOOR:
      case GQLParser::FOR:
      case GQLParser::FROM:
      case GQLParser::GRAPH:
      case GQLParser::GROUP:
      case GQLParser::GROUPS:
      case GQLParser::HAVING:
      case GQLParser::HOME_GRAPH:
      case GQLParser::HOME_PROPERTY_GRAPH:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::I_DONT_KNOW_1:
      case GQLParser::I_DONT_KNOW_2:
      case GQLParser::I_DONT_KNOW_3:
      case GQLParser::I_DONT_KNOW_4:
      case GQLParser::I_DONT_KNOW_5:
      case GQLParser::IF:
      case GQLParser::IN:
      case GQLParser::INSERT:
      case GQLParser::INT:
      case GQLParser::INT8:
      case GQLParser::INT16:
      case GQLParser::INT32:
      case GQLParser::INT64:
      case GQLParser::INT128:
      case GQLParser::INT256:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::INTERSECT:
      case GQLParser::IS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::LEADING:
      case GQLParser::LEFT:
      case GQLParser::LET:
      case GQLParser::LIKE:
      case GQLParser::LIMIT:
      case GQLParser::LIST:
      case GQLParser::LN:
      case GQLParser::LOCAL:
      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIME:
      case GQLParser::LOCAL_TIMESTAMP:
      case GQLParser::LOG:
      case GQLParser::LOG10:
      case GQLParser::LOWER:
      case GQLParser::LTRIM:
      case GQLParser::MATCH:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::MOD:
      case GQLParser::NEXT:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODETACH:
      case GQLParser::NORMALIZE:
      case GQLParser::NORMALIZED:
      case GQLParser::NOT:
      case GQLParser::NULL_:
      case GQLParser::NULLIF:
      case GQLParser::NULLS:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::OF:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::ONLY:
      case GQLParser::OPEN:
      case GQLParser::OPTIONAL:
      case GQLParser::OR:
      case GQLParser::ORDER:
      case GQLParser::ORDINALITY:
      case GQLParser::OTHERWISE:
      case GQLParser::PARAMETER:
      case GQLParser::PARAMETERS:
      case GQLParser::PATH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::PATHS:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::POWER:
      case GQLParser::PRECISION:
      case GQLParser::PROJECT:
      case GQLParser::PROPERTY:
      case GQLParser::PROPERTY_EXISTS:
      case GQLParser::RADIANS:
      case GQLParser::READ:
      case GQLParser::REAL:
      case GQLParser::RECORD:
      case GQLParser::REMOVE:
      case GQLParser::REPEATABLE:
      case GQLParser::REPLACE:
      case GQLParser::RESET:
      case GQLParser::RETURN:
      case GQLParser::ROLLBACK:
      case GQLParser::RTRIM:
      case GQLParser::RIGHT:
      case GQLParser::SAME:
      case GQLParser::SCHEMA:
      case GQLParser::SELECT:
      case GQLParser::SESSION:
      case GQLParser::SET:
      case GQLParser::SHORTEST:
      case GQLParser::SIGNED:
      case GQLParser::SIMPLE:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::SOURCE:
      case GQLParser::SQRT:
      case GQLParser::START:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::STRING:
      case GQLParser::SUM:
      case GQLParser::TABLE:
      case GQLParser::TAN:
      case GQLParser::TANH:
      case GQLParser::TEMP:
      case GQLParser::THEN:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::TIMEZONE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRAILING:
      case GQLParser::TRANSACTION:
      case GQLParser::TRIM:
      case GQLParser::K_TRUE:
      case GQLParser::TYPE:
      case GQLParser::TYPED:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT128:
      case GQLParser::UINT16:
      case GQLParser::UINT256:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT8:
      case GQLParser::UNDIRECTED:
      case GQLParser::UNION:
      case GQLParser::UNKNOWN:
      case GQLParser::UNSIGNED:
      case GQLParser::UPPER:
      case GQLParser::USE:
      case GQLParser::USMALLINT:
      case GQLParser::VALUE:
      case GQLParser::VARBINARY:
      case GQLParser::VARCHAR:
      case GQLParser::VARIABLE:
      case GQLParser::WALK:
      case GQLParser::WHEN:
      case GQLParser::WHERE:
      case GQLParser::WITH:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::XOR:
      case GQLParser::YIELD:
      case GQLParser::ZONE:
      case GQLParser::ZONED:
      case GQLParser::ZONED_DATETIME:
      case GQLParser::ZONED_TIME:
      case GQLParser::INTERVAL_DAY:
      case GQLParser::INTERVAL_WEEK:
      case GQLParser::INTERVAL_MONTH:
      case GQLParser::INTERVAL_YEAR:
      case GQLParser::EDGE_SYNONYM:
      case GQLParser::EDGES_SYNONYM:
      case GQLParser::NODE_SYNONYM:
      case GQLParser::KEY_WORD:
      case GQLParser::PRE_RESERVED_WORD:
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(2758);
        labelName();
        break;
      }

      case GQLParser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(2759);
        match(GQLParser::LEFT_PAREN);
        setState(2760);
        simplifiedContents();
        setState(2761);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhereClauseContext ------------------------------------------------------------------

GQLParser::WhereClauseContext::WhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::WhereClauseContext::WHERE() {
  return getToken(GQLParser::WHERE, 0);
}

GQLParser::ExpressionContext* GQLParser::WhereClauseContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}


size_t GQLParser::WhereClauseContext::getRuleIndex() const {
  return GQLParser::RuleWhereClause;
}


std::any GQLParser::WhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitWhereClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::WhereClauseContext* GQLParser::whereClause() {
  WhereClauseContext *_localctx = _tracker.createInstance<WhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 634, GQLParser::RuleWhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2765);
    match(GQLParser::WHERE);
    setState(2766);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- YieldClauseContext ------------------------------------------------------------------

GQLParser::YieldClauseContext::YieldClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::YieldClauseContext::YIELD() {
  return getToken(GQLParser::YIELD, 0);
}

GQLParser::YieldItemListContext* GQLParser::YieldClauseContext::yieldItemList() {
  return getRuleContext<GQLParser::YieldItemListContext>(0);
}


size_t GQLParser::YieldClauseContext::getRuleIndex() const {
  return GQLParser::RuleYieldClause;
}


std::any GQLParser::YieldClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitYieldClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::YieldClauseContext* GQLParser::yieldClause() {
  YieldClauseContext *_localctx = _tracker.createInstance<YieldClauseContext>(_ctx, getState());
  enterRule(_localctx, 636, GQLParser::RuleYieldClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2768);
    match(GQLParser::YIELD);
    setState(2769);
    yieldItemList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- YieldItemListContext ------------------------------------------------------------------

GQLParser::YieldItemListContext::YieldItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::YieldItemContext *> GQLParser::YieldItemListContext::yieldItem() {
  return getRuleContexts<GQLParser::YieldItemContext>();
}

GQLParser::YieldItemContext* GQLParser::YieldItemListContext::yieldItem(size_t i) {
  return getRuleContext<GQLParser::YieldItemContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::YieldItemListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::YieldItemListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::YieldItemListContext::getRuleIndex() const {
  return GQLParser::RuleYieldItemList;
}


std::any GQLParser::YieldItemListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitYieldItemList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::YieldItemListContext* GQLParser::yieldItemList() {
  YieldItemListContext *_localctx = _tracker.createInstance<YieldItemListContext>(_ctx, getState());
  enterRule(_localctx, 638, GQLParser::RuleYieldItemList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2771);
    yieldItem();
    setState(2776);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(2772);
      match(GQLParser::COMMA);
      setState(2773);
      yieldItem();
      setState(2778);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- YieldItemContext ------------------------------------------------------------------

GQLParser::YieldItemContext::YieldItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::YieldItemNameContext* GQLParser::YieldItemContext::yieldItemName() {
  return getRuleContext<GQLParser::YieldItemNameContext>(0);
}

GQLParser::YieldItemAliasContext* GQLParser::YieldItemContext::yieldItemAlias() {
  return getRuleContext<GQLParser::YieldItemAliasContext>(0);
}


size_t GQLParser::YieldItemContext::getRuleIndex() const {
  return GQLParser::RuleYieldItem;
}


std::any GQLParser::YieldItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitYieldItem(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::YieldItemContext* GQLParser::yieldItem() {
  YieldItemContext *_localctx = _tracker.createInstance<YieldItemContext>(_ctx, getState());
  enterRule(_localctx, 640, GQLParser::RuleYieldItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2779);
    yieldItemName();
    setState(2781);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::AS) {
      setState(2780);
      yieldItemAlias();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- YieldItemNameContext ------------------------------------------------------------------

GQLParser::YieldItemNameContext::YieldItemNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FieldNameContext* GQLParser::YieldItemNameContext::fieldName() {
  return getRuleContext<GQLParser::FieldNameContext>(0);
}


size_t GQLParser::YieldItemNameContext::getRuleIndex() const {
  return GQLParser::RuleYieldItemName;
}


std::any GQLParser::YieldItemNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitYieldItemName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::YieldItemNameContext* GQLParser::yieldItemName() {
  YieldItemNameContext *_localctx = _tracker.createInstance<YieldItemNameContext>(_ctx, getState());
  enterRule(_localctx, 642, GQLParser::RuleYieldItemName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2783);
    fieldName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- YieldItemAliasContext ------------------------------------------------------------------

GQLParser::YieldItemAliasContext::YieldItemAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::YieldItemAliasContext::AS() {
  return getToken(GQLParser::AS, 0);
}

GQLParser::BindingVariableContext* GQLParser::YieldItemAliasContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}


size_t GQLParser::YieldItemAliasContext::getRuleIndex() const {
  return GQLParser::RuleYieldItemAlias;
}


std::any GQLParser::YieldItemAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitYieldItemAlias(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::YieldItemAliasContext* GQLParser::yieldItemAlias() {
  YieldItemAliasContext *_localctx = _tracker.createInstance<YieldItemAliasContext>(_ctx, getState());
  enterRule(_localctx, 644, GQLParser::RuleYieldItemAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2785);
    match(GQLParser::AS);
    setState(2786);
    bindingVariable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupByClauseContext ------------------------------------------------------------------

GQLParser::GroupByClauseContext::GroupByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GroupByClauseContext::GROUP() {
  return getToken(GQLParser::GROUP, 0);
}

tree::TerminalNode* GQLParser::GroupByClauseContext::BY() {
  return getToken(GQLParser::BY, 0);
}

GQLParser::GroupingElementListContext* GQLParser::GroupByClauseContext::groupingElementList() {
  return getRuleContext<GQLParser::GroupingElementListContext>(0);
}


size_t GQLParser::GroupByClauseContext::getRuleIndex() const {
  return GQLParser::RuleGroupByClause;
}


std::any GQLParser::GroupByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGroupByClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GroupByClauseContext* GQLParser::groupByClause() {
  GroupByClauseContext *_localctx = _tracker.createInstance<GroupByClauseContext>(_ctx, getState());
  enterRule(_localctx, 646, GQLParser::RuleGroupByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2788);
    match(GQLParser::GROUP);
    setState(2789);
    match(GQLParser::BY);
    setState(2790);
    groupingElementList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupingElementListContext ------------------------------------------------------------------

GQLParser::GroupingElementListContext::GroupingElementListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::GroupingElementContext *> GQLParser::GroupingElementListContext::groupingElement() {
  return getRuleContexts<GQLParser::GroupingElementContext>();
}

GQLParser::GroupingElementContext* GQLParser::GroupingElementListContext::groupingElement(size_t i) {
  return getRuleContext<GQLParser::GroupingElementContext>(i);
}

tree::TerminalNode* GQLParser::GroupingElementListContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::EmptyGroupingSetContext* GQLParser::GroupingElementListContext::emptyGroupingSet() {
  return getRuleContext<GQLParser::EmptyGroupingSetContext>(0);
}


size_t GQLParser::GroupingElementListContext::getRuleIndex() const {
  return GQLParser::RuleGroupingElementList;
}


std::any GQLParser::GroupingElementListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGroupingElementList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GroupingElementListContext* GQLParser::groupingElementList() {
  GroupingElementListContext *_localctx = _tracker.createInstance<GroupingElementListContext>(_ctx, getState());
  enterRule(_localctx, 648, GQLParser::RuleGroupingElementList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2798);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ACYCLIC:
      case GQLParser::ALL:
      case GQLParser::ALL_DIFFERENT:
      case GQLParser::AND:
      case GQLParser::ANY:
      case GQLParser::ARRAY:
      case GQLParser::AS:
      case GQLParser::ASC:
      case GQLParser::ASCENDING:
      case GQLParser::ASIN:
      case GQLParser::AT:
      case GQLParser::ATAN:
      case GQLParser::AVG:
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::BINARY:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::BOOL:
      case GQLParser::BOOLEAN:
      case GQLParser::BOTH:
      case GQLParser::BTRIM:
      case GQLParser::BY:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::BYTES:
      case GQLParser::CALL:
      case GQLParser::CASE:
      case GQLParser::CAST:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::CHARACTERISTICS:
      case GQLParser::CLOSE:
      case GQLParser::COALESCE:
      case GQLParser::COLLECT:
      case GQLParser::COMMIT:
      case GQLParser::CONNECTING:
      case GQLParser::COPY:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::COUNT:
      case GQLParser::CREATE:
      case GQLParser::CURRENT_DATE:
      case GQLParser::CURRENT_GRAPH:
      case GQLParser::CURRENT_PROPERTY_GRAPH:
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::CURRENT_TIME:
      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::CURRENT_USER:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DEC:
      case GQLParser::DECIMAL:
      case GQLParser::DEGREES:
      case GQLParser::DELETE:
      case GQLParser::DESC:
      case GQLParser::DESCENDING:
      case GQLParser::DESTINATION:
      case GQLParser::DETACH:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::DISTINCT:
      case GQLParser::DOUBLE:
      case GQLParser::DROP:
      case GQLParser::DURATION:
      case GQLParser::DURATION_BETWEEN:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENT_ID:
      case GQLParser::ELEMENTS:
      case GQLParser::ELSE:
      case GQLParser::END:
      case GQLParser::EXCEPT:
      case GQLParser::EXISTS:
      case GQLParser::EXP:
      case GQLParser::K_FALSE:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FIRST:
      case GQLParser::FLOAT:
      case GQLParser::FLOAT128:
      case GQLParser::FLOAT16:
      case GQLParser::FLOAT256:
      case GQLParser::FLOAT32:
      case GQLParser::FLOAT64:
      case GQLParser::FLOOR:
      case GQLParser::FOR:
      case GQLParser::FROM:
      case GQLParser::GRAPH:
      case GQLParser::GROUP:
      case GQLParser::GROUPS:
      case GQLParser::HAVING:
      case GQLParser::HOME_GRAPH:
      case GQLParser::HOME_PROPERTY_GRAPH:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::I_DONT_KNOW_1:
      case GQLParser::I_DONT_KNOW_2:
      case GQLParser::I_DONT_KNOW_3:
      case GQLParser::I_DONT_KNOW_4:
      case GQLParser::I_DONT_KNOW_5:
      case GQLParser::IF:
      case GQLParser::IN:
      case GQLParser::INSERT:
      case GQLParser::INT:
      case GQLParser::INT8:
      case GQLParser::INT16:
      case GQLParser::INT32:
      case GQLParser::INT64:
      case GQLParser::INT128:
      case GQLParser::INT256:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::INTERSECT:
      case GQLParser::IS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::LEADING:
      case GQLParser::LEFT:
      case GQLParser::LET:
      case GQLParser::LIKE:
      case GQLParser::LIMIT:
      case GQLParser::LIST:
      case GQLParser::LN:
      case GQLParser::LOCAL:
      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIME:
      case GQLParser::LOCAL_TIMESTAMP:
      case GQLParser::LOG:
      case GQLParser::LOG10:
      case GQLParser::LOWER:
      case GQLParser::LTRIM:
      case GQLParser::MATCH:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::MOD:
      case GQLParser::NEXT:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODETACH:
      case GQLParser::NORMALIZE:
      case GQLParser::NORMALIZED:
      case GQLParser::NOT:
      case GQLParser::NULL_:
      case GQLParser::NULLIF:
      case GQLParser::NULLS:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::OF:
      case GQLParser::OFFSET:
      case GQLParser::SKIP_:
      case GQLParser::ONLY:
      case GQLParser::OPEN:
      case GQLParser::OPTIONAL:
      case GQLParser::OR:
      case GQLParser::ORDER:
      case GQLParser::ORDINALITY:
      case GQLParser::OTHERWISE:
      case GQLParser::PARAMETER:
      case GQLParser::PARAMETERS:
      case GQLParser::PATH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::PATHS:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::POWER:
      case GQLParser::PRECISION:
      case GQLParser::PROJECT:
      case GQLParser::PROPERTY:
      case GQLParser::PROPERTY_EXISTS:
      case GQLParser::RADIANS:
      case GQLParser::READ:
      case GQLParser::REAL:
      case GQLParser::RECORD:
      case GQLParser::REMOVE:
      case GQLParser::REPEATABLE:
      case GQLParser::REPLACE:
      case GQLParser::RESET:
      case GQLParser::RETURN:
      case GQLParser::ROLLBACK:
      case GQLParser::RTRIM:
      case GQLParser::RIGHT:
      case GQLParser::SAME:
      case GQLParser::SCHEMA:
      case GQLParser::SELECT:
      case GQLParser::SESSION:
      case GQLParser::SET:
      case GQLParser::SHORTEST:
      case GQLParser::SIGNED:
      case GQLParser::SIMPLE:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::SOURCE:
      case GQLParser::SQRT:
      case GQLParser::START:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::STRING:
      case GQLParser::SUM:
      case GQLParser::TABLE:
      case GQLParser::TAN:
      case GQLParser::TANH:
      case GQLParser::TEMP:
      case GQLParser::THEN:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::TIMEZONE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRAILING:
      case GQLParser::TRANSACTION:
      case GQLParser::TRIM:
      case GQLParser::K_TRUE:
      case GQLParser::TYPE:
      case GQLParser::TYPED:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT128:
      case GQLParser::UINT16:
      case GQLParser::UINT256:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT8:
      case GQLParser::UNDIRECTED:
      case GQLParser::UNION:
      case GQLParser::UNKNOWN:
      case GQLParser::UNSIGNED:
      case GQLParser::UPPER:
      case GQLParser::USE:
      case GQLParser::USMALLINT:
      case GQLParser::VALUE:
      case GQLParser::VARBINARY:
      case GQLParser::VARCHAR:
      case GQLParser::VARIABLE:
      case GQLParser::WALK:
      case GQLParser::WHEN:
      case GQLParser::WHERE:
      case GQLParser::WITH:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::XOR:
      case GQLParser::YIELD:
      case GQLParser::ZONE:
      case GQLParser::ZONED:
      case GQLParser::ZONED_DATETIME:
      case GQLParser::ZONED_TIME:
      case GQLParser::INTERVAL_DAY:
      case GQLParser::INTERVAL_WEEK:
      case GQLParser::INTERVAL_MONTH:
      case GQLParser::INTERVAL_YEAR:
      case GQLParser::EDGE_SYNONYM:
      case GQLParser::EDGES_SYNONYM:
      case GQLParser::NODE_SYNONYM:
      case GQLParser::KEY_WORD:
      case GQLParser::PRE_RESERVED_WORD:
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(2792);
        groupingElement();
        setState(2795);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 250, _ctx)) {
        case 1: {
          setState(2793);
          match(GQLParser::COMMA);
          setState(2794);
          groupingElement();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(2797);
        emptyGroupingSet();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupingElementContext ------------------------------------------------------------------

GQLParser::GroupingElementContext::GroupingElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::GroupingElementContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}


size_t GQLParser::GroupingElementContext::getRuleIndex() const {
  return GQLParser::RuleGroupingElement;
}


std::any GQLParser::GroupingElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGroupingElement(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GroupingElementContext* GQLParser::groupingElement() {
  GroupingElementContext *_localctx = _tracker.createInstance<GroupingElementContext>(_ctx, getState());
  enterRule(_localctx, 650, GQLParser::RuleGroupingElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2800);
    bindingVariableReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyGroupingSetContext ------------------------------------------------------------------

GQLParser::EmptyGroupingSetContext::EmptyGroupingSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EmptyGroupingSetContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::EmptyGroupingSetContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::EmptyGroupingSetContext::getRuleIndex() const {
  return GQLParser::RuleEmptyGroupingSet;
}


std::any GQLParser::EmptyGroupingSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEmptyGroupingSet(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EmptyGroupingSetContext* GQLParser::emptyGroupingSet() {
  EmptyGroupingSetContext *_localctx = _tracker.createInstance<EmptyGroupingSetContext>(_ctx, getState());
  enterRule(_localctx, 652, GQLParser::RuleEmptyGroupingSet);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2802);
    match(GQLParser::LEFT_PAREN);
    setState(2803);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderByClauseContext ------------------------------------------------------------------

GQLParser::OrderByClauseContext::OrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::OrderByClauseContext::ORDER() {
  return getToken(GQLParser::ORDER, 0);
}

tree::TerminalNode* GQLParser::OrderByClauseContext::BY() {
  return getToken(GQLParser::BY, 0);
}

GQLParser::SortSpecificationListContext* GQLParser::OrderByClauseContext::sortSpecificationList() {
  return getRuleContext<GQLParser::SortSpecificationListContext>(0);
}


size_t GQLParser::OrderByClauseContext::getRuleIndex() const {
  return GQLParser::RuleOrderByClause;
}


std::any GQLParser::OrderByClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderByClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::OrderByClauseContext* GQLParser::orderByClause() {
  OrderByClauseContext *_localctx = _tracker.createInstance<OrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 654, GQLParser::RuleOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2805);
    match(GQLParser::ORDER);
    setState(2806);
    match(GQLParser::BY);
    setState(2807);
    sortSpecificationList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AggregateFunctionContext ------------------------------------------------------------------

GQLParser::AggregateFunctionContext::AggregateFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::AggregateFunctionContext::getRuleIndex() const {
  return GQLParser::RuleAggregateFunction;
}

void GQLParser::AggregateFunctionContext::copyFrom(AggregateFunctionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- GqlCountAllFunctionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlCountAllFunctionContext::COUNT() {
  return getToken(GQLParser::COUNT, 0);
}

tree::TerminalNode* GQLParser::GqlCountAllFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::GqlCountAllFunctionContext::ASTERISK() {
  return getToken(GQLParser::ASTERISK, 0);
}

tree::TerminalNode* GQLParser::GqlCountAllFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::GqlCountAllFunctionContext::GqlCountAllFunctionContext(AggregateFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlCountAllFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlCountAllFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlGeneralSetFunctionContext ------------------------------------------------------------------

GQLParser::GeneralSetFunctionTypeContext* GQLParser::GqlGeneralSetFunctionContext::generalSetFunctionType() {
  return getRuleContext<GQLParser::GeneralSetFunctionTypeContext>(0);
}

tree::TerminalNode* GQLParser::GqlGeneralSetFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ExpressionContext* GQLParser::GqlGeneralSetFunctionContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}

tree::TerminalNode* GQLParser::GqlGeneralSetFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::SetQuantifierContext* GQLParser::GqlGeneralSetFunctionContext::setQuantifier() {
  return getRuleContext<GQLParser::SetQuantifierContext>(0);
}

GQLParser::GqlGeneralSetFunctionContext::GqlGeneralSetFunctionContext(AggregateFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlGeneralSetFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlGeneralSetFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlBinarySetFunctionContext ------------------------------------------------------------------

GQLParser::BinarySetFunctionTypeContext* GQLParser::GqlBinarySetFunctionContext::binarySetFunctionType() {
  return getRuleContext<GQLParser::BinarySetFunctionTypeContext>(0);
}

tree::TerminalNode* GQLParser::GqlBinarySetFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::GqlBinarySetFunctionContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

tree::TerminalNode* GQLParser::GqlBinarySetFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

std::vector<GQLParser::ExpressionContext *> GQLParser::GqlBinarySetFunctionContext::expression() {
  return getRuleContexts<GQLParser::ExpressionContext>();
}

GQLParser::ExpressionContext* GQLParser::GqlBinarySetFunctionContext::expression(size_t i) {
  return getRuleContext<GQLParser::ExpressionContext>(i);
}

GQLParser::SetQuantifierContext* GQLParser::GqlBinarySetFunctionContext::setQuantifier() {
  return getRuleContext<GQLParser::SetQuantifierContext>(0);
}

GQLParser::GqlBinarySetFunctionContext::GqlBinarySetFunctionContext(AggregateFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlBinarySetFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlBinarySetFunction(this);
  else
    return visitor->visitChildren(this);
}
GQLParser::AggregateFunctionContext* GQLParser::aggregateFunction() {
  AggregateFunctionContext *_localctx = _tracker.createInstance<AggregateFunctionContext>(_ctx, getState());
  enterRule(_localctx, 656, GQLParser::RuleAggregateFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2831);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<GQLParser::GqlCountAllFunctionContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(2809);
      match(GQLParser::COUNT);
      setState(2810);
      match(GQLParser::LEFT_PAREN);
      setState(2811);
      match(GQLParser::ASTERISK);
      setState(2812);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<GQLParser::GqlGeneralSetFunctionContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(2813);
      generalSetFunctionType();
      setState(2814);
      match(GQLParser::LEFT_PAREN);
      setState(2816);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx)) {
      case 1: {
        setState(2815);
        setQuantifier();
        break;
      }

      default:
        break;
      }
      setState(2818);
      expression(0);
      setState(2819);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<GQLParser::GqlBinarySetFunctionContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(2821);
      binarySetFunctionType();
      setState(2822);
      match(GQLParser::LEFT_PAREN);
      setState(2824);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 253, _ctx)) {
      case 1: {
        setState(2823);
        setQuantifier();
        break;
      }

      default:
        break;
      }
      setState(2826);
      antlrcpp::downCast<GqlBinarySetFunctionContext *>(_localctx)->lhs = expression(0);
      setState(2827);
      match(GQLParser::COMMA);
      setState(2828);
      antlrcpp::downCast<GqlBinarySetFunctionContext *>(_localctx)->rhs = expression(0);
      setState(2829);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneralSetFunctionTypeContext ------------------------------------------------------------------

GQLParser::GeneralSetFunctionTypeContext::GeneralSetFunctionTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GeneralSetFunctionTypeContext::AVG() {
  return getToken(GQLParser::AVG, 0);
}

tree::TerminalNode* GQLParser::GeneralSetFunctionTypeContext::COUNT() {
  return getToken(GQLParser::COUNT, 0);
}

tree::TerminalNode* GQLParser::GeneralSetFunctionTypeContext::MAX() {
  return getToken(GQLParser::MAX, 0);
}

tree::TerminalNode* GQLParser::GeneralSetFunctionTypeContext::MIN() {
  return getToken(GQLParser::MIN, 0);
}

tree::TerminalNode* GQLParser::GeneralSetFunctionTypeContext::SUM() {
  return getToken(GQLParser::SUM, 0);
}

tree::TerminalNode* GQLParser::GeneralSetFunctionTypeContext::COLLECT() {
  return getToken(GQLParser::COLLECT, 0);
}

tree::TerminalNode* GQLParser::GeneralSetFunctionTypeContext::STDDEV_SAMP() {
  return getToken(GQLParser::STDDEV_SAMP, 0);
}

tree::TerminalNode* GQLParser::GeneralSetFunctionTypeContext::STDDEV_POP() {
  return getToken(GQLParser::STDDEV_POP, 0);
}


size_t GQLParser::GeneralSetFunctionTypeContext::getRuleIndex() const {
  return GQLParser::RuleGeneralSetFunctionType;
}


std::any GQLParser::GeneralSetFunctionTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGeneralSetFunctionType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GeneralSetFunctionTypeContext* GQLParser::generalSetFunctionType() {
  GeneralSetFunctionTypeContext *_localctx = _tracker.createInstance<GeneralSetFunctionTypeContext>(_ctx, getState());
  enterRule(_localctx, 658, GQLParser::RuleGeneralSetFunctionType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2833);
    _la = _input->LA(1);
    if (!(((((_la - 42) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 42)) & 1082130433) != 0) || _la == GQLParser::MAX

    || _la == GQLParser::MIN || ((((_la - 237) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 237)) & 11) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetQuantifierContext ------------------------------------------------------------------

GQLParser::SetQuantifierContext::SetQuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SetQuantifierContext::DISTINCT() {
  return getToken(GQLParser::DISTINCT, 0);
}

tree::TerminalNode* GQLParser::SetQuantifierContext::ALL() {
  return getToken(GQLParser::ALL, 0);
}


size_t GQLParser::SetQuantifierContext::getRuleIndex() const {
  return GQLParser::RuleSetQuantifier;
}


std::any GQLParser::SetQuantifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSetQuantifier(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SetQuantifierContext* GQLParser::setQuantifier() {
  SetQuantifierContext *_localctx = _tracker.createInstance<SetQuantifierContext>(_ctx, getState());
  enterRule(_localctx, 660, GQLParser::RuleSetQuantifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2835);
    _la = _input->LA(1);
    if (!(_la == GQLParser::ALL

    || _la == GQLParser::DISTINCT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BinarySetFunctionTypeContext ------------------------------------------------------------------

GQLParser::BinarySetFunctionTypeContext::BinarySetFunctionTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::BinarySetFunctionTypeContext::PERCENTILE_CONT() {
  return getToken(GQLParser::PERCENTILE_CONT, 0);
}

tree::TerminalNode* GQLParser::BinarySetFunctionTypeContext::PERCENTILE_DISC() {
  return getToken(GQLParser::PERCENTILE_DISC, 0);
}


size_t GQLParser::BinarySetFunctionTypeContext::getRuleIndex() const {
  return GQLParser::RuleBinarySetFunctionType;
}


std::any GQLParser::BinarySetFunctionTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBinarySetFunctionType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BinarySetFunctionTypeContext* GQLParser::binarySetFunctionType() {
  BinarySetFunctionTypeContext *_localctx = _tracker.createInstance<BinarySetFunctionTypeContext>(_ctx, getState());
  enterRule(_localctx, 662, GQLParser::RuleBinarySetFunctionType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2837);
    _la = _input->LA(1);
    if (!(_la == GQLParser::PERCENTILE_CONT

    || _la == GQLParser::PERCENTILE_DISC)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortSpecificationListContext ------------------------------------------------------------------

GQLParser::SortSpecificationListContext::SortSpecificationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SortSpecificationContext *> GQLParser::SortSpecificationListContext::sortSpecification() {
  return getRuleContexts<GQLParser::SortSpecificationContext>();
}

GQLParser::SortSpecificationContext* GQLParser::SortSpecificationListContext::sortSpecification(size_t i) {
  return getRuleContext<GQLParser::SortSpecificationContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SortSpecificationListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::SortSpecificationListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::SortSpecificationListContext::getRuleIndex() const {
  return GQLParser::RuleSortSpecificationList;
}


std::any GQLParser::SortSpecificationListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSortSpecificationList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SortSpecificationListContext* GQLParser::sortSpecificationList() {
  SortSpecificationListContext *_localctx = _tracker.createInstance<SortSpecificationListContext>(_ctx, getState());
  enterRule(_localctx, 664, GQLParser::RuleSortSpecificationList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2839);
    sortSpecification();
    setState(2844);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2840);
        match(GQLParser::COMMA);
        setState(2841);
        sortSpecification(); 
      }
      setState(2846);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortSpecificationContext ------------------------------------------------------------------

GQLParser::SortSpecificationContext::SortSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SortKeyContext* GQLParser::SortSpecificationContext::sortKey() {
  return getRuleContext<GQLParser::SortKeyContext>(0);
}

GQLParser::OrderingSpecificationContext* GQLParser::SortSpecificationContext::orderingSpecification() {
  return getRuleContext<GQLParser::OrderingSpecificationContext>(0);
}

GQLParser::NullOrderingContext* GQLParser::SortSpecificationContext::nullOrdering() {
  return getRuleContext<GQLParser::NullOrderingContext>(0);
}


size_t GQLParser::SortSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleSortSpecification;
}


std::any GQLParser::SortSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSortSpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SortSpecificationContext* GQLParser::sortSpecification() {
  SortSpecificationContext *_localctx = _tracker.createInstance<SortSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 666, GQLParser::RuleSortSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2847);
    sortKey();
    setState(2849);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx)) {
    case 1: {
      setState(2848);
      orderingSpecification();
      break;
    }

    default:
      break;
    }
    setState(2852);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx)) {
    case 1: {
      setState(2851);
      nullOrdering();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortKeyContext ------------------------------------------------------------------

GQLParser::SortKeyContext::SortKeyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ExpressionContext* GQLParser::SortKeyContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}


size_t GQLParser::SortKeyContext::getRuleIndex() const {
  return GQLParser::RuleSortKey;
}


std::any GQLParser::SortKeyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSortKey(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SortKeyContext* GQLParser::sortKey() {
  SortKeyContext *_localctx = _tracker.createInstance<SortKeyContext>(_ctx, getState());
  enterRule(_localctx, 668, GQLParser::RuleSortKey);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2854);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderingSpecificationContext ------------------------------------------------------------------

GQLParser::OrderingSpecificationContext::OrderingSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::OrderingSpecificationContext::ASC() {
  return getToken(GQLParser::ASC, 0);
}

tree::TerminalNode* GQLParser::OrderingSpecificationContext::ASCENDING() {
  return getToken(GQLParser::ASCENDING, 0);
}

tree::TerminalNode* GQLParser::OrderingSpecificationContext::DESC() {
  return getToken(GQLParser::DESC, 0);
}

tree::TerminalNode* GQLParser::OrderingSpecificationContext::DESCENDING() {
  return getToken(GQLParser::DESCENDING, 0);
}


size_t GQLParser::OrderingSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleOrderingSpecification;
}


std::any GQLParser::OrderingSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOrderingSpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::OrderingSpecificationContext* GQLParser::orderingSpecification() {
  OrderingSpecificationContext *_localctx = _tracker.createInstance<OrderingSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 670, GQLParser::RuleOrderingSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2856);
    _la = _input->LA(1);
    if (!(((((_la - 37) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 37)) & 3377699720527875) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullOrderingContext ------------------------------------------------------------------

GQLParser::NullOrderingContext::NullOrderingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NullOrderingContext::NULLS() {
  return getToken(GQLParser::NULLS, 0);
}

tree::TerminalNode* GQLParser::NullOrderingContext::FIRST() {
  return getToken(GQLParser::FIRST, 0);
}

tree::TerminalNode* GQLParser::NullOrderingContext::LAST() {
  return getToken(GQLParser::LAST, 0);
}


size_t GQLParser::NullOrderingContext::getRuleIndex() const {
  return GQLParser::RuleNullOrdering;
}


std::any GQLParser::NullOrderingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNullOrdering(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NullOrderingContext* GQLParser::nullOrdering() {
  NullOrderingContext *_localctx = _tracker.createInstance<NullOrderingContext>(_ctx, getState());
  enterRule(_localctx, 672, GQLParser::RuleNullOrdering);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2862);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2858);
      match(GQLParser::NULLS);
      setState(2859);
      match(GQLParser::FIRST);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2860);
      match(GQLParser::NULLS);
      setState(2861);
      match(GQLParser::LAST);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitClauseContext ------------------------------------------------------------------

GQLParser::LimitClauseContext::LimitClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::LimitClauseContext::LIMIT() {
  return getToken(GQLParser::LIMIT, 0);
}

GQLParser::UnsignedIntegerSpecificationContext* GQLParser::LimitClauseContext::unsignedIntegerSpecification() {
  return getRuleContext<GQLParser::UnsignedIntegerSpecificationContext>(0);
}


size_t GQLParser::LimitClauseContext::getRuleIndex() const {
  return GQLParser::RuleLimitClause;
}


std::any GQLParser::LimitClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLimitClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LimitClauseContext* GQLParser::limitClause() {
  LimitClauseContext *_localctx = _tracker.createInstance<LimitClauseContext>(_ctx, getState());
  enterRule(_localctx, 674, GQLParser::RuleLimitClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2864);
    match(GQLParser::LIMIT);
    setState(2865);
    unsignedIntegerSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OffsetClauseContext ------------------------------------------------------------------

GQLParser::OffsetClauseContext::OffsetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::OffsetSynonymContext* GQLParser::OffsetClauseContext::offsetSynonym() {
  return getRuleContext<GQLParser::OffsetSynonymContext>(0);
}

GQLParser::UnsignedIntegerSpecificationContext* GQLParser::OffsetClauseContext::unsignedIntegerSpecification() {
  return getRuleContext<GQLParser::UnsignedIntegerSpecificationContext>(0);
}


size_t GQLParser::OffsetClauseContext::getRuleIndex() const {
  return GQLParser::RuleOffsetClause;
}


std::any GQLParser::OffsetClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOffsetClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::OffsetClauseContext* GQLParser::offsetClause() {
  OffsetClauseContext *_localctx = _tracker.createInstance<OffsetClauseContext>(_ctx, getState());
  enterRule(_localctx, 676, GQLParser::RuleOffsetClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2867);
    offsetSynonym();
    setState(2868);
    unsignedIntegerSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OffsetSynonymContext ------------------------------------------------------------------

GQLParser::OffsetSynonymContext::OffsetSynonymContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::OffsetSynonymContext::OFFSET() {
  return getToken(GQLParser::OFFSET, 0);
}

tree::TerminalNode* GQLParser::OffsetSynonymContext::SKIP_() {
  return getToken(GQLParser::SKIP_, 0);
}


size_t GQLParser::OffsetSynonymContext::getRuleIndex() const {
  return GQLParser::RuleOffsetSynonym;
}


std::any GQLParser::OffsetSynonymContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOffsetSynonym(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::OffsetSynonymContext* GQLParser::offsetSynonym() {
  OffsetSynonymContext *_localctx = _tracker.createInstance<OffsetSynonymContext>(_ctx, getState());
  enterRule(_localctx, 678, GQLParser::RuleOffsetSynonym);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2870);
    _la = _input->LA(1);
    if (!(_la == GQLParser::OFFSET

    || _la == GQLParser::SKIP_)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedGraphTypeSpecificationContext ------------------------------------------------------------------

GQLParser::NestedGraphTypeSpecificationContext::NestedGraphTypeSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NestedGraphTypeSpecificationContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

GQLParser::GraphTypeSpecificationBodyContext* GQLParser::NestedGraphTypeSpecificationContext::graphTypeSpecificationBody() {
  return getRuleContext<GQLParser::GraphTypeSpecificationBodyContext>(0);
}

tree::TerminalNode* GQLParser::NestedGraphTypeSpecificationContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}


size_t GQLParser::NestedGraphTypeSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleNestedGraphTypeSpecification;
}


std::any GQLParser::NestedGraphTypeSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNestedGraphTypeSpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NestedGraphTypeSpecificationContext* GQLParser::nestedGraphTypeSpecification() {
  NestedGraphTypeSpecificationContext *_localctx = _tracker.createInstance<NestedGraphTypeSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 680, GQLParser::RuleNestedGraphTypeSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2872);
    match(GQLParser::LEFT_BRACE);
    setState(2873);
    graphTypeSpecificationBody();
    setState(2874);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphTypeSpecificationBodyContext ------------------------------------------------------------------

GQLParser::GraphTypeSpecificationBodyContext::GraphTypeSpecificationBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementTypeDefinitionListContext* GQLParser::GraphTypeSpecificationBodyContext::elementTypeDefinitionList() {
  return getRuleContext<GQLParser::ElementTypeDefinitionListContext>(0);
}


size_t GQLParser::GraphTypeSpecificationBodyContext::getRuleIndex() const {
  return GQLParser::RuleGraphTypeSpecificationBody;
}


std::any GQLParser::GraphTypeSpecificationBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphTypeSpecificationBody(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphTypeSpecificationBodyContext* GQLParser::graphTypeSpecificationBody() {
  GraphTypeSpecificationBodyContext *_localctx = _tracker.createInstance<GraphTypeSpecificationBodyContext>(_ctx, getState());
  enterRule(_localctx, 682, GQLParser::RuleGraphTypeSpecificationBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2876);
    elementTypeDefinitionList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementTypeDefinitionListContext ------------------------------------------------------------------

GQLParser::ElementTypeDefinitionListContext::ElementTypeDefinitionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::ElementTypeDefinitionContext *> GQLParser::ElementTypeDefinitionListContext::elementTypeDefinition() {
  return getRuleContexts<GQLParser::ElementTypeDefinitionContext>();
}

GQLParser::ElementTypeDefinitionContext* GQLParser::ElementTypeDefinitionListContext::elementTypeDefinition(size_t i) {
  return getRuleContext<GQLParser::ElementTypeDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::ElementTypeDefinitionListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::ElementTypeDefinitionListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::ElementTypeDefinitionListContext::getRuleIndex() const {
  return GQLParser::RuleElementTypeDefinitionList;
}


std::any GQLParser::ElementTypeDefinitionListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitElementTypeDefinitionList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ElementTypeDefinitionListContext* GQLParser::elementTypeDefinitionList() {
  ElementTypeDefinitionListContext *_localctx = _tracker.createInstance<ElementTypeDefinitionListContext>(_ctx, getState());
  enterRule(_localctx, 684, GQLParser::RuleElementTypeDefinitionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2878);
    elementTypeDefinition();
    setState(2883);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(2879);
      match(GQLParser::COMMA);
      setState(2880);
      elementTypeDefinition();
      setState(2885);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementTypeDefinitionContext ------------------------------------------------------------------

GQLParser::ElementTypeDefinitionContext::ElementTypeDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodeTypeDefinitionContext* GQLParser::ElementTypeDefinitionContext::nodeTypeDefinition() {
  return getRuleContext<GQLParser::NodeTypeDefinitionContext>(0);
}

GQLParser::EdgeTypeDefinitionContext* GQLParser::ElementTypeDefinitionContext::edgeTypeDefinition() {
  return getRuleContext<GQLParser::EdgeTypeDefinitionContext>(0);
}


size_t GQLParser::ElementTypeDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleElementTypeDefinition;
}


std::any GQLParser::ElementTypeDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitElementTypeDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ElementTypeDefinitionContext* GQLParser::elementTypeDefinition() {
  ElementTypeDefinitionContext *_localctx = _tracker.createInstance<ElementTypeDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 686, GQLParser::RuleElementTypeDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2888);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 260, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2886);
      nodeTypeDefinition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2887);
      edgeTypeDefinition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypeDefinitionContext ------------------------------------------------------------------

GQLParser::NodeTypeDefinitionContext::NodeTypeDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodeTypePatternContext* GQLParser::NodeTypeDefinitionContext::nodeTypePattern() {
  return getRuleContext<GQLParser::NodeTypePatternContext>(0);
}

tree::TerminalNode* GQLParser::NodeTypeDefinitionContext::NODE_SYNONYM() {
  return getToken(GQLParser::NODE_SYNONYM, 0);
}

GQLParser::NodeTypePhraseContext* GQLParser::NodeTypeDefinitionContext::nodeTypePhrase() {
  return getRuleContext<GQLParser::NodeTypePhraseContext>(0);
}


size_t GQLParser::NodeTypeDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypeDefinition;
}


std::any GQLParser::NodeTypeDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNodeTypeDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NodeTypeDefinitionContext* GQLParser::nodeTypeDefinition() {
  NodeTypeDefinitionContext *_localctx = _tracker.createInstance<NodeTypeDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 688, GQLParser::RuleNodeTypeDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2893);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 1);
        setState(2890);
        nodeTypePattern();
        break;
      }

      case GQLParser::NODE_SYNONYM: {
        enterOuterAlt(_localctx, 2);
        setState(2891);
        match(GQLParser::NODE_SYNONYM);
        setState(2892);
        nodeTypePhrase();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypePatternContext ------------------------------------------------------------------

GQLParser::NodeTypePatternContext::NodeTypePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NodeTypePatternContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::NodeTypePatternContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::NodeTypeNameContext* GQLParser::NodeTypePatternContext::nodeTypeName() {
  return getRuleContext<GQLParser::NodeTypeNameContext>(0);
}

GQLParser::NodeTypeFillerContext* GQLParser::NodeTypePatternContext::nodeTypeFiller() {
  return getRuleContext<GQLParser::NodeTypeFillerContext>(0);
}


size_t GQLParser::NodeTypePatternContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypePattern;
}


std::any GQLParser::NodeTypePatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNodeTypePattern(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NodeTypePatternContext* GQLParser::nodeTypePattern() {
  NodeTypePatternContext *_localctx = _tracker.createInstance<NodeTypePatternContext>(_ctx, getState());
  enterRule(_localctx, 690, GQLParser::RuleNodeTypePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2895);
    match(GQLParser::LEFT_PAREN);
    setState(2897);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 67) != 0)) {
      setState(2896);
      nodeTypeName();
    }
    setState(2900);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::COLON

    || _la == GQLParser::LEFT_BRACE || ((((_la - 149) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 149)) & 21) != 0)) {
      setState(2899);
      nodeTypeFiller();
    }
    setState(2902);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypePhraseContext ------------------------------------------------------------------

GQLParser::NodeTypePhraseContext::NodeTypePhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodeTypeNameContext* GQLParser::NodeTypePhraseContext::nodeTypeName() {
  return getRuleContext<GQLParser::NodeTypeNameContext>(0);
}

tree::TerminalNode* GQLParser::NodeTypePhraseContext::TYPE() {
  return getToken(GQLParser::TYPE, 0);
}

GQLParser::NodeTypeFillerContext* GQLParser::NodeTypePhraseContext::nodeTypeFiller() {
  return getRuleContext<GQLParser::NodeTypeFillerContext>(0);
}


size_t GQLParser::NodeTypePhraseContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypePhrase;
}


std::any GQLParser::NodeTypePhraseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNodeTypePhrase(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NodeTypePhraseContext* GQLParser::nodeTypePhrase() {
  NodeTypePhraseContext *_localctx = _tracker.createInstance<NodeTypePhraseContext>(_ctx, getState());
  enterRule(_localctx, 692, GQLParser::RuleNodeTypePhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2912);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::TYPE:
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(2905);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::TYPE) {
          setState(2904);
          match(GQLParser::TYPE);
        }
        setState(2907);
        nodeTypeName();
        setState(2909);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 265, _ctx)) {
        case 1: {
          setState(2908);
          nodeTypeFiller();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::COLON:
      case GQLParser::LEFT_BRACE:
      case GQLParser::IS:
      case GQLParser::LABEL:
      case GQLParser::LABELS: {
        enterOuterAlt(_localctx, 2);
        setState(2911);
        nodeTypeFiller();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypeNameContext ------------------------------------------------------------------

GQLParser::NodeTypeNameContext::NodeTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementTypeNameContext* GQLParser::NodeTypeNameContext::elementTypeName() {
  return getRuleContext<GQLParser::ElementTypeNameContext>(0);
}


size_t GQLParser::NodeTypeNameContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypeName;
}


std::any GQLParser::NodeTypeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNodeTypeName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NodeTypeNameContext* GQLParser::nodeTypeName() {
  NodeTypeNameContext *_localctx = _tracker.createInstance<NodeTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 694, GQLParser::RuleNodeTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2914);
    elementTypeName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypeFillerContext ------------------------------------------------------------------

GQLParser::NodeTypeFillerContext::NodeTypeFillerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodeTypeLabelSetDefinitionContext* GQLParser::NodeTypeFillerContext::nodeTypeLabelSetDefinition() {
  return getRuleContext<GQLParser::NodeTypeLabelSetDefinitionContext>(0);
}

GQLParser::NodeTypePropertyTypeSetDefinitionContext* GQLParser::NodeTypeFillerContext::nodeTypePropertyTypeSetDefinition() {
  return getRuleContext<GQLParser::NodeTypePropertyTypeSetDefinitionContext>(0);
}


size_t GQLParser::NodeTypeFillerContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypeFiller;
}


std::any GQLParser::NodeTypeFillerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNodeTypeFiller(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NodeTypeFillerContext* GQLParser::nodeTypeFiller() {
  NodeTypeFillerContext *_localctx = _tracker.createInstance<NodeTypeFillerContext>(_ctx, getState());
  enterRule(_localctx, 696, GQLParser::RuleNodeTypeFiller);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2921);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 267, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2916);
      nodeTypeLabelSetDefinition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2917);
      nodeTypePropertyTypeSetDefinition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2918);
      nodeTypeLabelSetDefinition();
      setState(2919);
      nodeTypePropertyTypeSetDefinition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypeLabelSetDefinitionContext ------------------------------------------------------------------

GQLParser::NodeTypeLabelSetDefinitionContext::NodeTypeLabelSetDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::LabelSetDefinitionContext* GQLParser::NodeTypeLabelSetDefinitionContext::labelSetDefinition() {
  return getRuleContext<GQLParser::LabelSetDefinitionContext>(0);
}


size_t GQLParser::NodeTypeLabelSetDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypeLabelSetDefinition;
}


std::any GQLParser::NodeTypeLabelSetDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNodeTypeLabelSetDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NodeTypeLabelSetDefinitionContext* GQLParser::nodeTypeLabelSetDefinition() {
  NodeTypeLabelSetDefinitionContext *_localctx = _tracker.createInstance<NodeTypeLabelSetDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 698, GQLParser::RuleNodeTypeLabelSetDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2923);
    labelSetDefinition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypePropertyTypeSetDefinitionContext ------------------------------------------------------------------

GQLParser::NodeTypePropertyTypeSetDefinitionContext::NodeTypePropertyTypeSetDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PropertyTypeSetDefinitionContext* GQLParser::NodeTypePropertyTypeSetDefinitionContext::propertyTypeSetDefinition() {
  return getRuleContext<GQLParser::PropertyTypeSetDefinitionContext>(0);
}


size_t GQLParser::NodeTypePropertyTypeSetDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypePropertyTypeSetDefinition;
}


std::any GQLParser::NodeTypePropertyTypeSetDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNodeTypePropertyTypeSetDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NodeTypePropertyTypeSetDefinitionContext* GQLParser::nodeTypePropertyTypeSetDefinition() {
  NodeTypePropertyTypeSetDefinitionContext *_localctx = _tracker.createInstance<NodeTypePropertyTypeSetDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 700, GQLParser::RuleNodeTypePropertyTypeSetDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2925);
    propertyTypeSetDefinition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypeDefinitionContext ------------------------------------------------------------------

GQLParser::EdgeTypeDefinitionContext::EdgeTypeDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EdgeTypePatternContext* GQLParser::EdgeTypeDefinitionContext::edgeTypePattern() {
  return getRuleContext<GQLParser::EdgeTypePatternContext>(0);
}

tree::TerminalNode* GQLParser::EdgeTypeDefinitionContext::EDGE_SYNONYM() {
  return getToken(GQLParser::EDGE_SYNONYM, 0);
}

GQLParser::EdgeTypePhraseContext* GQLParser::EdgeTypeDefinitionContext::edgeTypePhrase() {
  return getRuleContext<GQLParser::EdgeTypePhraseContext>(0);
}

GQLParser::EdgeKindContext* GQLParser::EdgeTypeDefinitionContext::edgeKind() {
  return getRuleContext<GQLParser::EdgeKindContext>(0);
}


size_t GQLParser::EdgeTypeDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypeDefinition;
}


std::any GQLParser::EdgeTypeDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEdgeTypeDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EdgeTypeDefinitionContext* GQLParser::edgeTypeDefinition() {
  EdgeTypeDefinitionContext *_localctx = _tracker.createInstance<EdgeTypeDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 702, GQLParser::RuleEdgeTypeDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2933);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 1);
        setState(2927);
        edgeTypePattern();
        break;
      }

      case GQLParser::DIRECTED:
      case GQLParser::UNDIRECTED:
      case GQLParser::EDGE_SYNONYM: {
        enterOuterAlt(_localctx, 2);
        setState(2929);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::DIRECTED || _la == GQLParser::UNDIRECTED) {
          setState(2928);
          edgeKind();
        }
        setState(2931);
        match(GQLParser::EDGE_SYNONYM);
        setState(2932);
        edgeTypePhrase();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypePatternContext ------------------------------------------------------------------

GQLParser::EdgeTypePatternContext::EdgeTypePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FullEdgeTypePatternContext* GQLParser::EdgeTypePatternContext::fullEdgeTypePattern() {
  return getRuleContext<GQLParser::FullEdgeTypePatternContext>(0);
}

GQLParser::AbbreviatedEdgeTypePatternContext* GQLParser::EdgeTypePatternContext::abbreviatedEdgeTypePattern() {
  return getRuleContext<GQLParser::AbbreviatedEdgeTypePatternContext>(0);
}


size_t GQLParser::EdgeTypePatternContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypePattern;
}


std::any GQLParser::EdgeTypePatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEdgeTypePattern(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EdgeTypePatternContext* GQLParser::edgeTypePattern() {
  EdgeTypePatternContext *_localctx = _tracker.createInstance<EdgeTypePatternContext>(_ctx, getState());
  enterRule(_localctx, 704, GQLParser::RuleEdgeTypePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2937);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 270, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2935);
      fullEdgeTypePattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2936);
      abbreviatedEdgeTypePattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypePhraseContext ------------------------------------------------------------------

GQLParser::EdgeTypePhraseContext::EdgeTypePhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EdgeTypeNameContext* GQLParser::EdgeTypePhraseContext::edgeTypeName() {
  return getRuleContext<GQLParser::EdgeTypeNameContext>(0);
}

tree::TerminalNode* GQLParser::EdgeTypePhraseContext::TYPE() {
  return getToken(GQLParser::TYPE, 0);
}

GQLParser::EdgeTypeFillerContext* GQLParser::EdgeTypePhraseContext::edgeTypeFiller() {
  return getRuleContext<GQLParser::EdgeTypeFillerContext>(0);
}

GQLParser::EndpointDefinitionContext* GQLParser::EdgeTypePhraseContext::endpointDefinition() {
  return getRuleContext<GQLParser::EndpointDefinitionContext>(0);
}


size_t GQLParser::EdgeTypePhraseContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypePhrase;
}


std::any GQLParser::EdgeTypePhraseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEdgeTypePhrase(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EdgeTypePhraseContext* GQLParser::edgeTypePhrase() {
  EdgeTypePhraseContext *_localctx = _tracker.createInstance<EdgeTypePhraseContext>(_ctx, getState());
  enterRule(_localctx, 706, GQLParser::RuleEdgeTypePhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2951);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::TYPE:
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::ACCENT_QUOTED_STRING_LITERAL:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(2940);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::TYPE) {
          setState(2939);
          match(GQLParser::TYPE);
        }
        setState(2942);
        edgeTypeName();
        setState(2946);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 272, _ctx)) {
        case 1: {
          setState(2943);
          edgeTypeFiller();
          setState(2944);
          endpointDefinition();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::COLON:
      case GQLParser::LEFT_BRACE:
      case GQLParser::IS:
      case GQLParser::LABEL:
      case GQLParser::LABELS: {
        enterOuterAlt(_localctx, 2);
        setState(2948);
        edgeTypeFiller();
        setState(2949);
        endpointDefinition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypeNameContext ------------------------------------------------------------------

GQLParser::EdgeTypeNameContext::EdgeTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementTypeNameContext* GQLParser::EdgeTypeNameContext::elementTypeName() {
  return getRuleContext<GQLParser::ElementTypeNameContext>(0);
}


size_t GQLParser::EdgeTypeNameContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypeName;
}


std::any GQLParser::EdgeTypeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEdgeTypeName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EdgeTypeNameContext* GQLParser::edgeTypeName() {
  EdgeTypeNameContext *_localctx = _tracker.createInstance<EdgeTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 708, GQLParser::RuleEdgeTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2953);
    elementTypeName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypeFillerContext ------------------------------------------------------------------

GQLParser::EdgeTypeFillerContext::EdgeTypeFillerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EdgeTypeLabelSetDefinitionContext* GQLParser::EdgeTypeFillerContext::edgeTypeLabelSetDefinition() {
  return getRuleContext<GQLParser::EdgeTypeLabelSetDefinitionContext>(0);
}

GQLParser::EdgeTypePropertyTypeSetDefinitionContext* GQLParser::EdgeTypeFillerContext::edgeTypePropertyTypeSetDefinition() {
  return getRuleContext<GQLParser::EdgeTypePropertyTypeSetDefinitionContext>(0);
}


size_t GQLParser::EdgeTypeFillerContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypeFiller;
}


std::any GQLParser::EdgeTypeFillerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEdgeTypeFiller(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EdgeTypeFillerContext* GQLParser::edgeTypeFiller() {
  EdgeTypeFillerContext *_localctx = _tracker.createInstance<EdgeTypeFillerContext>(_ctx, getState());
  enterRule(_localctx, 710, GQLParser::RuleEdgeTypeFiller);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2960);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 274, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2955);
      edgeTypeLabelSetDefinition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2956);
      edgeTypePropertyTypeSetDefinition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2957);
      edgeTypeLabelSetDefinition();
      setState(2958);
      edgeTypePropertyTypeSetDefinition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypeLabelSetDefinitionContext ------------------------------------------------------------------

GQLParser::EdgeTypeLabelSetDefinitionContext::EdgeTypeLabelSetDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::LabelSetDefinitionContext* GQLParser::EdgeTypeLabelSetDefinitionContext::labelSetDefinition() {
  return getRuleContext<GQLParser::LabelSetDefinitionContext>(0);
}


size_t GQLParser::EdgeTypeLabelSetDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypeLabelSetDefinition;
}


std::any GQLParser::EdgeTypeLabelSetDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEdgeTypeLabelSetDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EdgeTypeLabelSetDefinitionContext* GQLParser::edgeTypeLabelSetDefinition() {
  EdgeTypeLabelSetDefinitionContext *_localctx = _tracker.createInstance<EdgeTypeLabelSetDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 712, GQLParser::RuleEdgeTypeLabelSetDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2962);
    labelSetDefinition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypePropertyTypeSetDefinitionContext ------------------------------------------------------------------

GQLParser::EdgeTypePropertyTypeSetDefinitionContext::EdgeTypePropertyTypeSetDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PropertyTypeSetDefinitionContext* GQLParser::EdgeTypePropertyTypeSetDefinitionContext::propertyTypeSetDefinition() {
  return getRuleContext<GQLParser::PropertyTypeSetDefinitionContext>(0);
}


size_t GQLParser::EdgeTypePropertyTypeSetDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypePropertyTypeSetDefinition;
}


std::any GQLParser::EdgeTypePropertyTypeSetDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEdgeTypePropertyTypeSetDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EdgeTypePropertyTypeSetDefinitionContext* GQLParser::edgeTypePropertyTypeSetDefinition() {
  EdgeTypePropertyTypeSetDefinitionContext *_localctx = _tracker.createInstance<EdgeTypePropertyTypeSetDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 714, GQLParser::RuleEdgeTypePropertyTypeSetDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2964);
    propertyTypeSetDefinition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgeTypePatternContext ------------------------------------------------------------------

GQLParser::FullEdgeTypePatternContext::FullEdgeTypePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FullEdgeTypePatternPointingRightContext* GQLParser::FullEdgeTypePatternContext::fullEdgeTypePatternPointingRight() {
  return getRuleContext<GQLParser::FullEdgeTypePatternPointingRightContext>(0);
}

GQLParser::FullEdgeTypePatternPointingLeftContext* GQLParser::FullEdgeTypePatternContext::fullEdgeTypePatternPointingLeft() {
  return getRuleContext<GQLParser::FullEdgeTypePatternPointingLeftContext>(0);
}

GQLParser::FullEdgeTypePatternUndirectedContext* GQLParser::FullEdgeTypePatternContext::fullEdgeTypePatternUndirected() {
  return getRuleContext<GQLParser::FullEdgeTypePatternUndirectedContext>(0);
}


size_t GQLParser::FullEdgeTypePatternContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgeTypePattern;
}


std::any GQLParser::FullEdgeTypePatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFullEdgeTypePattern(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FullEdgeTypePatternContext* GQLParser::fullEdgeTypePattern() {
  FullEdgeTypePatternContext *_localctx = _tracker.createInstance<FullEdgeTypePatternContext>(_ctx, getState());
  enterRule(_localctx, 716, GQLParser::RuleFullEdgeTypePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2969);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 275, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2966);
      fullEdgeTypePatternPointingRight();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2967);
      fullEdgeTypePatternPointingLeft();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2968);
      fullEdgeTypePatternUndirected();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgeTypePatternPointingRightContext ------------------------------------------------------------------

GQLParser::FullEdgeTypePatternPointingRightContext::FullEdgeTypePatternPointingRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SourceNodeTypeReferenceContext* GQLParser::FullEdgeTypePatternPointingRightContext::sourceNodeTypeReference() {
  return getRuleContext<GQLParser::SourceNodeTypeReferenceContext>(0);
}

GQLParser::ArcTypePointingRightContext* GQLParser::FullEdgeTypePatternPointingRightContext::arcTypePointingRight() {
  return getRuleContext<GQLParser::ArcTypePointingRightContext>(0);
}

GQLParser::DestinationNodeTypeReferenceContext* GQLParser::FullEdgeTypePatternPointingRightContext::destinationNodeTypeReference() {
  return getRuleContext<GQLParser::DestinationNodeTypeReferenceContext>(0);
}


size_t GQLParser::FullEdgeTypePatternPointingRightContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgeTypePatternPointingRight;
}


std::any GQLParser::FullEdgeTypePatternPointingRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFullEdgeTypePatternPointingRight(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FullEdgeTypePatternPointingRightContext* GQLParser::fullEdgeTypePatternPointingRight() {
  FullEdgeTypePatternPointingRightContext *_localctx = _tracker.createInstance<FullEdgeTypePatternPointingRightContext>(_ctx, getState());
  enterRule(_localctx, 718, GQLParser::RuleFullEdgeTypePatternPointingRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2971);
    sourceNodeTypeReference();
    setState(2972);
    arcTypePointingRight();
    setState(2973);
    destinationNodeTypeReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgeTypePatternPointingLeftContext ------------------------------------------------------------------

GQLParser::FullEdgeTypePatternPointingLeftContext::FullEdgeTypePatternPointingLeftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DestinationNodeTypeReferenceContext* GQLParser::FullEdgeTypePatternPointingLeftContext::destinationNodeTypeReference() {
  return getRuleContext<GQLParser::DestinationNodeTypeReferenceContext>(0);
}

GQLParser::ArcTypePointingLeftContext* GQLParser::FullEdgeTypePatternPointingLeftContext::arcTypePointingLeft() {
  return getRuleContext<GQLParser::ArcTypePointingLeftContext>(0);
}

GQLParser::SourceNodeTypeReferenceContext* GQLParser::FullEdgeTypePatternPointingLeftContext::sourceNodeTypeReference() {
  return getRuleContext<GQLParser::SourceNodeTypeReferenceContext>(0);
}


size_t GQLParser::FullEdgeTypePatternPointingLeftContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgeTypePatternPointingLeft;
}


std::any GQLParser::FullEdgeTypePatternPointingLeftContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFullEdgeTypePatternPointingLeft(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FullEdgeTypePatternPointingLeftContext* GQLParser::fullEdgeTypePatternPointingLeft() {
  FullEdgeTypePatternPointingLeftContext *_localctx = _tracker.createInstance<FullEdgeTypePatternPointingLeftContext>(_ctx, getState());
  enterRule(_localctx, 720, GQLParser::RuleFullEdgeTypePatternPointingLeft);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2975);
    destinationNodeTypeReference();
    setState(2976);
    arcTypePointingLeft();
    setState(2977);
    sourceNodeTypeReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgeTypePatternUndirectedContext ------------------------------------------------------------------

GQLParser::FullEdgeTypePatternUndirectedContext::FullEdgeTypePatternUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SourceNodeTypeReferenceContext* GQLParser::FullEdgeTypePatternUndirectedContext::sourceNodeTypeReference() {
  return getRuleContext<GQLParser::SourceNodeTypeReferenceContext>(0);
}

GQLParser::ArcTypeUndirectedContext* GQLParser::FullEdgeTypePatternUndirectedContext::arcTypeUndirected() {
  return getRuleContext<GQLParser::ArcTypeUndirectedContext>(0);
}

GQLParser::DestinationNodeTypeReferenceContext* GQLParser::FullEdgeTypePatternUndirectedContext::destinationNodeTypeReference() {
  return getRuleContext<GQLParser::DestinationNodeTypeReferenceContext>(0);
}


size_t GQLParser::FullEdgeTypePatternUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgeTypePatternUndirected;
}


std::any GQLParser::FullEdgeTypePatternUndirectedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFullEdgeTypePatternUndirected(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FullEdgeTypePatternUndirectedContext* GQLParser::fullEdgeTypePatternUndirected() {
  FullEdgeTypePatternUndirectedContext *_localctx = _tracker.createInstance<FullEdgeTypePatternUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 722, GQLParser::RuleFullEdgeTypePatternUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2979);
    sourceNodeTypeReference();
    setState(2980);
    arcTypeUndirected();
    setState(2981);
    destinationNodeTypeReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArcTypePointingRightContext ------------------------------------------------------------------

GQLParser::ArcTypePointingRightContext::ArcTypePointingRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ArcTypePointingRightContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}

tree::TerminalNode* GQLParser::ArcTypePointingRightContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

GQLParser::ArcTypeFillerContext* GQLParser::ArcTypePointingRightContext::arcTypeFiller() {
  return getRuleContext<GQLParser::ArcTypeFillerContext>(0);
}

tree::TerminalNode* GQLParser::ArcTypePointingRightContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}

tree::TerminalNode* GQLParser::ArcTypePointingRightContext::RIGHT_ARROW() {
  return getToken(GQLParser::RIGHT_ARROW, 0);
}


size_t GQLParser::ArcTypePointingRightContext::getRuleIndex() const {
  return GQLParser::RuleArcTypePointingRight;
}


std::any GQLParser::ArcTypePointingRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitArcTypePointingRight(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ArcTypePointingRightContext* GQLParser::arcTypePointingRight() {
  ArcTypePointingRightContext *_localctx = _tracker.createInstance<ArcTypePointingRightContext>(_ctx, getState());
  enterRule(_localctx, 724, GQLParser::RuleArcTypePointingRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2983);
    match(GQLParser::MINUS_SIGN);
    setState(2984);
    match(GQLParser::LEFT_BRACKET);
    setState(2985);
    arcTypeFiller();
    setState(2986);
    match(GQLParser::RIGHT_BRACKET);
    setState(2987);
    match(GQLParser::RIGHT_ARROW);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArcTypePointingLeftContext ------------------------------------------------------------------

GQLParser::ArcTypePointingLeftContext::ArcTypePointingLeftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ArcTypePointingLeftContext::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

std::vector<tree::TerminalNode *> GQLParser::ArcTypePointingLeftContext::MINUS_SIGN() {
  return getTokens(GQLParser::MINUS_SIGN);
}

tree::TerminalNode* GQLParser::ArcTypePointingLeftContext::MINUS_SIGN(size_t i) {
  return getToken(GQLParser::MINUS_SIGN, i);
}

tree::TerminalNode* GQLParser::ArcTypePointingLeftContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

GQLParser::ArcTypeFillerContext* GQLParser::ArcTypePointingLeftContext::arcTypeFiller() {
  return getRuleContext<GQLParser::ArcTypeFillerContext>(0);
}

tree::TerminalNode* GQLParser::ArcTypePointingLeftContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}


size_t GQLParser::ArcTypePointingLeftContext::getRuleIndex() const {
  return GQLParser::RuleArcTypePointingLeft;
}


std::any GQLParser::ArcTypePointingLeftContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitArcTypePointingLeft(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ArcTypePointingLeftContext* GQLParser::arcTypePointingLeft() {
  ArcTypePointingLeftContext *_localctx = _tracker.createInstance<ArcTypePointingLeftContext>(_ctx, getState());
  enterRule(_localctx, 726, GQLParser::RuleArcTypePointingLeft);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2989);
    match(GQLParser::LEFT_ANGLE_BRACKET);
    setState(2990);
    match(GQLParser::MINUS_SIGN);
    setState(2991);
    match(GQLParser::LEFT_BRACKET);
    setState(2992);
    arcTypeFiller();
    setState(2993);
    match(GQLParser::RIGHT_BRACKET);
    setState(2994);
    match(GQLParser::MINUS_SIGN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArcTypeUndirectedContext ------------------------------------------------------------------

GQLParser::ArcTypeUndirectedContext::ArcTypeUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GQLParser::ArcTypeUndirectedContext::TILDE() {
  return getTokens(GQLParser::TILDE);
}

tree::TerminalNode* GQLParser::ArcTypeUndirectedContext::TILDE(size_t i) {
  return getToken(GQLParser::TILDE, i);
}

tree::TerminalNode* GQLParser::ArcTypeUndirectedContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

GQLParser::ArcTypeFillerContext* GQLParser::ArcTypeUndirectedContext::arcTypeFiller() {
  return getRuleContext<GQLParser::ArcTypeFillerContext>(0);
}

tree::TerminalNode* GQLParser::ArcTypeUndirectedContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}


size_t GQLParser::ArcTypeUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleArcTypeUndirected;
}


std::any GQLParser::ArcTypeUndirectedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitArcTypeUndirected(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ArcTypeUndirectedContext* GQLParser::arcTypeUndirected() {
  ArcTypeUndirectedContext *_localctx = _tracker.createInstance<ArcTypeUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 728, GQLParser::RuleArcTypeUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2996);
    match(GQLParser::TILDE);
    setState(2997);
    match(GQLParser::LEFT_BRACKET);
    setState(2998);
    arcTypeFiller();
    setState(2999);
    match(GQLParser::RIGHT_BRACKET);
    setState(3000);
    match(GQLParser::TILDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArcTypeFillerContext ------------------------------------------------------------------

GQLParser::ArcTypeFillerContext::ArcTypeFillerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EdgeTypeNameContext* GQLParser::ArcTypeFillerContext::edgeTypeName() {
  return getRuleContext<GQLParser::EdgeTypeNameContext>(0);
}

GQLParser::EdgeTypeFillerContext* GQLParser::ArcTypeFillerContext::edgeTypeFiller() {
  return getRuleContext<GQLParser::EdgeTypeFillerContext>(0);
}


size_t GQLParser::ArcTypeFillerContext::getRuleIndex() const {
  return GQLParser::RuleArcTypeFiller;
}


std::any GQLParser::ArcTypeFillerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitArcTypeFiller(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ArcTypeFillerContext* GQLParser::arcTypeFiller() {
  ArcTypeFillerContext *_localctx = _tracker.createInstance<ArcTypeFillerContext>(_ctx, getState());
  enterRule(_localctx, 730, GQLParser::RuleArcTypeFiller);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3003);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 338) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 338)) & 67) != 0)) {
      setState(3002);
      edgeTypeName();
    }
    setState(3006);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::COLON

    || _la == GQLParser::LEFT_BRACE || ((((_la - 149) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 149)) & 21) != 0)) {
      setState(3005);
      edgeTypeFiller();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbbreviatedEdgeTypePatternContext ------------------------------------------------------------------

GQLParser::AbbreviatedEdgeTypePatternContext::AbbreviatedEdgeTypePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::AbbreviatedEdgeTypePatternPointingRightContext* GQLParser::AbbreviatedEdgeTypePatternContext::abbreviatedEdgeTypePatternPointingRight() {
  return getRuleContext<GQLParser::AbbreviatedEdgeTypePatternPointingRightContext>(0);
}

GQLParser::AbbreviatedEdgeTypePatternPointingLeftContext* GQLParser::AbbreviatedEdgeTypePatternContext::abbreviatedEdgeTypePatternPointingLeft() {
  return getRuleContext<GQLParser::AbbreviatedEdgeTypePatternPointingLeftContext>(0);
}

GQLParser::AbbreviatedEdgeTypePatternUndirectedContext* GQLParser::AbbreviatedEdgeTypePatternContext::abbreviatedEdgeTypePatternUndirected() {
  return getRuleContext<GQLParser::AbbreviatedEdgeTypePatternUndirectedContext>(0);
}


size_t GQLParser::AbbreviatedEdgeTypePatternContext::getRuleIndex() const {
  return GQLParser::RuleAbbreviatedEdgeTypePattern;
}


std::any GQLParser::AbbreviatedEdgeTypePatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAbbreviatedEdgeTypePattern(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::AbbreviatedEdgeTypePatternContext* GQLParser::abbreviatedEdgeTypePattern() {
  AbbreviatedEdgeTypePatternContext *_localctx = _tracker.createInstance<AbbreviatedEdgeTypePatternContext>(_ctx, getState());
  enterRule(_localctx, 732, GQLParser::RuleAbbreviatedEdgeTypePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3011);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3008);
      abbreviatedEdgeTypePatternPointingRight();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3009);
      abbreviatedEdgeTypePatternPointingLeft();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3010);
      abbreviatedEdgeTypePatternUndirected();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbbreviatedEdgeTypePatternPointingRightContext ------------------------------------------------------------------

GQLParser::AbbreviatedEdgeTypePatternPointingRightContext::AbbreviatedEdgeTypePatternPointingRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SourceNodeTypeReferenceContext* GQLParser::AbbreviatedEdgeTypePatternPointingRightContext::sourceNodeTypeReference() {
  return getRuleContext<GQLParser::SourceNodeTypeReferenceContext>(0);
}

tree::TerminalNode* GQLParser::AbbreviatedEdgeTypePatternPointingRightContext::RIGHT_ARROW() {
  return getToken(GQLParser::RIGHT_ARROW, 0);
}

GQLParser::DestinationNodeTypeReferenceContext* GQLParser::AbbreviatedEdgeTypePatternPointingRightContext::destinationNodeTypeReference() {
  return getRuleContext<GQLParser::DestinationNodeTypeReferenceContext>(0);
}


size_t GQLParser::AbbreviatedEdgeTypePatternPointingRightContext::getRuleIndex() const {
  return GQLParser::RuleAbbreviatedEdgeTypePatternPointingRight;
}


std::any GQLParser::AbbreviatedEdgeTypePatternPointingRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAbbreviatedEdgeTypePatternPointingRight(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::AbbreviatedEdgeTypePatternPointingRightContext* GQLParser::abbreviatedEdgeTypePatternPointingRight() {
  AbbreviatedEdgeTypePatternPointingRightContext *_localctx = _tracker.createInstance<AbbreviatedEdgeTypePatternPointingRightContext>(_ctx, getState());
  enterRule(_localctx, 734, GQLParser::RuleAbbreviatedEdgeTypePatternPointingRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3013);
    sourceNodeTypeReference();
    setState(3014);
    match(GQLParser::RIGHT_ARROW);
    setState(3015);
    destinationNodeTypeReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbbreviatedEdgeTypePatternPointingLeftContext ------------------------------------------------------------------

GQLParser::AbbreviatedEdgeTypePatternPointingLeftContext::AbbreviatedEdgeTypePatternPointingLeftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DestinationNodeTypeReferenceContext* GQLParser::AbbreviatedEdgeTypePatternPointingLeftContext::destinationNodeTypeReference() {
  return getRuleContext<GQLParser::DestinationNodeTypeReferenceContext>(0);
}

tree::TerminalNode* GQLParser::AbbreviatedEdgeTypePatternPointingLeftContext::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

tree::TerminalNode* GQLParser::AbbreviatedEdgeTypePatternPointingLeftContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}

GQLParser::SourceNodeTypeReferenceContext* GQLParser::AbbreviatedEdgeTypePatternPointingLeftContext::sourceNodeTypeReference() {
  return getRuleContext<GQLParser::SourceNodeTypeReferenceContext>(0);
}


size_t GQLParser::AbbreviatedEdgeTypePatternPointingLeftContext::getRuleIndex() const {
  return GQLParser::RuleAbbreviatedEdgeTypePatternPointingLeft;
}


std::any GQLParser::AbbreviatedEdgeTypePatternPointingLeftContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAbbreviatedEdgeTypePatternPointingLeft(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::AbbreviatedEdgeTypePatternPointingLeftContext* GQLParser::abbreviatedEdgeTypePatternPointingLeft() {
  AbbreviatedEdgeTypePatternPointingLeftContext *_localctx = _tracker.createInstance<AbbreviatedEdgeTypePatternPointingLeftContext>(_ctx, getState());
  enterRule(_localctx, 736, GQLParser::RuleAbbreviatedEdgeTypePatternPointingLeft);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3017);
    destinationNodeTypeReference();
    setState(3018);
    match(GQLParser::LEFT_ANGLE_BRACKET);
    setState(3019);
    match(GQLParser::MINUS_SIGN);
    setState(3020);
    sourceNodeTypeReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbbreviatedEdgeTypePatternUndirectedContext ------------------------------------------------------------------

GQLParser::AbbreviatedEdgeTypePatternUndirectedContext::AbbreviatedEdgeTypePatternUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SourceNodeTypeReferenceContext* GQLParser::AbbreviatedEdgeTypePatternUndirectedContext::sourceNodeTypeReference() {
  return getRuleContext<GQLParser::SourceNodeTypeReferenceContext>(0);
}

tree::TerminalNode* GQLParser::AbbreviatedEdgeTypePatternUndirectedContext::TILDE() {
  return getToken(GQLParser::TILDE, 0);
}

GQLParser::DestinationNodeTypeReferenceContext* GQLParser::AbbreviatedEdgeTypePatternUndirectedContext::destinationNodeTypeReference() {
  return getRuleContext<GQLParser::DestinationNodeTypeReferenceContext>(0);
}


size_t GQLParser::AbbreviatedEdgeTypePatternUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleAbbreviatedEdgeTypePatternUndirected;
}


std::any GQLParser::AbbreviatedEdgeTypePatternUndirectedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAbbreviatedEdgeTypePatternUndirected(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::AbbreviatedEdgeTypePatternUndirectedContext* GQLParser::abbreviatedEdgeTypePatternUndirected() {
  AbbreviatedEdgeTypePatternUndirectedContext *_localctx = _tracker.createInstance<AbbreviatedEdgeTypePatternUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 738, GQLParser::RuleAbbreviatedEdgeTypePatternUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3022);
    sourceNodeTypeReference();
    setState(3023);
    match(GQLParser::TILDE);
    setState(3024);
    destinationNodeTypeReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypeReferenceContext ------------------------------------------------------------------

GQLParser::NodeTypeReferenceContext::NodeTypeReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SourceNodeTypeReferenceContext* GQLParser::NodeTypeReferenceContext::sourceNodeTypeReference() {
  return getRuleContext<GQLParser::SourceNodeTypeReferenceContext>(0);
}

GQLParser::DestinationNodeTypeReferenceContext* GQLParser::NodeTypeReferenceContext::destinationNodeTypeReference() {
  return getRuleContext<GQLParser::DestinationNodeTypeReferenceContext>(0);
}


size_t GQLParser::NodeTypeReferenceContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypeReference;
}


std::any GQLParser::NodeTypeReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNodeTypeReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NodeTypeReferenceContext* GQLParser::nodeTypeReference() {
  NodeTypeReferenceContext *_localctx = _tracker.createInstance<NodeTypeReferenceContext>(_ctx, getState());
  enterRule(_localctx, 740, GQLParser::RuleNodeTypeReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3028);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3026);
      sourceNodeTypeReference();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3027);
      destinationNodeTypeReference();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourceNodeTypeReferenceContext ------------------------------------------------------------------

GQLParser::SourceNodeTypeReferenceContext::SourceNodeTypeReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SourceNodeTypeReferenceContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::SourceNodeTypeNameContext* GQLParser::SourceNodeTypeReferenceContext::sourceNodeTypeName() {
  return getRuleContext<GQLParser::SourceNodeTypeNameContext>(0);
}

tree::TerminalNode* GQLParser::SourceNodeTypeReferenceContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::NodeTypeFillerContext* GQLParser::SourceNodeTypeReferenceContext::nodeTypeFiller() {
  return getRuleContext<GQLParser::NodeTypeFillerContext>(0);
}


size_t GQLParser::SourceNodeTypeReferenceContext::getRuleIndex() const {
  return GQLParser::RuleSourceNodeTypeReference;
}


std::any GQLParser::SourceNodeTypeReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSourceNodeTypeReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SourceNodeTypeReferenceContext* GQLParser::sourceNodeTypeReference() {
  SourceNodeTypeReferenceContext *_localctx = _tracker.createInstance<SourceNodeTypeReferenceContext>(_ctx, getState());
  enterRule(_localctx, 742, GQLParser::RuleSourceNodeTypeReference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3039);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3030);
      match(GQLParser::LEFT_PAREN);
      setState(3031);
      sourceNodeTypeName();
      setState(3032);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3034);
      match(GQLParser::LEFT_PAREN);
      setState(3036);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::COLON

      || _la == GQLParser::LEFT_BRACE || ((((_la - 149) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 149)) & 21) != 0)) {
        setState(3035);
        nodeTypeFiller();
      }
      setState(3038);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DestinationNodeTypeReferenceContext ------------------------------------------------------------------

GQLParser::DestinationNodeTypeReferenceContext::DestinationNodeTypeReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DestinationNodeTypeReferenceContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::DestinationNodeTypeNameContext* GQLParser::DestinationNodeTypeReferenceContext::destinationNodeTypeName() {
  return getRuleContext<GQLParser::DestinationNodeTypeNameContext>(0);
}

tree::TerminalNode* GQLParser::DestinationNodeTypeReferenceContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::NodeTypeFillerContext* GQLParser::DestinationNodeTypeReferenceContext::nodeTypeFiller() {
  return getRuleContext<GQLParser::NodeTypeFillerContext>(0);
}


size_t GQLParser::DestinationNodeTypeReferenceContext::getRuleIndex() const {
  return GQLParser::RuleDestinationNodeTypeReference;
}


std::any GQLParser::DestinationNodeTypeReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDestinationNodeTypeReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DestinationNodeTypeReferenceContext* GQLParser::destinationNodeTypeReference() {
  DestinationNodeTypeReferenceContext *_localctx = _tracker.createInstance<DestinationNodeTypeReferenceContext>(_ctx, getState());
  enterRule(_localctx, 744, GQLParser::RuleDestinationNodeTypeReference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3050);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3041);
      match(GQLParser::LEFT_PAREN);
      setState(3042);
      destinationNodeTypeName();
      setState(3043);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3045);
      match(GQLParser::LEFT_PAREN);
      setState(3047);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::COLON

      || _la == GQLParser::LEFT_BRACE || ((((_la - 149) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 149)) & 21) != 0)) {
        setState(3046);
        nodeTypeFiller();
      }
      setState(3049);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeKindContext ------------------------------------------------------------------

GQLParser::EdgeKindContext::EdgeKindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EdgeKindContext::DIRECTED() {
  return getToken(GQLParser::DIRECTED, 0);
}

tree::TerminalNode* GQLParser::EdgeKindContext::UNDIRECTED() {
  return getToken(GQLParser::UNDIRECTED, 0);
}


size_t GQLParser::EdgeKindContext::getRuleIndex() const {
  return GQLParser::RuleEdgeKind;
}


std::any GQLParser::EdgeKindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEdgeKind(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EdgeKindContext* GQLParser::edgeKind() {
  EdgeKindContext *_localctx = _tracker.createInstance<EdgeKindContext>(_ctx, getState());
  enterRule(_localctx, 746, GQLParser::RuleEdgeKind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3052);
    _la = _input->LA(1);
    if (!(_la == GQLParser::DIRECTED || _la == GQLParser::UNDIRECTED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndpointDefinitionContext ------------------------------------------------------------------

GQLParser::EndpointDefinitionContext::EndpointDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EndpointDefinitionContext::CONNECTING() {
  return getToken(GQLParser::CONNECTING, 0);
}

GQLParser::EndpointPairDefinitionContext* GQLParser::EndpointDefinitionContext::endpointPairDefinition() {
  return getRuleContext<GQLParser::EndpointPairDefinitionContext>(0);
}


size_t GQLParser::EndpointDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleEndpointDefinition;
}


std::any GQLParser::EndpointDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEndpointDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EndpointDefinitionContext* GQLParser::endpointDefinition() {
  EndpointDefinitionContext *_localctx = _tracker.createInstance<EndpointDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 748, GQLParser::RuleEndpointDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3054);
    match(GQLParser::CONNECTING);
    setState(3055);
    endpointPairDefinition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndpointPairDefinitionContext ------------------------------------------------------------------

GQLParser::EndpointPairDefinitionContext::EndpointPairDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EndpointPairDefinitionPointingRightContext* GQLParser::EndpointPairDefinitionContext::endpointPairDefinitionPointingRight() {
  return getRuleContext<GQLParser::EndpointPairDefinitionPointingRightContext>(0);
}

GQLParser::EndpointPairDefinitionPointingLeftContext* GQLParser::EndpointPairDefinitionContext::endpointPairDefinitionPointingLeft() {
  return getRuleContext<GQLParser::EndpointPairDefinitionPointingLeftContext>(0);
}

GQLParser::EndpointPairDefinitionUndirectedContext* GQLParser::EndpointPairDefinitionContext::endpointPairDefinitionUndirected() {
  return getRuleContext<GQLParser::EndpointPairDefinitionUndirectedContext>(0);
}

GQLParser::AbbreviatedEdgeTypePatternContext* GQLParser::EndpointPairDefinitionContext::abbreviatedEdgeTypePattern() {
  return getRuleContext<GQLParser::AbbreviatedEdgeTypePatternContext>(0);
}


size_t GQLParser::EndpointPairDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleEndpointPairDefinition;
}


std::any GQLParser::EndpointPairDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEndpointPairDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EndpointPairDefinitionContext* GQLParser::endpointPairDefinition() {
  EndpointPairDefinitionContext *_localctx = _tracker.createInstance<EndpointPairDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 750, GQLParser::RuleEndpointPairDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3061);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 284, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3057);
      endpointPairDefinitionPointingRight();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3058);
      endpointPairDefinitionPointingLeft();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3059);
      endpointPairDefinitionUndirected();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3060);
      abbreviatedEdgeTypePattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndpointPairDefinitionPointingRightContext ------------------------------------------------------------------

GQLParser::EndpointPairDefinitionPointingRightContext::EndpointPairDefinitionPointingRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EndpointPairDefinitionPointingRightContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::SourceNodeTypeNameContext* GQLParser::EndpointPairDefinitionPointingRightContext::sourceNodeTypeName() {
  return getRuleContext<GQLParser::SourceNodeTypeNameContext>(0);
}

GQLParser::ConnectorPointingRightContext* GQLParser::EndpointPairDefinitionPointingRightContext::connectorPointingRight() {
  return getRuleContext<GQLParser::ConnectorPointingRightContext>(0);
}

GQLParser::DestinationNodeTypeNameContext* GQLParser::EndpointPairDefinitionPointingRightContext::destinationNodeTypeName() {
  return getRuleContext<GQLParser::DestinationNodeTypeNameContext>(0);
}

tree::TerminalNode* GQLParser::EndpointPairDefinitionPointingRightContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::EndpointPairDefinitionPointingRightContext::getRuleIndex() const {
  return GQLParser::RuleEndpointPairDefinitionPointingRight;
}


std::any GQLParser::EndpointPairDefinitionPointingRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEndpointPairDefinitionPointingRight(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EndpointPairDefinitionPointingRightContext* GQLParser::endpointPairDefinitionPointingRight() {
  EndpointPairDefinitionPointingRightContext *_localctx = _tracker.createInstance<EndpointPairDefinitionPointingRightContext>(_ctx, getState());
  enterRule(_localctx, 752, GQLParser::RuleEndpointPairDefinitionPointingRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3063);
    match(GQLParser::LEFT_PAREN);
    setState(3064);
    sourceNodeTypeName();
    setState(3065);
    connectorPointingRight();
    setState(3066);
    destinationNodeTypeName();
    setState(3067);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndpointPairDefinitionPointingLeftContext ------------------------------------------------------------------

GQLParser::EndpointPairDefinitionPointingLeftContext::EndpointPairDefinitionPointingLeftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EndpointPairDefinitionPointingLeftContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::DestinationNodeTypeNameContext* GQLParser::EndpointPairDefinitionPointingLeftContext::destinationNodeTypeName() {
  return getRuleContext<GQLParser::DestinationNodeTypeNameContext>(0);
}

tree::TerminalNode* GQLParser::EndpointPairDefinitionPointingLeftContext::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

tree::TerminalNode* GQLParser::EndpointPairDefinitionPointingLeftContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}

GQLParser::SourceNodeTypeNameContext* GQLParser::EndpointPairDefinitionPointingLeftContext::sourceNodeTypeName() {
  return getRuleContext<GQLParser::SourceNodeTypeNameContext>(0);
}

tree::TerminalNode* GQLParser::EndpointPairDefinitionPointingLeftContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::EndpointPairDefinitionPointingLeftContext::getRuleIndex() const {
  return GQLParser::RuleEndpointPairDefinitionPointingLeft;
}


std::any GQLParser::EndpointPairDefinitionPointingLeftContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEndpointPairDefinitionPointingLeft(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EndpointPairDefinitionPointingLeftContext* GQLParser::endpointPairDefinitionPointingLeft() {
  EndpointPairDefinitionPointingLeftContext *_localctx = _tracker.createInstance<EndpointPairDefinitionPointingLeftContext>(_ctx, getState());
  enterRule(_localctx, 754, GQLParser::RuleEndpointPairDefinitionPointingLeft);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3069);
    match(GQLParser::LEFT_PAREN);
    setState(3070);
    destinationNodeTypeName();
    setState(3071);
    match(GQLParser::LEFT_ANGLE_BRACKET);
    setState(3072);
    match(GQLParser::MINUS_SIGN);
    setState(3073);
    sourceNodeTypeName();
    setState(3074);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndpointPairDefinitionUndirectedContext ------------------------------------------------------------------

GQLParser::EndpointPairDefinitionUndirectedContext::EndpointPairDefinitionUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EndpointPairDefinitionUndirectedContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::SourceNodeTypeNameContext* GQLParser::EndpointPairDefinitionUndirectedContext::sourceNodeTypeName() {
  return getRuleContext<GQLParser::SourceNodeTypeNameContext>(0);
}

GQLParser::ConnectorUndirectedContext* GQLParser::EndpointPairDefinitionUndirectedContext::connectorUndirected() {
  return getRuleContext<GQLParser::ConnectorUndirectedContext>(0);
}

GQLParser::DestinationNodeTypeNameContext* GQLParser::EndpointPairDefinitionUndirectedContext::destinationNodeTypeName() {
  return getRuleContext<GQLParser::DestinationNodeTypeNameContext>(0);
}

tree::TerminalNode* GQLParser::EndpointPairDefinitionUndirectedContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::EndpointPairDefinitionUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleEndpointPairDefinitionUndirected;
}


std::any GQLParser::EndpointPairDefinitionUndirectedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEndpointPairDefinitionUndirected(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EndpointPairDefinitionUndirectedContext* GQLParser::endpointPairDefinitionUndirected() {
  EndpointPairDefinitionUndirectedContext *_localctx = _tracker.createInstance<EndpointPairDefinitionUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 756, GQLParser::RuleEndpointPairDefinitionUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3076);
    match(GQLParser::LEFT_PAREN);
    setState(3077);
    sourceNodeTypeName();
    setState(3078);
    connectorUndirected();
    setState(3079);
    destinationNodeTypeName();
    setState(3080);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConnectorPointingRightContext ------------------------------------------------------------------

GQLParser::ConnectorPointingRightContext::ConnectorPointingRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ConnectorPointingRightContext::TO() {
  return getToken(GQLParser::TO, 0);
}

tree::TerminalNode* GQLParser::ConnectorPointingRightContext::RIGHT_ARROW() {
  return getToken(GQLParser::RIGHT_ARROW, 0);
}


size_t GQLParser::ConnectorPointingRightContext::getRuleIndex() const {
  return GQLParser::RuleConnectorPointingRight;
}


std::any GQLParser::ConnectorPointingRightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitConnectorPointingRight(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ConnectorPointingRightContext* GQLParser::connectorPointingRight() {
  ConnectorPointingRightContext *_localctx = _tracker.createInstance<ConnectorPointingRightContext>(_ctx, getState());
  enterRule(_localctx, 758, GQLParser::RuleConnectorPointingRight);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3082);
    _la = _input->LA(1);
    if (!(_la == GQLParser::TO

    || _la == GQLParser::RIGHT_ARROW)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConnectorUndirectedContext ------------------------------------------------------------------

GQLParser::ConnectorUndirectedContext::ConnectorUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ConnectorUndirectedContext::TO() {
  return getToken(GQLParser::TO, 0);
}

tree::TerminalNode* GQLParser::ConnectorUndirectedContext::TILDE() {
  return getToken(GQLParser::TILDE, 0);
}


size_t GQLParser::ConnectorUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleConnectorUndirected;
}


std::any GQLParser::ConnectorUndirectedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitConnectorUndirected(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ConnectorUndirectedContext* GQLParser::connectorUndirected() {
  ConnectorUndirectedContext *_localctx = _tracker.createInstance<ConnectorUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 760, GQLParser::RuleConnectorUndirected);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3084);
    _la = _input->LA(1);
    if (!(_la == GQLParser::TILDE || _la == GQLParser::TO)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourceNodeTypeNameContext ------------------------------------------------------------------

GQLParser::SourceNodeTypeNameContext::SourceNodeTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementTypeNameContext* GQLParser::SourceNodeTypeNameContext::elementTypeName() {
  return getRuleContext<GQLParser::ElementTypeNameContext>(0);
}


size_t GQLParser::SourceNodeTypeNameContext::getRuleIndex() const {
  return GQLParser::RuleSourceNodeTypeName;
}


std::any GQLParser::SourceNodeTypeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSourceNodeTypeName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SourceNodeTypeNameContext* GQLParser::sourceNodeTypeName() {
  SourceNodeTypeNameContext *_localctx = _tracker.createInstance<SourceNodeTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 762, GQLParser::RuleSourceNodeTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3086);
    elementTypeName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DestinationNodeTypeNameContext ------------------------------------------------------------------

GQLParser::DestinationNodeTypeNameContext::DestinationNodeTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementTypeNameContext* GQLParser::DestinationNodeTypeNameContext::elementTypeName() {
  return getRuleContext<GQLParser::ElementTypeNameContext>(0);
}


size_t GQLParser::DestinationNodeTypeNameContext::getRuleIndex() const {
  return GQLParser::RuleDestinationNodeTypeName;
}


std::any GQLParser::DestinationNodeTypeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDestinationNodeTypeName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DestinationNodeTypeNameContext* GQLParser::destinationNodeTypeName() {
  DestinationNodeTypeNameContext *_localctx = _tracker.createInstance<DestinationNodeTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 764, GQLParser::RuleDestinationNodeTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3088);
    elementTypeName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelSetDefinitionContext ------------------------------------------------------------------

GQLParser::LabelSetDefinitionContext::LabelSetDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::LabelSetDefinitionContext::LABEL() {
  return getToken(GQLParser::LABEL, 0);
}

GQLParser::LabelNameContext* GQLParser::LabelSetDefinitionContext::labelName() {
  return getRuleContext<GQLParser::LabelNameContext>(0);
}

tree::TerminalNode* GQLParser::LabelSetDefinitionContext::LABELS() {
  return getToken(GQLParser::LABELS, 0);
}

GQLParser::LabelSetSpecificationContext* GQLParser::LabelSetDefinitionContext::labelSetSpecification() {
  return getRuleContext<GQLParser::LabelSetSpecificationContext>(0);
}

GQLParser::IsOrColonContext* GQLParser::LabelSetDefinitionContext::isOrColon() {
  return getRuleContext<GQLParser::IsOrColonContext>(0);
}


size_t GQLParser::LabelSetDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleLabelSetDefinition;
}


std::any GQLParser::LabelSetDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLabelSetDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LabelSetDefinitionContext* GQLParser::labelSetDefinition() {
  LabelSetDefinitionContext *_localctx = _tracker.createInstance<LabelSetDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 766, GQLParser::RuleLabelSetDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3097);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LABEL: {
        enterOuterAlt(_localctx, 1);
        setState(3090);
        match(GQLParser::LABEL);
        setState(3091);
        labelName();
        break;
      }

      case GQLParser::LABELS: {
        enterOuterAlt(_localctx, 2);
        setState(3092);
        match(GQLParser::LABELS);
        setState(3093);
        labelSetSpecification();
        break;
      }

      case GQLParser::COLON:
      case GQLParser::IS: {
        enterOuterAlt(_localctx, 3);
        setState(3094);
        isOrColon();
        setState(3095);
        labelSetSpecification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyTypeSetDefinitionContext ------------------------------------------------------------------

GQLParser::PropertyTypeSetDefinitionContext::PropertyTypeSetDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::PropertyTypeSetDefinitionContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

tree::TerminalNode* GQLParser::PropertyTypeSetDefinitionContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}

GQLParser::PropertyTypeDefinitionListContext* GQLParser::PropertyTypeSetDefinitionContext::propertyTypeDefinitionList() {
  return getRuleContext<GQLParser::PropertyTypeDefinitionListContext>(0);
}


size_t GQLParser::PropertyTypeSetDefinitionContext::getRuleIndex() const {
  return GQLParser::RulePropertyTypeSetDefinition;
}


std::any GQLParser::PropertyTypeSetDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPropertyTypeSetDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PropertyTypeSetDefinitionContext* GQLParser::propertyTypeSetDefinition() {
  PropertyTypeSetDefinitionContext *_localctx = _tracker.createInstance<PropertyTypeSetDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 768, GQLParser::RulePropertyTypeSetDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3099);
    match(GQLParser::LEFT_BRACE);
    setState(3101);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 28) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 28)) & -1) != 0) || ((((_la - 92) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 92)) & -1) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 156)) & -1) != 0) || ((((_la - 220) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 220)) & -1) != 0) || ((((_la - 284) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 284)) & 1206964700135305215) != 0)) {
      setState(3100);
      propertyTypeDefinitionList();
    }
    setState(3103);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyTypeDefinitionListContext ------------------------------------------------------------------

GQLParser::PropertyTypeDefinitionListContext::PropertyTypeDefinitionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::PropertyTypeDefinitionContext *> GQLParser::PropertyTypeDefinitionListContext::propertyTypeDefinition() {
  return getRuleContexts<GQLParser::PropertyTypeDefinitionContext>();
}

GQLParser::PropertyTypeDefinitionContext* GQLParser::PropertyTypeDefinitionListContext::propertyTypeDefinition(size_t i) {
  return getRuleContext<GQLParser::PropertyTypeDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::PropertyTypeDefinitionListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::PropertyTypeDefinitionListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::PropertyTypeDefinitionListContext::getRuleIndex() const {
  return GQLParser::RulePropertyTypeDefinitionList;
}


std::any GQLParser::PropertyTypeDefinitionListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPropertyTypeDefinitionList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PropertyTypeDefinitionListContext* GQLParser::propertyTypeDefinitionList() {
  PropertyTypeDefinitionListContext *_localctx = _tracker.createInstance<PropertyTypeDefinitionListContext>(_ctx, getState());
  enterRule(_localctx, 770, GQLParser::RulePropertyTypeDefinitionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3105);
    propertyTypeDefinition();
    setState(3110);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(3106);
      match(GQLParser::COMMA);
      setState(3107);
      propertyTypeDefinition();
      setState(3112);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyTypeDefinitionContext ------------------------------------------------------------------

GQLParser::PropertyTypeDefinitionContext::PropertyTypeDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PropertyNameContext* GQLParser::PropertyTypeDefinitionContext::propertyName() {
  return getRuleContext<GQLParser::PropertyNameContext>(0);
}

GQLParser::PropertyValueTypeContext* GQLParser::PropertyTypeDefinitionContext::propertyValueType() {
  return getRuleContext<GQLParser::PropertyValueTypeContext>(0);
}

GQLParser::TypedContext* GQLParser::PropertyTypeDefinitionContext::typed() {
  return getRuleContext<GQLParser::TypedContext>(0);
}


size_t GQLParser::PropertyTypeDefinitionContext::getRuleIndex() const {
  return GQLParser::RulePropertyTypeDefinition;
}


std::any GQLParser::PropertyTypeDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPropertyTypeDefinition(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PropertyTypeDefinitionContext* GQLParser::propertyTypeDefinition() {
  PropertyTypeDefinitionContext *_localctx = _tracker.createInstance<PropertyTypeDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 772, GQLParser::RulePropertyTypeDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3113);
    propertyName();
    setState(3115);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::TYPED

    || _la == GQLParser::DOUBLE_COLON) {
      setState(3114);
      typed();
    }
    setState(3117);
    propertyValueType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyValueTypeContext ------------------------------------------------------------------

GQLParser::PropertyValueTypeContext::PropertyValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueTypeContext* GQLParser::PropertyValueTypeContext::valueType() {
  return getRuleContext<GQLParser::ValueTypeContext>(0);
}


size_t GQLParser::PropertyValueTypeContext::getRuleIndex() const {
  return GQLParser::RulePropertyValueType;
}


std::any GQLParser::PropertyValueTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPropertyValueType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PropertyValueTypeContext* GQLParser::propertyValueType() {
  PropertyValueTypeContext *_localctx = _tracker.createInstance<PropertyValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 774, GQLParser::RulePropertyValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3119);
    valueType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingTableTypeContext ------------------------------------------------------------------

GQLParser::BindingTableTypeContext::BindingTableTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::BindingTableTypeContext::TABLE() {
  return getToken(GQLParser::TABLE, 0);
}

GQLParser::FieldTypesSpecificationContext* GQLParser::BindingTableTypeContext::fieldTypesSpecification() {
  return getRuleContext<GQLParser::FieldTypesSpecificationContext>(0);
}

tree::TerminalNode* GQLParser::BindingTableTypeContext::BINDING() {
  return getToken(GQLParser::BINDING, 0);
}


size_t GQLParser::BindingTableTypeContext::getRuleIndex() const {
  return GQLParser::RuleBindingTableType;
}


std::any GQLParser::BindingTableTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBindingTableType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BindingTableTypeContext* GQLParser::bindingTableType() {
  BindingTableTypeContext *_localctx = _tracker.createInstance<BindingTableTypeContext>(_ctx, getState());
  enterRule(_localctx, 776, GQLParser::RuleBindingTableType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3122);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::BINDING) {
      setState(3121);
      match(GQLParser::BINDING);
    }
    setState(3124);
    match(GQLParser::TABLE);
    setState(3125);
    fieldTypesSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueTypeContext ------------------------------------------------------------------

GQLParser::ValueTypeContext::ValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::ValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleValueType;
}

void GQLParser::ValueTypeContext::copyFrom(ValueTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DynamicPropertyValueTypeContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::DynamicPropertyValueTypeContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

tree::TerminalNode* GQLParser::DynamicPropertyValueTypeContext::VALUE() {
  return getToken(GQLParser::VALUE, 0);
}

tree::TerminalNode* GQLParser::DynamicPropertyValueTypeContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

GQLParser::NotNullContext* GQLParser::DynamicPropertyValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

GQLParser::DynamicPropertyValueTypeContext::DynamicPropertyValueTypeContext(ValueTypeContext *ctx) { copyFrom(ctx); }


std::any GQLParser::DynamicPropertyValueTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDynamicPropertyValueType(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PredefTypeContext ------------------------------------------------------------------

GQLParser::PredefinedTypeContext* GQLParser::PredefTypeContext::predefinedType() {
  return getRuleContext<GQLParser::PredefinedTypeContext>(0);
}

GQLParser::PredefTypeContext::PredefTypeContext(ValueTypeContext *ctx) { copyFrom(ctx); }


std::any GQLParser::PredefTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPredefType(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ListType1Context ------------------------------------------------------------------

GQLParser::ListValueTypeNameContext* GQLParser::ListType1Context::listValueTypeName() {
  return getRuleContext<GQLParser::ListValueTypeNameContext>(0);
}

tree::TerminalNode* GQLParser::ListType1Context::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

GQLParser::ValueTypeContext* GQLParser::ListType1Context::valueType() {
  return getRuleContext<GQLParser::ValueTypeContext>(0);
}

tree::TerminalNode* GQLParser::ListType1Context::RIGHT_ANGLE_BRACKET() {
  return getToken(GQLParser::RIGHT_ANGLE_BRACKET, 0);
}

tree::TerminalNode* GQLParser::ListType1Context::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

GQLParser::MaxLengthContext* GQLParser::ListType1Context::maxLength() {
  return getRuleContext<GQLParser::MaxLengthContext>(0);
}

tree::TerminalNode* GQLParser::ListType1Context::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}

GQLParser::NotNullContext* GQLParser::ListType1Context::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

GQLParser::ListType1Context::ListType1Context(ValueTypeContext *ctx) { copyFrom(ctx); }


std::any GQLParser::ListType1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitListType1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RecordType1Context ------------------------------------------------------------------

tree::TerminalNode* GQLParser::RecordType1Context::RECORD() {
  return getToken(GQLParser::RECORD, 0);
}

tree::TerminalNode* GQLParser::RecordType1Context::ANY() {
  return getToken(GQLParser::ANY, 0);
}

GQLParser::NotNullContext* GQLParser::RecordType1Context::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

GQLParser::RecordType1Context::RecordType1Context(ValueTypeContext *ctx) { copyFrom(ctx); }


std::any GQLParser::RecordType1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitRecordType1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClosedDynamicUnionType2Context ------------------------------------------------------------------

std::vector<GQLParser::ValueTypeContext *> GQLParser::ClosedDynamicUnionType2Context::valueType() {
  return getRuleContexts<GQLParser::ValueTypeContext>();
}

GQLParser::ValueTypeContext* GQLParser::ClosedDynamicUnionType2Context::valueType(size_t i) {
  return getRuleContext<GQLParser::ValueTypeContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::ClosedDynamicUnionType2Context::VERTICAL_BAR() {
  return getTokens(GQLParser::VERTICAL_BAR);
}

tree::TerminalNode* GQLParser::ClosedDynamicUnionType2Context::VERTICAL_BAR(size_t i) {
  return getToken(GQLParser::VERTICAL_BAR, i);
}

GQLParser::ClosedDynamicUnionType2Context::ClosedDynamicUnionType2Context(ValueTypeContext *ctx) { copyFrom(ctx); }


std::any GQLParser::ClosedDynamicUnionType2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitClosedDynamicUnionType2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RecordType2Context ------------------------------------------------------------------

GQLParser::FieldTypesSpecificationContext* GQLParser::RecordType2Context::fieldTypesSpecification() {
  return getRuleContext<GQLParser::FieldTypesSpecificationContext>(0);
}

tree::TerminalNode* GQLParser::RecordType2Context::RECORD() {
  return getToken(GQLParser::RECORD, 0);
}

GQLParser::NotNullContext* GQLParser::RecordType2Context::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

GQLParser::RecordType2Context::RecordType2Context(ValueTypeContext *ctx) { copyFrom(ctx); }


std::any GQLParser::RecordType2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitRecordType2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ListType2Context ------------------------------------------------------------------

GQLParser::ValueTypeContext* GQLParser::ListType2Context::valueType() {
  return getRuleContext<GQLParser::ValueTypeContext>(0);
}

GQLParser::ListValueTypeNameContext* GQLParser::ListType2Context::listValueTypeName() {
  return getRuleContext<GQLParser::ListValueTypeNameContext>(0);
}

tree::TerminalNode* GQLParser::ListType2Context::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

GQLParser::MaxLengthContext* GQLParser::ListType2Context::maxLength() {
  return getRuleContext<GQLParser::MaxLengthContext>(0);
}

tree::TerminalNode* GQLParser::ListType2Context::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}

GQLParser::NotNullContext* GQLParser::ListType2Context::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

GQLParser::ListType2Context::ListType2Context(ValueTypeContext *ctx) { copyFrom(ctx); }


std::any GQLParser::ListType2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitListType2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PathTypeContext ------------------------------------------------------------------

GQLParser::PathValueTypeContext* GQLParser::PathTypeContext::pathValueType() {
  return getRuleContext<GQLParser::PathValueTypeContext>(0);
}

GQLParser::PathTypeContext::PathTypeContext(ValueTypeContext *ctx) { copyFrom(ctx); }


std::any GQLParser::PathTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathType(this);
  else
    return visitor->visitChildren(this);
}
//----------------- OpenDynamicUnionTypeContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::OpenDynamicUnionTypeContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

tree::TerminalNode* GQLParser::OpenDynamicUnionTypeContext::VALUE() {
  return getToken(GQLParser::VALUE, 0);
}

GQLParser::NotNullContext* GQLParser::OpenDynamicUnionTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

GQLParser::OpenDynamicUnionTypeContext::OpenDynamicUnionTypeContext(ValueTypeContext *ctx) { copyFrom(ctx); }


std::any GQLParser::OpenDynamicUnionTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOpenDynamicUnionType(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClosedDynamicUnionType1Context ------------------------------------------------------------------

tree::TerminalNode* GQLParser::ClosedDynamicUnionType1Context::ANY() {
  return getToken(GQLParser::ANY, 0);
}

tree::TerminalNode* GQLParser::ClosedDynamicUnionType1Context::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

std::vector<GQLParser::ValueTypeContext *> GQLParser::ClosedDynamicUnionType1Context::valueType() {
  return getRuleContexts<GQLParser::ValueTypeContext>();
}

GQLParser::ValueTypeContext* GQLParser::ClosedDynamicUnionType1Context::valueType(size_t i) {
  return getRuleContext<GQLParser::ValueTypeContext>(i);
}

tree::TerminalNode* GQLParser::ClosedDynamicUnionType1Context::RIGHT_ANGLE_BRACKET() {
  return getToken(GQLParser::RIGHT_ANGLE_BRACKET, 0);
}

tree::TerminalNode* GQLParser::ClosedDynamicUnionType1Context::VALUE() {
  return getToken(GQLParser::VALUE, 0);
}

std::vector<tree::TerminalNode *> GQLParser::ClosedDynamicUnionType1Context::VERTICAL_BAR() {
  return getTokens(GQLParser::VERTICAL_BAR);
}

tree::TerminalNode* GQLParser::ClosedDynamicUnionType1Context::VERTICAL_BAR(size_t i) {
  return getToken(GQLParser::VERTICAL_BAR, i);
}

GQLParser::ClosedDynamicUnionType1Context::ClosedDynamicUnionType1Context(ValueTypeContext *ctx) { copyFrom(ctx); }


std::any GQLParser::ClosedDynamicUnionType1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitClosedDynamicUnionType1(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ValueTypeContext* GQLParser::valueType() {
   return valueType(0);
}

GQLParser::ValueTypeContext* GQLParser::valueType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GQLParser::ValueTypeContext *_localctx = _tracker.createInstance<ValueTypeContext>(_ctx, parentState);
  GQLParser::ValueTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 778;
  enterRecursionRule(_localctx, 778, GQLParser::RuleValueType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3187);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<PredefTypeContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(3128);
      predefinedType();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PathTypeContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3129);
      pathValueType();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<ListType1Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3130);
      listValueTypeName();
      setState(3131);
      match(GQLParser::LEFT_ANGLE_BRACKET);
      setState(3132);
      valueType(0);
      setState(3133);
      match(GQLParser::RIGHT_ANGLE_BRACKET);
      setState(3138);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 290, _ctx)) {
      case 1: {
        setState(3134);
        match(GQLParser::LEFT_BRACKET);
        setState(3135);
        maxLength();
        setState(3136);
        match(GQLParser::RIGHT_BRACKET);
        break;
      }

      default:
        break;
      }
      setState(3141);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx)) {
      case 1: {
        setState(3140);
        notNull();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<RecordType1Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3144);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::ANY) {
        setState(3143);
        match(GQLParser::ANY);
      }
      setState(3146);
      match(GQLParser::RECORD);
      setState(3148);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx)) {
      case 1: {
        setState(3147);
        notNull();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<RecordType2Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3151);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::RECORD) {
        setState(3150);
        match(GQLParser::RECORD);
      }
      setState(3153);
      fieldTypesSpecification();
      setState(3155);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx)) {
      case 1: {
        setState(3154);
        notNull();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<OpenDynamicUnionTypeContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3157);
      match(GQLParser::ANY);
      setState(3159);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx)) {
      case 1: {
        setState(3158);
        match(GQLParser::VALUE);
        break;
      }

      default:
        break;
      }
      setState(3162);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 297, _ctx)) {
      case 1: {
        setState(3161);
        notNull();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<DynamicPropertyValueTypeContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3165);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::ANY) {
        setState(3164);
        match(GQLParser::ANY);
      }
      setState(3167);
      match(GQLParser::PROPERTY);
      setState(3168);
      match(GQLParser::VALUE);
      setState(3170);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 299, _ctx)) {
      case 1: {
        setState(3169);
        notNull();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<ClosedDynamicUnionType1Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3172);
      match(GQLParser::ANY);
      setState(3174);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::VALUE) {
        setState(3173);
        match(GQLParser::VALUE);
      }
      setState(3176);
      match(GQLParser::LEFT_ANGLE_BRACKET);
      setState(3177);
      valueType(0);
      setState(3182);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GQLParser::VERTICAL_BAR) {
        setState(3178);
        match(GQLParser::VERTICAL_BAR);
        setState(3179);
        valueType(0);
        setState(3184);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3185);
      match(GQLParser::RIGHT_ANGLE_BRACKET);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(3209);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3207);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ListType2Context>(_tracker.createInstance<ValueTypeContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueType);
          setState(3189);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(3190);
          listValueTypeName();
          setState(3195);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 303, _ctx)) {
          case 1: {
            setState(3191);
            match(GQLParser::LEFT_BRACKET);
            setState(3192);
            maxLength();
            setState(3193);
            match(GQLParser::RIGHT_BRACKET);
            break;
          }

          default:
            break;
          }
          setState(3198);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx)) {
          case 1: {
            setState(3197);
            notNull();
            break;
          }

          default:
            break;
          }
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<ClosedDynamicUnionType2Context>(_tracker.createInstance<ValueTypeContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueType);
          setState(3200);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(3203); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(3201);
                    match(GQLParser::VERTICAL_BAR);
                    setState(3202);
                    valueType(0);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(3205); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        default:
          break;
        } 
      }
      setState(3211);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TypedContext ------------------------------------------------------------------

GQLParser::TypedContext::TypedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TypedContext::DOUBLE_COLON() {
  return getToken(GQLParser::DOUBLE_COLON, 0);
}

tree::TerminalNode* GQLParser::TypedContext::TYPED() {
  return getToken(GQLParser::TYPED, 0);
}


size_t GQLParser::TypedContext::getRuleIndex() const {
  return GQLParser::RuleTyped;
}


std::any GQLParser::TypedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTyped(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TypedContext* GQLParser::typed() {
  TypedContext *_localctx = _tracker.createInstance<TypedContext>(_ctx, getState());
  enterRule(_localctx, 780, GQLParser::RuleTyped);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3212);
    _la = _input->LA(1);
    if (!(_la == GQLParser::TYPED

    || _la == GQLParser::DOUBLE_COLON)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredefinedTypeContext ------------------------------------------------------------------

GQLParser::PredefinedTypeContext::PredefinedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BooleanTypeContext* GQLParser::PredefinedTypeContext::booleanType() {
  return getRuleContext<GQLParser::BooleanTypeContext>(0);
}

GQLParser::CharacterStringTypeContext* GQLParser::PredefinedTypeContext::characterStringType() {
  return getRuleContext<GQLParser::CharacterStringTypeContext>(0);
}

GQLParser::ByteStringTypeContext* GQLParser::PredefinedTypeContext::byteStringType() {
  return getRuleContext<GQLParser::ByteStringTypeContext>(0);
}

GQLParser::NumericTypeContext* GQLParser::PredefinedTypeContext::numericType() {
  return getRuleContext<GQLParser::NumericTypeContext>(0);
}

GQLParser::TemporalTypeContext* GQLParser::PredefinedTypeContext::temporalType() {
  return getRuleContext<GQLParser::TemporalTypeContext>(0);
}

GQLParser::ReferenceValueTypeContext* GQLParser::PredefinedTypeContext::referenceValueType() {
  return getRuleContext<GQLParser::ReferenceValueTypeContext>(0);
}


size_t GQLParser::PredefinedTypeContext::getRuleIndex() const {
  return GQLParser::RulePredefinedType;
}


std::any GQLParser::PredefinedTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPredefinedType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PredefinedTypeContext* GQLParser::predefinedType() {
  PredefinedTypeContext *_localctx = _tracker.createInstance<PredefinedTypeContext>(_ctx, getState());
  enterRule(_localctx, 782, GQLParser::RulePredefinedType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3220);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::BOOL:
      case GQLParser::BOOLEAN: {
        enterOuterAlt(_localctx, 1);
        setState(3214);
        booleanType();
        break;
      }

      case GQLParser::STRING:
      case GQLParser::VARCHAR: {
        enterOuterAlt(_localctx, 2);
        setState(3215);
        characterStringType();
        break;
      }

      case GQLParser::BINARY:
      case GQLParser::BYTES:
      case GQLParser::VARBINARY: {
        enterOuterAlt(_localctx, 3);
        setState(3216);
        byteStringType();
        break;
      }

      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::DEC:
      case GQLParser::DECIMAL:
      case GQLParser::DOUBLE:
      case GQLParser::FLOAT:
      case GQLParser::FLOAT128:
      case GQLParser::FLOAT16:
      case GQLParser::FLOAT256:
      case GQLParser::FLOAT32:
      case GQLParser::FLOAT64:
      case GQLParser::INT:
      case GQLParser::INT8:
      case GQLParser::INT16:
      case GQLParser::INT32:
      case GQLParser::INT64:
      case GQLParser::INT128:
      case GQLParser::INT256:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::REAL:
      case GQLParser::SIGNED:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT128:
      case GQLParser::UINT16:
      case GQLParser::UINT256:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT8:
      case GQLParser::UNSIGNED:
      case GQLParser::USMALLINT: {
        enterOuterAlt(_localctx, 4);
        setState(3217);
        numericType();
        break;
      }

      case GQLParser::DATE:
      case GQLParser::DURATION:
      case GQLParser::LOCAL:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::ZONED: {
        enterOuterAlt(_localctx, 5);
        setState(3218);
        temporalType();
        break;
      }

      case GQLParser::LEFT_PAREN:
      case GQLParser::ANY:
      case GQLParser::BINDING:
      case GQLParser::DIRECTED:
      case GQLParser::GRAPH:
      case GQLParser::PROPERTY:
      case GQLParser::TABLE:
      case GQLParser::UNDIRECTED:
      case GQLParser::EDGE_SYNONYM:
      case GQLParser::NODE_SYNONYM: {
        enterOuterAlt(_localctx, 6);
        setState(3219);
        referenceValueType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanTypeContext ------------------------------------------------------------------

GQLParser::BooleanTypeContext::BooleanTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::BooleanTypeContext::BOOL() {
  return getToken(GQLParser::BOOL, 0);
}

tree::TerminalNode* GQLParser::BooleanTypeContext::BOOLEAN() {
  return getToken(GQLParser::BOOLEAN, 0);
}

GQLParser::NotNullContext* GQLParser::BooleanTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::BooleanTypeContext::getRuleIndex() const {
  return GQLParser::RuleBooleanType;
}


std::any GQLParser::BooleanTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBooleanType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BooleanTypeContext* GQLParser::booleanType() {
  BooleanTypeContext *_localctx = _tracker.createInstance<BooleanTypeContext>(_ctx, getState());
  enterRule(_localctx, 784, GQLParser::RuleBooleanType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3222);
    _la = _input->LA(1);
    if (!(_la == GQLParser::BOOL

    || _la == GQLParser::BOOLEAN)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3224);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 309, _ctx)) {
    case 1: {
      setState(3223);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharacterStringTypeContext ------------------------------------------------------------------

GQLParser::CharacterStringTypeContext::CharacterStringTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CharacterStringTypeContext::STRING() {
  return getToken(GQLParser::STRING, 0);
}

tree::TerminalNode* GQLParser::CharacterStringTypeContext::VARCHAR() {
  return getToken(GQLParser::VARCHAR, 0);
}

tree::TerminalNode* GQLParser::CharacterStringTypeContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::MaxLengthContext* GQLParser::CharacterStringTypeContext::maxLength() {
  return getRuleContext<GQLParser::MaxLengthContext>(0);
}

tree::TerminalNode* GQLParser::CharacterStringTypeContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::NotNullContext* GQLParser::CharacterStringTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::CharacterStringTypeContext::getRuleIndex() const {
  return GQLParser::RuleCharacterStringType;
}


std::any GQLParser::CharacterStringTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCharacterStringType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CharacterStringTypeContext* GQLParser::characterStringType() {
  CharacterStringTypeContext *_localctx = _tracker.createInstance<CharacterStringTypeContext>(_ctx, getState());
  enterRule(_localctx, 786, GQLParser::RuleCharacterStringType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3226);
    _la = _input->LA(1);
    if (!(_la == GQLParser::STRING

    || _la == GQLParser::VARCHAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3231);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx)) {
    case 1: {
      setState(3227);
      match(GQLParser::LEFT_PAREN);
      setState(3228);
      maxLength();
      setState(3229);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    default:
      break;
    }
    setState(3234);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx)) {
    case 1: {
      setState(3233);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ByteStringTypeContext ------------------------------------------------------------------

GQLParser::ByteStringTypeContext::ByteStringTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ByteStringTypeContext::BYTES() {
  return getToken(GQLParser::BYTES, 0);
}

tree::TerminalNode* GQLParser::ByteStringTypeContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::MaxLengthContext* GQLParser::ByteStringTypeContext::maxLength() {
  return getRuleContext<GQLParser::MaxLengthContext>(0);
}

tree::TerminalNode* GQLParser::ByteStringTypeContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::NotNullContext* GQLParser::ByteStringTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

GQLParser::MinLengthContext* GQLParser::ByteStringTypeContext::minLength() {
  return getRuleContext<GQLParser::MinLengthContext>(0);
}

tree::TerminalNode* GQLParser::ByteStringTypeContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

tree::TerminalNode* GQLParser::ByteStringTypeContext::BINARY() {
  return getToken(GQLParser::BINARY, 0);
}

GQLParser::FixedLengthContext* GQLParser::ByteStringTypeContext::fixedLength() {
  return getRuleContext<GQLParser::FixedLengthContext>(0);
}

tree::TerminalNode* GQLParser::ByteStringTypeContext::VARBINARY() {
  return getToken(GQLParser::VARBINARY, 0);
}


size_t GQLParser::ByteStringTypeContext::getRuleIndex() const {
  return GQLParser::RuleByteStringType;
}


std::any GQLParser::ByteStringTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitByteStringType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ByteStringTypeContext* GQLParser::byteStringType() {
  ByteStringTypeContext *_localctx = _tracker.createInstance<ByteStringTypeContext>(_ctx, getState());
  enterRule(_localctx, 788, GQLParser::RuleByteStringType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3271);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::BYTES: {
        enterOuterAlt(_localctx, 1);
        setState(3236);
        match(GQLParser::BYTES);
        setState(3246);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 313, _ctx)) {
        case 1: {
          setState(3237);
          match(GQLParser::LEFT_PAREN);
          setState(3241);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 312, _ctx)) {
          case 1: {
            setState(3238);
            minLength();
            setState(3239);
            match(GQLParser::COMMA);
            break;
          }

          default:
            break;
          }
          setState(3243);
          maxLength();
          setState(3244);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3249);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx)) {
        case 1: {
          setState(3248);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::BINARY: {
        enterOuterAlt(_localctx, 2);
        setState(3251);
        match(GQLParser::BINARY);
        setState(3256);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx)) {
        case 1: {
          setState(3252);
          match(GQLParser::LEFT_PAREN);
          setState(3253);
          fixedLength();
          setState(3254);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3259);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 316, _ctx)) {
        case 1: {
          setState(3258);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::VARBINARY: {
        enterOuterAlt(_localctx, 3);
        setState(3261);
        match(GQLParser::VARBINARY);
        setState(3266);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx)) {
        case 1: {
          setState(3262);
          match(GQLParser::LEFT_PAREN);
          setState(3263);
          maxLength();
          setState(3264);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3269);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx)) {
        case 1: {
          setState(3268);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MinLengthContext ------------------------------------------------------------------

GQLParser::MinLengthContext::MinLengthContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::MinLengthContext::UNSIGNED_DECIMAL_INTEGER() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_INTEGER, 0);
}


size_t GQLParser::MinLengthContext::getRuleIndex() const {
  return GQLParser::RuleMinLength;
}


std::any GQLParser::MinLengthContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitMinLength(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::MinLengthContext* GQLParser::minLength() {
  MinLengthContext *_localctx = _tracker.createInstance<MinLengthContext>(_ctx, getState());
  enterRule(_localctx, 790, GQLParser::RuleMinLength);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3273);
    match(GQLParser::UNSIGNED_DECIMAL_INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MaxLengthContext ------------------------------------------------------------------

GQLParser::MaxLengthContext::MaxLengthContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::MaxLengthContext::UNSIGNED_DECIMAL_INTEGER() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_INTEGER, 0);
}


size_t GQLParser::MaxLengthContext::getRuleIndex() const {
  return GQLParser::RuleMaxLength;
}


std::any GQLParser::MaxLengthContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitMaxLength(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::MaxLengthContext* GQLParser::maxLength() {
  MaxLengthContext *_localctx = _tracker.createInstance<MaxLengthContext>(_ctx, getState());
  enterRule(_localctx, 792, GQLParser::RuleMaxLength);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3275);
    match(GQLParser::UNSIGNED_DECIMAL_INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FixedLengthContext ------------------------------------------------------------------

GQLParser::FixedLengthContext::FixedLengthContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FixedLengthContext::UNSIGNED_DECIMAL_INTEGER() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_INTEGER, 0);
}


size_t GQLParser::FixedLengthContext::getRuleIndex() const {
  return GQLParser::RuleFixedLength;
}


std::any GQLParser::FixedLengthContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFixedLength(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FixedLengthContext* GQLParser::fixedLength() {
  FixedLengthContext *_localctx = _tracker.createInstance<FixedLengthContext>(_ctx, getState());
  enterRule(_localctx, 794, GQLParser::RuleFixedLength);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3277);
    match(GQLParser::UNSIGNED_DECIMAL_INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericTypeContext ------------------------------------------------------------------

GQLParser::NumericTypeContext::NumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ExactNumericTypeContext* GQLParser::NumericTypeContext::exactNumericType() {
  return getRuleContext<GQLParser::ExactNumericTypeContext>(0);
}

GQLParser::ApproximateNumericTypeContext* GQLParser::NumericTypeContext::approximateNumericType() {
  return getRuleContext<GQLParser::ApproximateNumericTypeContext>(0);
}


size_t GQLParser::NumericTypeContext::getRuleIndex() const {
  return GQLParser::RuleNumericType;
}


std::any GQLParser::NumericTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNumericType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NumericTypeContext* GQLParser::numericType() {
  NumericTypeContext *_localctx = _tracker.createInstance<NumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 796, GQLParser::RuleNumericType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3281);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::DEC:
      case GQLParser::DECIMAL:
      case GQLParser::INT:
      case GQLParser::INT8:
      case GQLParser::INT16:
      case GQLParser::INT32:
      case GQLParser::INT64:
      case GQLParser::INT128:
      case GQLParser::INT256:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::SIGNED:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT128:
      case GQLParser::UINT16:
      case GQLParser::UINT256:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT8:
      case GQLParser::UNSIGNED:
      case GQLParser::USMALLINT: {
        enterOuterAlt(_localctx, 1);
        setState(3279);
        exactNumericType();
        break;
      }

      case GQLParser::DOUBLE:
      case GQLParser::FLOAT:
      case GQLParser::FLOAT128:
      case GQLParser::FLOAT16:
      case GQLParser::FLOAT256:
      case GQLParser::FLOAT32:
      case GQLParser::FLOAT64:
      case GQLParser::REAL: {
        enterOuterAlt(_localctx, 2);
        setState(3280);
        approximateNumericType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExactNumericTypeContext ------------------------------------------------------------------

GQLParser::ExactNumericTypeContext::ExactNumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BinaryExactNumericTypeContext* GQLParser::ExactNumericTypeContext::binaryExactNumericType() {
  return getRuleContext<GQLParser::BinaryExactNumericTypeContext>(0);
}

GQLParser::DecimalExactNumericTypeContext* GQLParser::ExactNumericTypeContext::decimalExactNumericType() {
  return getRuleContext<GQLParser::DecimalExactNumericTypeContext>(0);
}


size_t GQLParser::ExactNumericTypeContext::getRuleIndex() const {
  return GQLParser::RuleExactNumericType;
}


std::any GQLParser::ExactNumericTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitExactNumericType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ExactNumericTypeContext* GQLParser::exactNumericType() {
  ExactNumericTypeContext *_localctx = _tracker.createInstance<ExactNumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 798, GQLParser::RuleExactNumericType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3285);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::INT:
      case GQLParser::INT8:
      case GQLParser::INT16:
      case GQLParser::INT32:
      case GQLParser::INT64:
      case GQLParser::INT128:
      case GQLParser::INT256:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::SIGNED:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT128:
      case GQLParser::UINT16:
      case GQLParser::UINT256:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT8:
      case GQLParser::UNSIGNED:
      case GQLParser::USMALLINT: {
        enterOuterAlt(_localctx, 1);
        setState(3283);
        binaryExactNumericType();
        break;
      }

      case GQLParser::DEC:
      case GQLParser::DECIMAL: {
        enterOuterAlt(_localctx, 2);
        setState(3284);
        decimalExactNumericType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BinaryExactNumericTypeContext ------------------------------------------------------------------

GQLParser::BinaryExactNumericTypeContext::BinaryExactNumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SignedBinaryExactNumericTypeContext* GQLParser::BinaryExactNumericTypeContext::signedBinaryExactNumericType() {
  return getRuleContext<GQLParser::SignedBinaryExactNumericTypeContext>(0);
}

GQLParser::UnsignedBinaryExactNumericTypeContext* GQLParser::BinaryExactNumericTypeContext::unsignedBinaryExactNumericType() {
  return getRuleContext<GQLParser::UnsignedBinaryExactNumericTypeContext>(0);
}


size_t GQLParser::BinaryExactNumericTypeContext::getRuleIndex() const {
  return GQLParser::RuleBinaryExactNumericType;
}


std::any GQLParser::BinaryExactNumericTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBinaryExactNumericType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BinaryExactNumericTypeContext* GQLParser::binaryExactNumericType() {
  BinaryExactNumericTypeContext *_localctx = _tracker.createInstance<BinaryExactNumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 800, GQLParser::RuleBinaryExactNumericType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3289);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::INT:
      case GQLParser::INT8:
      case GQLParser::INT16:
      case GQLParser::INT32:
      case GQLParser::INT64:
      case GQLParser::INT128:
      case GQLParser::INT256:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::SIGNED:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT: {
        enterOuterAlt(_localctx, 1);
        setState(3287);
        signedBinaryExactNumericType();
        break;
      }

      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT128:
      case GQLParser::UINT16:
      case GQLParser::UINT256:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT8:
      case GQLParser::UNSIGNED:
      case GQLParser::USMALLINT: {
        enterOuterAlt(_localctx, 2);
        setState(3288);
        unsignedBinaryExactNumericType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SignedBinaryExactNumericTypeContext ------------------------------------------------------------------

GQLParser::SignedBinaryExactNumericTypeContext::SignedBinaryExactNumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::INT8() {
  return getToken(GQLParser::INT8, 0);
}

GQLParser::NotNullContext* GQLParser::SignedBinaryExactNumericTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::INT16() {
  return getToken(GQLParser::INT16, 0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::INT32() {
  return getToken(GQLParser::INT32, 0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::INT64() {
  return getToken(GQLParser::INT64, 0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::INT128() {
  return getToken(GQLParser::INT128, 0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::INT256() {
  return getToken(GQLParser::INT256, 0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::SMALLINT() {
  return getToken(GQLParser::SMALLINT, 0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::INT() {
  return getToken(GQLParser::INT, 0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::PrecisionContext* GQLParser::SignedBinaryExactNumericTypeContext::precision() {
  return getRuleContext<GQLParser::PrecisionContext>(0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::BIGINT() {
  return getToken(GQLParser::BIGINT, 0);
}

GQLParser::VerboseBinaryExactNumericTypeContext* GQLParser::SignedBinaryExactNumericTypeContext::verboseBinaryExactNumericType() {
  return getRuleContext<GQLParser::VerboseBinaryExactNumericTypeContext>(0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::SIGNED() {
  return getToken(GQLParser::SIGNED, 0);
}


size_t GQLParser::SignedBinaryExactNumericTypeContext::getRuleIndex() const {
  return GQLParser::RuleSignedBinaryExactNumericType;
}


std::any GQLParser::SignedBinaryExactNumericTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSignedBinaryExactNumericType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SignedBinaryExactNumericTypeContext* GQLParser::signedBinaryExactNumericType() {
  SignedBinaryExactNumericTypeContext *_localctx = _tracker.createInstance<SignedBinaryExactNumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 802, GQLParser::RuleSignedBinaryExactNumericType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3337);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::INT8: {
        enterOuterAlt(_localctx, 1);
        setState(3291);
        match(GQLParser::INT8);
        setState(3293);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx)) {
        case 1: {
          setState(3292);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INT16: {
        enterOuterAlt(_localctx, 2);
        setState(3295);
        match(GQLParser::INT16);
        setState(3297);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx)) {
        case 1: {
          setState(3296);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INT32: {
        enterOuterAlt(_localctx, 3);
        setState(3299);
        match(GQLParser::INT32);
        setState(3301);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx)) {
        case 1: {
          setState(3300);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INT64: {
        enterOuterAlt(_localctx, 4);
        setState(3303);
        match(GQLParser::INT64);
        setState(3305);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx)) {
        case 1: {
          setState(3304);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INT128: {
        enterOuterAlt(_localctx, 5);
        setState(3307);
        match(GQLParser::INT128);
        setState(3309);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx)) {
        case 1: {
          setState(3308);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INT256: {
        enterOuterAlt(_localctx, 6);
        setState(3311);
        match(GQLParser::INT256);
        setState(3313);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx)) {
        case 1: {
          setState(3312);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::SMALLINT: {
        enterOuterAlt(_localctx, 7);
        setState(3315);
        match(GQLParser::SMALLINT);
        setState(3317);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 329, _ctx)) {
        case 1: {
          setState(3316);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INT: {
        enterOuterAlt(_localctx, 8);
        setState(3319);
        match(GQLParser::INT);
        setState(3324);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx)) {
        case 1: {
          setState(3320);
          match(GQLParser::LEFT_PAREN);
          setState(3321);
          precision();
          setState(3322);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3327);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx)) {
        case 1: {
          setState(3326);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::BIGINT: {
        enterOuterAlt(_localctx, 9);
        setState(3329);
        match(GQLParser::BIGINT);
        break;
      }

      case GQLParser::BIG:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::SIGNED:
      case GQLParser::SMALL: {
        enterOuterAlt(_localctx, 10);
        setState(3331);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::SIGNED) {
          setState(3330);
          match(GQLParser::SIGNED);
        }
        setState(3333);
        verboseBinaryExactNumericType();
        setState(3335);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx)) {
        case 1: {
          setState(3334);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnsignedBinaryExactNumericTypeContext ------------------------------------------------------------------

GQLParser::UnsignedBinaryExactNumericTypeContext::UnsignedBinaryExactNumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UINT8() {
  return getToken(GQLParser::UINT8, 0);
}

GQLParser::NotNullContext* GQLParser::UnsignedBinaryExactNumericTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UINT16() {
  return getToken(GQLParser::UINT16, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UINT32() {
  return getToken(GQLParser::UINT32, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UINT64() {
  return getToken(GQLParser::UINT64, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UINT128() {
  return getToken(GQLParser::UINT128, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UINT256() {
  return getToken(GQLParser::UINT256, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::USMALLINT() {
  return getToken(GQLParser::USMALLINT, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UINT() {
  return getToken(GQLParser::UINT, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::PrecisionContext* GQLParser::UnsignedBinaryExactNumericTypeContext::precision() {
  return getRuleContext<GQLParser::PrecisionContext>(0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UBIGINT() {
  return getToken(GQLParser::UBIGINT, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UNSIGNED() {
  return getToken(GQLParser::UNSIGNED, 0);
}

GQLParser::VerboseBinaryExactNumericTypeContext* GQLParser::UnsignedBinaryExactNumericTypeContext::verboseBinaryExactNumericType() {
  return getRuleContext<GQLParser::VerboseBinaryExactNumericTypeContext>(0);
}


size_t GQLParser::UnsignedBinaryExactNumericTypeContext::getRuleIndex() const {
  return GQLParser::RuleUnsignedBinaryExactNumericType;
}


std::any GQLParser::UnsignedBinaryExactNumericTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitUnsignedBinaryExactNumericType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::UnsignedBinaryExactNumericTypeContext* GQLParser::unsignedBinaryExactNumericType() {
  UnsignedBinaryExactNumericTypeContext *_localctx = _tracker.createInstance<UnsignedBinaryExactNumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 804, GQLParser::RuleUnsignedBinaryExactNumericType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3386);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::UINT8: {
        enterOuterAlt(_localctx, 1);
        setState(3339);
        match(GQLParser::UINT8);
        setState(3341);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx)) {
        case 1: {
          setState(3340);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::UINT16: {
        enterOuterAlt(_localctx, 2);
        setState(3343);
        match(GQLParser::UINT16);
        setState(3345);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx)) {
        case 1: {
          setState(3344);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::UINT32: {
        enterOuterAlt(_localctx, 3);
        setState(3347);
        match(GQLParser::UINT32);
        setState(3349);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 337, _ctx)) {
        case 1: {
          setState(3348);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::UINT64: {
        enterOuterAlt(_localctx, 4);
        setState(3351);
        match(GQLParser::UINT64);
        setState(3353);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx)) {
        case 1: {
          setState(3352);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::UINT128: {
        enterOuterAlt(_localctx, 5);
        setState(3355);
        match(GQLParser::UINT128);
        setState(3357);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx)) {
        case 1: {
          setState(3356);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::UINT256: {
        enterOuterAlt(_localctx, 6);
        setState(3359);
        match(GQLParser::UINT256);
        setState(3361);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 340, _ctx)) {
        case 1: {
          setState(3360);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::USMALLINT: {
        enterOuterAlt(_localctx, 7);
        setState(3363);
        match(GQLParser::USMALLINT);
        setState(3365);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx)) {
        case 1: {
          setState(3364);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::UINT: {
        enterOuterAlt(_localctx, 8);
        setState(3367);
        match(GQLParser::UINT);
        setState(3372);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx)) {
        case 1: {
          setState(3368);
          match(GQLParser::LEFT_PAREN);
          setState(3369);
          precision();
          setState(3370);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3375);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 343, _ctx)) {
        case 1: {
          setState(3374);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::UBIGINT: {
        enterOuterAlt(_localctx, 9);
        setState(3377);
        match(GQLParser::UBIGINT);
        setState(3379);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx)) {
        case 1: {
          setState(3378);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::UNSIGNED: {
        enterOuterAlt(_localctx, 10);
        setState(3381);
        match(GQLParser::UNSIGNED);
        setState(3382);
        verboseBinaryExactNumericType();
        setState(3384);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 345, _ctx)) {
        case 1: {
          setState(3383);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VerboseBinaryExactNumericTypeContext ------------------------------------------------------------------

GQLParser::VerboseBinaryExactNumericTypeContext::VerboseBinaryExactNumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::INTEGER8() {
  return getToken(GQLParser::INTEGER8, 0);
}

GQLParser::NotNullContext* GQLParser::VerboseBinaryExactNumericTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::INTEGER16() {
  return getToken(GQLParser::INTEGER16, 0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::INTEGER32() {
  return getToken(GQLParser::INTEGER32, 0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::INTEGER64() {
  return getToken(GQLParser::INTEGER64, 0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::INTEGER128() {
  return getToken(GQLParser::INTEGER128, 0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::INTEGER256() {
  return getToken(GQLParser::INTEGER256, 0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::SMALL() {
  return getToken(GQLParser::SMALL, 0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::INTEGER() {
  return getToken(GQLParser::INTEGER, 0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::PrecisionContext* GQLParser::VerboseBinaryExactNumericTypeContext::precision() {
  return getRuleContext<GQLParser::PrecisionContext>(0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::BIG() {
  return getToken(GQLParser::BIG, 0);
}


size_t GQLParser::VerboseBinaryExactNumericTypeContext::getRuleIndex() const {
  return GQLParser::RuleVerboseBinaryExactNumericType;
}


std::any GQLParser::VerboseBinaryExactNumericTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitVerboseBinaryExactNumericType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::VerboseBinaryExactNumericTypeContext* GQLParser::verboseBinaryExactNumericType() {
  VerboseBinaryExactNumericTypeContext *_localctx = _tracker.createInstance<VerboseBinaryExactNumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 806, GQLParser::RuleVerboseBinaryExactNumericType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3432);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::INTEGER8: {
        enterOuterAlt(_localctx, 1);
        setState(3388);
        match(GQLParser::INTEGER8);
        setState(3390);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 347, _ctx)) {
        case 1: {
          setState(3389);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INTEGER16: {
        enterOuterAlt(_localctx, 2);
        setState(3392);
        match(GQLParser::INTEGER16);
        setState(3394);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx)) {
        case 1: {
          setState(3393);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INTEGER32: {
        enterOuterAlt(_localctx, 3);
        setState(3396);
        match(GQLParser::INTEGER32);
        setState(3398);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 349, _ctx)) {
        case 1: {
          setState(3397);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INTEGER64: {
        enterOuterAlt(_localctx, 4);
        setState(3400);
        match(GQLParser::INTEGER64);
        setState(3402);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 350, _ctx)) {
        case 1: {
          setState(3401);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INTEGER128: {
        enterOuterAlt(_localctx, 5);
        setState(3404);
        match(GQLParser::INTEGER128);
        setState(3406);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 351, _ctx)) {
        case 1: {
          setState(3405);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INTEGER256: {
        enterOuterAlt(_localctx, 6);
        setState(3408);
        match(GQLParser::INTEGER256);
        setState(3410);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 352, _ctx)) {
        case 1: {
          setState(3409);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::SMALL: {
        enterOuterAlt(_localctx, 7);
        setState(3412);
        match(GQLParser::SMALL);
        setState(3413);
        match(GQLParser::INTEGER);
        setState(3415);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 353, _ctx)) {
        case 1: {
          setState(3414);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INTEGER: {
        enterOuterAlt(_localctx, 8);
        setState(3417);
        match(GQLParser::INTEGER);
        setState(3422);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 354, _ctx)) {
        case 1: {
          setState(3418);
          match(GQLParser::LEFT_PAREN);
          setState(3419);
          precision();
          setState(3420);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3425);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 355, _ctx)) {
        case 1: {
          setState(3424);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::BIG: {
        enterOuterAlt(_localctx, 9);
        setState(3427);
        match(GQLParser::BIG);
        setState(3428);
        match(GQLParser::INTEGER);
        setState(3430);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 356, _ctx)) {
        case 1: {
          setState(3429);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecimalExactNumericTypeContext ------------------------------------------------------------------

GQLParser::DecimalExactNumericTypeContext::DecimalExactNumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DecimalExactNumericTypeContext::DECIMAL() {
  return getToken(GQLParser::DECIMAL, 0);
}

tree::TerminalNode* GQLParser::DecimalExactNumericTypeContext::DEC() {
  return getToken(GQLParser::DEC, 0);
}

tree::TerminalNode* GQLParser::DecimalExactNumericTypeContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::PrecisionContext* GQLParser::DecimalExactNumericTypeContext::precision() {
  return getRuleContext<GQLParser::PrecisionContext>(0);
}

tree::TerminalNode* GQLParser::DecimalExactNumericTypeContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::DecimalExactNumericTypeContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::ScaleContext* GQLParser::DecimalExactNumericTypeContext::scale() {
  return getRuleContext<GQLParser::ScaleContext>(0);
}

GQLParser::NotNullContext* GQLParser::DecimalExactNumericTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::DecimalExactNumericTypeContext::getRuleIndex() const {
  return GQLParser::RuleDecimalExactNumericType;
}


std::any GQLParser::DecimalExactNumericTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDecimalExactNumericType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DecimalExactNumericTypeContext* GQLParser::decimalExactNumericType() {
  DecimalExactNumericTypeContext *_localctx = _tracker.createInstance<DecimalExactNumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 808, GQLParser::RuleDecimalExactNumericType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3434);
    _la = _input->LA(1);
    if (!(_la == GQLParser::DEC

    || _la == GQLParser::DECIMAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3445);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 360, _ctx)) {
    case 1: {
      setState(3435);
      match(GQLParser::LEFT_PAREN);
      setState(3436);
      precision();
      setState(3439);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::COMMA) {
        setState(3437);
        match(GQLParser::COMMA);
        setState(3438);
        scale();
      }
      setState(3441);
      match(GQLParser::RIGHT_PAREN);
      setState(3443);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx)) {
      case 1: {
        setState(3442);
        notNull();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrecisionContext ------------------------------------------------------------------

GQLParser::PrecisionContext::PrecisionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::PrecisionContext::UNSIGNED_DECIMAL_INTEGER() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_INTEGER, 0);
}


size_t GQLParser::PrecisionContext::getRuleIndex() const {
  return GQLParser::RulePrecision;
}


std::any GQLParser::PrecisionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPrecision(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PrecisionContext* GQLParser::precision() {
  PrecisionContext *_localctx = _tracker.createInstance<PrecisionContext>(_ctx, getState());
  enterRule(_localctx, 810, GQLParser::RulePrecision);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3447);
    match(GQLParser::UNSIGNED_DECIMAL_INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScaleContext ------------------------------------------------------------------

GQLParser::ScaleContext::ScaleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ScaleContext::UNSIGNED_DECIMAL_INTEGER() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_INTEGER, 0);
}


size_t GQLParser::ScaleContext::getRuleIndex() const {
  return GQLParser::RuleScale;
}


std::any GQLParser::ScaleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitScale(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ScaleContext* GQLParser::scale() {
  ScaleContext *_localctx = _tracker.createInstance<ScaleContext>(_ctx, getState());
  enterRule(_localctx, 812, GQLParser::RuleScale);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3449);
    match(GQLParser::UNSIGNED_DECIMAL_INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ApproximateNumericTypeContext ------------------------------------------------------------------

GQLParser::ApproximateNumericTypeContext::ApproximateNumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::FLOAT16() {
  return getToken(GQLParser::FLOAT16, 0);
}

GQLParser::NotNullContext* GQLParser::ApproximateNumericTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::FLOAT32() {
  return getToken(GQLParser::FLOAT32, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::FLOAT64() {
  return getToken(GQLParser::FLOAT64, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::FLOAT128() {
  return getToken(GQLParser::FLOAT128, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::FLOAT256() {
  return getToken(GQLParser::FLOAT256, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::FLOAT() {
  return getToken(GQLParser::FLOAT, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::PrecisionContext* GQLParser::ApproximateNumericTypeContext::precision() {
  return getRuleContext<GQLParser::PrecisionContext>(0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::ScaleContext* GQLParser::ApproximateNumericTypeContext::scale() {
  return getRuleContext<GQLParser::ScaleContext>(0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::REAL() {
  return getToken(GQLParser::REAL, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::DOUBLE() {
  return getToken(GQLParser::DOUBLE, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::PRECISION() {
  return getToken(GQLParser::PRECISION, 0);
}


size_t GQLParser::ApproximateNumericTypeContext::getRuleIndex() const {
  return GQLParser::RuleApproximateNumericType;
}


std::any GQLParser::ApproximateNumericTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitApproximateNumericType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ApproximateNumericTypeContext* GQLParser::approximateNumericType() {
  ApproximateNumericTypeContext *_localctx = _tracker.createInstance<ApproximateNumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 814, GQLParser::RuleApproximateNumericType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3496);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::FLOAT16: {
        enterOuterAlt(_localctx, 1);
        setState(3451);
        match(GQLParser::FLOAT16);
        setState(3453);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 361, _ctx)) {
        case 1: {
          setState(3452);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::FLOAT32: {
        enterOuterAlt(_localctx, 2);
        setState(3455);
        match(GQLParser::FLOAT32);
        setState(3457);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 362, _ctx)) {
        case 1: {
          setState(3456);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::FLOAT64: {
        enterOuterAlt(_localctx, 3);
        setState(3459);
        match(GQLParser::FLOAT64);
        setState(3461);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 363, _ctx)) {
        case 1: {
          setState(3460);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::FLOAT128: {
        enterOuterAlt(_localctx, 4);
        setState(3463);
        match(GQLParser::FLOAT128);
        setState(3465);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 364, _ctx)) {
        case 1: {
          setState(3464);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::FLOAT256: {
        enterOuterAlt(_localctx, 5);
        setState(3467);
        match(GQLParser::FLOAT256);
        setState(3469);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 365, _ctx)) {
        case 1: {
          setState(3468);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::FLOAT: {
        enterOuterAlt(_localctx, 6);
        setState(3471);
        match(GQLParser::FLOAT);
        setState(3480);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 367, _ctx)) {
        case 1: {
          setState(3472);
          match(GQLParser::LEFT_PAREN);
          setState(3473);
          precision();
          setState(3476);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == GQLParser::COMMA) {
            setState(3474);
            match(GQLParser::COMMA);
            setState(3475);
            scale();
          }
          setState(3478);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3483);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx)) {
        case 1: {
          setState(3482);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::REAL: {
        enterOuterAlt(_localctx, 7);
        setState(3485);
        match(GQLParser::REAL);
        setState(3487);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 369, _ctx)) {
        case 1: {
          setState(3486);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::DOUBLE: {
        enterOuterAlt(_localctx, 8);
        setState(3489);
        match(GQLParser::DOUBLE);
        setState(3491);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx)) {
        case 1: {
          setState(3490);
          match(GQLParser::PRECISION);
          break;
        }

        default:
          break;
        }
        setState(3494);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 371, _ctx)) {
        case 1: {
          setState(3493);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemporalTypeContext ------------------------------------------------------------------

GQLParser::TemporalTypeContext::TemporalTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::TemporalInstantTypeContext* GQLParser::TemporalTypeContext::temporalInstantType() {
  return getRuleContext<GQLParser::TemporalInstantTypeContext>(0);
}

GQLParser::TemporalDurationTypeContext* GQLParser::TemporalTypeContext::temporalDurationType() {
  return getRuleContext<GQLParser::TemporalDurationTypeContext>(0);
}


size_t GQLParser::TemporalTypeContext::getRuleIndex() const {
  return GQLParser::RuleTemporalType;
}


std::any GQLParser::TemporalTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTemporalType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TemporalTypeContext* GQLParser::temporalType() {
  TemporalTypeContext *_localctx = _tracker.createInstance<TemporalTypeContext>(_ctx, getState());
  enterRule(_localctx, 816, GQLParser::RuleTemporalType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3500);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DATE:
      case GQLParser::LOCAL:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::ZONED: {
        enterOuterAlt(_localctx, 1);
        setState(3498);
        temporalInstantType();
        break;
      }

      case GQLParser::DURATION: {
        enterOuterAlt(_localctx, 2);
        setState(3499);
        temporalDurationType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemporalInstantTypeContext ------------------------------------------------------------------

GQLParser::TemporalInstantTypeContext::TemporalInstantTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DatetimeTypeContext* GQLParser::TemporalInstantTypeContext::datetimeType() {
  return getRuleContext<GQLParser::DatetimeTypeContext>(0);
}

GQLParser::LocaldatetimeTypeContext* GQLParser::TemporalInstantTypeContext::localdatetimeType() {
  return getRuleContext<GQLParser::LocaldatetimeTypeContext>(0);
}

GQLParser::DateTypeContext* GQLParser::TemporalInstantTypeContext::dateType() {
  return getRuleContext<GQLParser::DateTypeContext>(0);
}

GQLParser::TimeTypeContext* GQLParser::TemporalInstantTypeContext::timeType() {
  return getRuleContext<GQLParser::TimeTypeContext>(0);
}

GQLParser::LocaltimeTypeContext* GQLParser::TemporalInstantTypeContext::localtimeType() {
  return getRuleContext<GQLParser::LocaltimeTypeContext>(0);
}


size_t GQLParser::TemporalInstantTypeContext::getRuleIndex() const {
  return GQLParser::RuleTemporalInstantType;
}


std::any GQLParser::TemporalInstantTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTemporalInstantType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TemporalInstantTypeContext* GQLParser::temporalInstantType() {
  TemporalInstantTypeContext *_localctx = _tracker.createInstance<TemporalInstantTypeContext>(_ctx, getState());
  enterRule(_localctx, 818, GQLParser::RuleTemporalInstantType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3507);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 374, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3502);
      datetimeType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3503);
      localdatetimeType();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3504);
      dateType();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3505);
      timeType();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3506);
      localtimeType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemporalDurationTypeContext ------------------------------------------------------------------

GQLParser::TemporalDurationTypeContext::TemporalDurationTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DurationTypeContext* GQLParser::TemporalDurationTypeContext::durationType() {
  return getRuleContext<GQLParser::DurationTypeContext>(0);
}


size_t GQLParser::TemporalDurationTypeContext::getRuleIndex() const {
  return GQLParser::RuleTemporalDurationType;
}


std::any GQLParser::TemporalDurationTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTemporalDurationType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TemporalDurationTypeContext* GQLParser::temporalDurationType() {
  TemporalDurationTypeContext *_localctx = _tracker.createInstance<TemporalDurationTypeContext>(_ctx, getState());
  enterRule(_localctx, 820, GQLParser::RuleTemporalDurationType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3509);
    durationType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeTypeContext ------------------------------------------------------------------

GQLParser::DatetimeTypeContext::DatetimeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DatetimeTypeContext::ZONED() {
  return getToken(GQLParser::ZONED, 0);
}

tree::TerminalNode* GQLParser::DatetimeTypeContext::DATETIME() {
  return getToken(GQLParser::DATETIME, 0);
}

GQLParser::NotNullContext* GQLParser::DatetimeTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::DatetimeTypeContext::TIMESTAMP() {
  return getToken(GQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* GQLParser::DatetimeTypeContext::WITH() {
  return getToken(GQLParser::WITH, 0);
}

tree::TerminalNode* GQLParser::DatetimeTypeContext::TIMEZONE() {
  return getToken(GQLParser::TIMEZONE, 0);
}


size_t GQLParser::DatetimeTypeContext::getRuleIndex() const {
  return GQLParser::RuleDatetimeType;
}


std::any GQLParser::DatetimeTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDatetimeType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DatetimeTypeContext* GQLParser::datetimeType() {
  DatetimeTypeContext *_localctx = _tracker.createInstance<DatetimeTypeContext>(_ctx, getState());
  enterRule(_localctx, 822, GQLParser::RuleDatetimeType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3522);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ZONED: {
        enterOuterAlt(_localctx, 1);
        setState(3511);
        match(GQLParser::ZONED);
        setState(3512);
        match(GQLParser::DATETIME);
        setState(3514);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 375, _ctx)) {
        case 1: {
          setState(3513);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::TIMESTAMP: {
        enterOuterAlt(_localctx, 2);
        setState(3516);
        match(GQLParser::TIMESTAMP);
        setState(3517);
        match(GQLParser::WITH);
        setState(3518);
        match(GQLParser::TIMEZONE);
        setState(3520);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 376, _ctx)) {
        case 1: {
          setState(3519);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocaldatetimeTypeContext ------------------------------------------------------------------

GQLParser::LocaldatetimeTypeContext::LocaldatetimeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::LocaldatetimeTypeContext::LOCAL() {
  return getToken(GQLParser::LOCAL, 0);
}

tree::TerminalNode* GQLParser::LocaldatetimeTypeContext::DATETIME() {
  return getToken(GQLParser::DATETIME, 0);
}

GQLParser::NotNullContext* GQLParser::LocaldatetimeTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::LocaldatetimeTypeContext::TIMESTAMP() {
  return getToken(GQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* GQLParser::LocaldatetimeTypeContext::WITHOUT() {
  return getToken(GQLParser::WITHOUT, 0);
}

tree::TerminalNode* GQLParser::LocaldatetimeTypeContext::TIMEZONE() {
  return getToken(GQLParser::TIMEZONE, 0);
}


size_t GQLParser::LocaldatetimeTypeContext::getRuleIndex() const {
  return GQLParser::RuleLocaldatetimeType;
}


std::any GQLParser::LocaldatetimeTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLocaldatetimeType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LocaldatetimeTypeContext* GQLParser::localdatetimeType() {
  LocaldatetimeTypeContext *_localctx = _tracker.createInstance<LocaldatetimeTypeContext>(_ctx, getState());
  enterRule(_localctx, 824, GQLParser::RuleLocaldatetimeType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3537);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LOCAL: {
        enterOuterAlt(_localctx, 1);
        setState(3524);
        match(GQLParser::LOCAL);
        setState(3525);
        match(GQLParser::DATETIME);
        setState(3527);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 378, _ctx)) {
        case 1: {
          setState(3526);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::TIMESTAMP: {
        enterOuterAlt(_localctx, 2);
        setState(3529);
        match(GQLParser::TIMESTAMP);
        setState(3532);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 379, _ctx)) {
        case 1: {
          setState(3530);
          match(GQLParser::WITHOUT);
          setState(3531);
          match(GQLParser::TIMEZONE);
          break;
        }

        default:
          break;
        }
        setState(3535);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 380, _ctx)) {
        case 1: {
          setState(3534);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DateTypeContext ------------------------------------------------------------------

GQLParser::DateTypeContext::DateTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DateTypeContext::DATE() {
  return getToken(GQLParser::DATE, 0);
}

GQLParser::NotNullContext* GQLParser::DateTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::DateTypeContext::getRuleIndex() const {
  return GQLParser::RuleDateType;
}


std::any GQLParser::DateTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDateType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DateTypeContext* GQLParser::dateType() {
  DateTypeContext *_localctx = _tracker.createInstance<DateTypeContext>(_ctx, getState());
  enterRule(_localctx, 826, GQLParser::RuleDateType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3539);
    match(GQLParser::DATE);
    setState(3541);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 382, _ctx)) {
    case 1: {
      setState(3540);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimeTypeContext ------------------------------------------------------------------

GQLParser::TimeTypeContext::TimeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TimeTypeContext::ZONED() {
  return getToken(GQLParser::ZONED, 0);
}

tree::TerminalNode* GQLParser::TimeTypeContext::TIME() {
  return getToken(GQLParser::TIME, 0);
}

GQLParser::NotNullContext* GQLParser::TimeTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::TimeTypeContext::WITH() {
  return getToken(GQLParser::WITH, 0);
}

tree::TerminalNode* GQLParser::TimeTypeContext::TIMEZONE() {
  return getToken(GQLParser::TIMEZONE, 0);
}


size_t GQLParser::TimeTypeContext::getRuleIndex() const {
  return GQLParser::RuleTimeType;
}


std::any GQLParser::TimeTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTimeType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TimeTypeContext* GQLParser::timeType() {
  TimeTypeContext *_localctx = _tracker.createInstance<TimeTypeContext>(_ctx, getState());
  enterRule(_localctx, 828, GQLParser::RuleTimeType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3554);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ZONED: {
        enterOuterAlt(_localctx, 1);
        setState(3543);
        match(GQLParser::ZONED);
        setState(3544);
        match(GQLParser::TIME);
        setState(3546);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 383, _ctx)) {
        case 1: {
          setState(3545);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::TIME: {
        enterOuterAlt(_localctx, 2);
        setState(3548);
        match(GQLParser::TIME);
        setState(3549);
        match(GQLParser::WITH);
        setState(3550);
        match(GQLParser::TIMEZONE);
        setState(3552);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 384, _ctx)) {
        case 1: {
          setState(3551);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocaltimeTypeContext ------------------------------------------------------------------

GQLParser::LocaltimeTypeContext::LocaltimeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::LocaltimeTypeContext::LOCAL() {
  return getToken(GQLParser::LOCAL, 0);
}

tree::TerminalNode* GQLParser::LocaltimeTypeContext::TIME() {
  return getToken(GQLParser::TIME, 0);
}

GQLParser::NotNullContext* GQLParser::LocaltimeTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::LocaltimeTypeContext::WITHOUT() {
  return getToken(GQLParser::WITHOUT, 0);
}

tree::TerminalNode* GQLParser::LocaltimeTypeContext::TIMEZONE() {
  return getToken(GQLParser::TIMEZONE, 0);
}


size_t GQLParser::LocaltimeTypeContext::getRuleIndex() const {
  return GQLParser::RuleLocaltimeType;
}


std::any GQLParser::LocaltimeTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLocaltimeType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LocaltimeTypeContext* GQLParser::localtimeType() {
  LocaltimeTypeContext *_localctx = _tracker.createInstance<LocaltimeTypeContext>(_ctx, getState());
  enterRule(_localctx, 830, GQLParser::RuleLocaltimeType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3567);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LOCAL: {
        enterOuterAlt(_localctx, 1);
        setState(3556);
        match(GQLParser::LOCAL);
        setState(3557);
        match(GQLParser::TIME);
        setState(3559);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 386, _ctx)) {
        case 1: {
          setState(3558);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::TIME: {
        enterOuterAlt(_localctx, 2);
        setState(3561);
        match(GQLParser::TIME);
        setState(3562);
        match(GQLParser::WITHOUT);
        setState(3563);
        match(GQLParser::TIMEZONE);
        setState(3565);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 387, _ctx)) {
        case 1: {
          setState(3564);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DurationTypeContext ------------------------------------------------------------------

GQLParser::DurationTypeContext::DurationTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DurationTypeContext::DURATION() {
  return getToken(GQLParser::DURATION, 0);
}

GQLParser::NotNullContext* GQLParser::DurationTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::DurationTypeContext::getRuleIndex() const {
  return GQLParser::RuleDurationType;
}


std::any GQLParser::DurationTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDurationType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DurationTypeContext* GQLParser::durationType() {
  DurationTypeContext *_localctx = _tracker.createInstance<DurationTypeContext>(_ctx, getState());
  enterRule(_localctx, 832, GQLParser::RuleDurationType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3569);
    match(GQLParser::DURATION);
    setState(3571);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 389, _ctx)) {
    case 1: {
      setState(3570);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::ReferenceValueTypeContext::ReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphReferenceValueTypeContext* GQLParser::ReferenceValueTypeContext::graphReferenceValueType() {
  return getRuleContext<GQLParser::GraphReferenceValueTypeContext>(0);
}

GQLParser::BindingTableReferenceValueTypeContext* GQLParser::ReferenceValueTypeContext::bindingTableReferenceValueType() {
  return getRuleContext<GQLParser::BindingTableReferenceValueTypeContext>(0);
}

GQLParser::NodeReferenceValueTypeContext* GQLParser::ReferenceValueTypeContext::nodeReferenceValueType() {
  return getRuleContext<GQLParser::NodeReferenceValueTypeContext>(0);
}

GQLParser::EdgeReferenceValueTypeContext* GQLParser::ReferenceValueTypeContext::edgeReferenceValueType() {
  return getRuleContext<GQLParser::EdgeReferenceValueTypeContext>(0);
}


size_t GQLParser::ReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleReferenceValueType;
}


std::any GQLParser::ReferenceValueTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitReferenceValueType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ReferenceValueTypeContext* GQLParser::referenceValueType() {
  ReferenceValueTypeContext *_localctx = _tracker.createInstance<ReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 834, GQLParser::RuleReferenceValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3577);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 390, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3573);
      graphReferenceValueType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3574);
      bindingTableReferenceValueType();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3575);
      nodeReferenceValueType();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3576);
      edgeReferenceValueType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::GraphReferenceValueTypeContext::GraphReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::OpenGraphReferenceValueTypeContext* GQLParser::GraphReferenceValueTypeContext::openGraphReferenceValueType() {
  return getRuleContext<GQLParser::OpenGraphReferenceValueTypeContext>(0);
}

GQLParser::ClosedGraphReferenceValueTypeContext* GQLParser::GraphReferenceValueTypeContext::closedGraphReferenceValueType() {
  return getRuleContext<GQLParser::ClosedGraphReferenceValueTypeContext>(0);
}


size_t GQLParser::GraphReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleGraphReferenceValueType;
}


std::any GQLParser::GraphReferenceValueTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphReferenceValueType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphReferenceValueTypeContext* GQLParser::graphReferenceValueType() {
  GraphReferenceValueTypeContext *_localctx = _tracker.createInstance<GraphReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 836, GQLParser::RuleGraphReferenceValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3581);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ANY: {
        enterOuterAlt(_localctx, 1);
        setState(3579);
        openGraphReferenceValueType();
        break;
      }

      case GQLParser::GRAPH:
      case GQLParser::PROPERTY: {
        enterOuterAlt(_localctx, 2);
        setState(3580);
        closedGraphReferenceValueType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClosedGraphReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::ClosedGraphReferenceValueTypeContext::ClosedGraphReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ClosedGraphReferenceValueTypeContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

GQLParser::NestedGraphTypeSpecificationContext* GQLParser::ClosedGraphReferenceValueTypeContext::nestedGraphTypeSpecification() {
  return getRuleContext<GQLParser::NestedGraphTypeSpecificationContext>(0);
}

tree::TerminalNode* GQLParser::ClosedGraphReferenceValueTypeContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

GQLParser::NotNullContext* GQLParser::ClosedGraphReferenceValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::ClosedGraphReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleClosedGraphReferenceValueType;
}


std::any GQLParser::ClosedGraphReferenceValueTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitClosedGraphReferenceValueType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ClosedGraphReferenceValueTypeContext* GQLParser::closedGraphReferenceValueType() {
  ClosedGraphReferenceValueTypeContext *_localctx = _tracker.createInstance<ClosedGraphReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 838, GQLParser::RuleClosedGraphReferenceValueType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3584);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::PROPERTY) {
      setState(3583);
      match(GQLParser::PROPERTY);
    }
    setState(3586);
    match(GQLParser::GRAPH);
    setState(3587);
    nestedGraphTypeSpecification();
    setState(3589);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 393, _ctx)) {
    case 1: {
      setState(3588);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenGraphReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::OpenGraphReferenceValueTypeContext::OpenGraphReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::OpenGraphReferenceValueTypeContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

tree::TerminalNode* GQLParser::OpenGraphReferenceValueTypeContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

tree::TerminalNode* GQLParser::OpenGraphReferenceValueTypeContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

GQLParser::NotNullContext* GQLParser::OpenGraphReferenceValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::OpenGraphReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleOpenGraphReferenceValueType;
}


std::any GQLParser::OpenGraphReferenceValueTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOpenGraphReferenceValueType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::OpenGraphReferenceValueTypeContext* GQLParser::openGraphReferenceValueType() {
  OpenGraphReferenceValueTypeContext *_localctx = _tracker.createInstance<OpenGraphReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 840, GQLParser::RuleOpenGraphReferenceValueType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3591);
    match(GQLParser::ANY);
    setState(3593);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::PROPERTY) {
      setState(3592);
      match(GQLParser::PROPERTY);
    }
    setState(3595);
    match(GQLParser::GRAPH);
    setState(3597);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 395, _ctx)) {
    case 1: {
      setState(3596);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingTableReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::BindingTableReferenceValueTypeContext::BindingTableReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingTableTypeContext* GQLParser::BindingTableReferenceValueTypeContext::bindingTableType() {
  return getRuleContext<GQLParser::BindingTableTypeContext>(0);
}

GQLParser::NotNullContext* GQLParser::BindingTableReferenceValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::BindingTableReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleBindingTableReferenceValueType;
}


std::any GQLParser::BindingTableReferenceValueTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBindingTableReferenceValueType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BindingTableReferenceValueTypeContext* GQLParser::bindingTableReferenceValueType() {
  BindingTableReferenceValueTypeContext *_localctx = _tracker.createInstance<BindingTableReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 842, GQLParser::RuleBindingTableReferenceValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3599);
    bindingTableType();
    setState(3601);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 396, _ctx)) {
    case 1: {
      setState(3600);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::NodeReferenceValueTypeContext::NodeReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::OpenNodeReferenceValueTypeContext* GQLParser::NodeReferenceValueTypeContext::openNodeReferenceValueType() {
  return getRuleContext<GQLParser::OpenNodeReferenceValueTypeContext>(0);
}

GQLParser::ClosedNodeReferenceValueTypeContext* GQLParser::NodeReferenceValueTypeContext::closedNodeReferenceValueType() {
  return getRuleContext<GQLParser::ClosedNodeReferenceValueTypeContext>(0);
}


size_t GQLParser::NodeReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleNodeReferenceValueType;
}


std::any GQLParser::NodeReferenceValueTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNodeReferenceValueType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NodeReferenceValueTypeContext* GQLParser::nodeReferenceValueType() {
  NodeReferenceValueTypeContext *_localctx = _tracker.createInstance<NodeReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 844, GQLParser::RuleNodeReferenceValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3605);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 397, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3603);
      openNodeReferenceValueType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3604);
      closedNodeReferenceValueType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClosedNodeReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::ClosedNodeReferenceValueTypeContext::ClosedNodeReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodeTypeDefinitionContext* GQLParser::ClosedNodeReferenceValueTypeContext::nodeTypeDefinition() {
  return getRuleContext<GQLParser::NodeTypeDefinitionContext>(0);
}

GQLParser::NotNullContext* GQLParser::ClosedNodeReferenceValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::ClosedNodeReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleClosedNodeReferenceValueType;
}


std::any GQLParser::ClosedNodeReferenceValueTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitClosedNodeReferenceValueType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ClosedNodeReferenceValueTypeContext* GQLParser::closedNodeReferenceValueType() {
  ClosedNodeReferenceValueTypeContext *_localctx = _tracker.createInstance<ClosedNodeReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 846, GQLParser::RuleClosedNodeReferenceValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3607);
    nodeTypeDefinition();
    setState(3609);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 398, _ctx)) {
    case 1: {
      setState(3608);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenNodeReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::OpenNodeReferenceValueTypeContext::OpenNodeReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::OpenNodeReferenceValueTypeContext::NODE_SYNONYM() {
  return getToken(GQLParser::NODE_SYNONYM, 0);
}

tree::TerminalNode* GQLParser::OpenNodeReferenceValueTypeContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

GQLParser::NotNullContext* GQLParser::OpenNodeReferenceValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::OpenNodeReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleOpenNodeReferenceValueType;
}


std::any GQLParser::OpenNodeReferenceValueTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOpenNodeReferenceValueType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::OpenNodeReferenceValueTypeContext* GQLParser::openNodeReferenceValueType() {
  OpenNodeReferenceValueTypeContext *_localctx = _tracker.createInstance<OpenNodeReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 848, GQLParser::RuleOpenNodeReferenceValueType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3612);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ANY) {
      setState(3611);
      match(GQLParser::ANY);
    }
    setState(3614);
    match(GQLParser::NODE_SYNONYM);
    setState(3616);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 400, _ctx)) {
    case 1: {
      setState(3615);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::EdgeReferenceValueTypeContext::EdgeReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::OpenEdgeReferenceValueTypeContext* GQLParser::EdgeReferenceValueTypeContext::openEdgeReferenceValueType() {
  return getRuleContext<GQLParser::OpenEdgeReferenceValueTypeContext>(0);
}

GQLParser::ClosedEdgeReferenceValueTypeContext* GQLParser::EdgeReferenceValueTypeContext::closedEdgeReferenceValueType() {
  return getRuleContext<GQLParser::ClosedEdgeReferenceValueTypeContext>(0);
}


size_t GQLParser::EdgeReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleEdgeReferenceValueType;
}


std::any GQLParser::EdgeReferenceValueTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitEdgeReferenceValueType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::EdgeReferenceValueTypeContext* GQLParser::edgeReferenceValueType() {
  EdgeReferenceValueTypeContext *_localctx = _tracker.createInstance<EdgeReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 850, GQLParser::RuleEdgeReferenceValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3620);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 401, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3618);
      openEdgeReferenceValueType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3619);
      closedEdgeReferenceValueType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClosedEdgeReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::ClosedEdgeReferenceValueTypeContext::ClosedEdgeReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EdgeTypeDefinitionContext* GQLParser::ClosedEdgeReferenceValueTypeContext::edgeTypeDefinition() {
  return getRuleContext<GQLParser::EdgeTypeDefinitionContext>(0);
}

GQLParser::NotNullContext* GQLParser::ClosedEdgeReferenceValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::ClosedEdgeReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleClosedEdgeReferenceValueType;
}


std::any GQLParser::ClosedEdgeReferenceValueTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitClosedEdgeReferenceValueType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ClosedEdgeReferenceValueTypeContext* GQLParser::closedEdgeReferenceValueType() {
  ClosedEdgeReferenceValueTypeContext *_localctx = _tracker.createInstance<ClosedEdgeReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 852, GQLParser::RuleClosedEdgeReferenceValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3622);
    edgeTypeDefinition();
    setState(3624);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 402, _ctx)) {
    case 1: {
      setState(3623);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenEdgeReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::OpenEdgeReferenceValueTypeContext::OpenEdgeReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::OpenEdgeReferenceValueTypeContext::EDGE_SYNONYM() {
  return getToken(GQLParser::EDGE_SYNONYM, 0);
}

tree::TerminalNode* GQLParser::OpenEdgeReferenceValueTypeContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

GQLParser::NotNullContext* GQLParser::OpenEdgeReferenceValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::OpenEdgeReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleOpenEdgeReferenceValueType;
}


std::any GQLParser::OpenEdgeReferenceValueTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOpenEdgeReferenceValueType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::OpenEdgeReferenceValueTypeContext* GQLParser::openEdgeReferenceValueType() {
  OpenEdgeReferenceValueTypeContext *_localctx = _tracker.createInstance<OpenEdgeReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 854, GQLParser::RuleOpenEdgeReferenceValueType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3627);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ANY) {
      setState(3626);
      match(GQLParser::ANY);
    }
    setState(3629);
    match(GQLParser::EDGE_SYNONYM);
    setState(3631);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 404, _ctx)) {
    case 1: {
      setState(3630);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListValueTypeNameContext ------------------------------------------------------------------

GQLParser::ListValueTypeNameContext::ListValueTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ListValueTypeNameSynonymContext* GQLParser::ListValueTypeNameContext::listValueTypeNameSynonym() {
  return getRuleContext<GQLParser::ListValueTypeNameSynonymContext>(0);
}

tree::TerminalNode* GQLParser::ListValueTypeNameContext::GROUP() {
  return getToken(GQLParser::GROUP, 0);
}


size_t GQLParser::ListValueTypeNameContext::getRuleIndex() const {
  return GQLParser::RuleListValueTypeName;
}


std::any GQLParser::ListValueTypeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitListValueTypeName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ListValueTypeNameContext* GQLParser::listValueTypeName() {
  ListValueTypeNameContext *_localctx = _tracker.createInstance<ListValueTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 856, GQLParser::RuleListValueTypeName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3634);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::GROUP) {
      setState(3633);
      match(GQLParser::GROUP);
    }
    setState(3636);
    listValueTypeNameSynonym();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListValueTypeNameSynonymContext ------------------------------------------------------------------

GQLParser::ListValueTypeNameSynonymContext::ListValueTypeNameSynonymContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ListValueTypeNameSynonymContext::LIST() {
  return getToken(GQLParser::LIST, 0);
}

tree::TerminalNode* GQLParser::ListValueTypeNameSynonymContext::ARRAY() {
  return getToken(GQLParser::ARRAY, 0);
}


size_t GQLParser::ListValueTypeNameSynonymContext::getRuleIndex() const {
  return GQLParser::RuleListValueTypeNameSynonym;
}


std::any GQLParser::ListValueTypeNameSynonymContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitListValueTypeNameSynonym(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ListValueTypeNameSynonymContext* GQLParser::listValueTypeNameSynonym() {
  ListValueTypeNameSynonymContext *_localctx = _tracker.createInstance<ListValueTypeNameSynonymContext>(_ctx, getState());
  enterRule(_localctx, 858, GQLParser::RuleListValueTypeNameSynonym);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3638);
    _la = _input->LA(1);
    if (!(_la == GQLParser::ARRAY || _la == GQLParser::LIST)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldTypesSpecificationContext ------------------------------------------------------------------

GQLParser::FieldTypesSpecificationContext::FieldTypesSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FieldTypesSpecificationContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

tree::TerminalNode* GQLParser::FieldTypesSpecificationContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}

GQLParser::FieldTypeListContext* GQLParser::FieldTypesSpecificationContext::fieldTypeList() {
  return getRuleContext<GQLParser::FieldTypeListContext>(0);
}


size_t GQLParser::FieldTypesSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleFieldTypesSpecification;
}


std::any GQLParser::FieldTypesSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFieldTypesSpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FieldTypesSpecificationContext* GQLParser::fieldTypesSpecification() {
  FieldTypesSpecificationContext *_localctx = _tracker.createInstance<FieldTypesSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 860, GQLParser::RuleFieldTypesSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3640);
    match(GQLParser::LEFT_BRACE);
    setState(3642);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 28) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 28)) & -1) != 0) || ((((_la - 92) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 92)) & -1) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 156)) & -1) != 0) || ((((_la - 220) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 220)) & -1) != 0) || ((((_la - 284) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 284)) & 1206964700135305215) != 0)) {
      setState(3641);
      fieldTypeList();
    }
    setState(3644);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldTypeListContext ------------------------------------------------------------------

GQLParser::FieldTypeListContext::FieldTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::FieldTypeContext *> GQLParser::FieldTypeListContext::fieldType() {
  return getRuleContexts<GQLParser::FieldTypeContext>();
}

GQLParser::FieldTypeContext* GQLParser::FieldTypeListContext::fieldType(size_t i) {
  return getRuleContext<GQLParser::FieldTypeContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::FieldTypeListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::FieldTypeListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::FieldTypeListContext::getRuleIndex() const {
  return GQLParser::RuleFieldTypeList;
}


std::any GQLParser::FieldTypeListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFieldTypeList(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FieldTypeListContext* GQLParser::fieldTypeList() {
  FieldTypeListContext *_localctx = _tracker.createInstance<FieldTypeListContext>(_ctx, getState());
  enterRule(_localctx, 862, GQLParser::RuleFieldTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3646);
    fieldType();
    setState(3651);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(3647);
      match(GQLParser::COMMA);
      setState(3648);
      fieldType();
      setState(3653);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathValueTypeContext ------------------------------------------------------------------

GQLParser::PathValueTypeContext::PathValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::PathValueTypeContext::PATH() {
  return getToken(GQLParser::PATH, 0);
}

GQLParser::NotNullContext* GQLParser::PathValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::PathValueTypeContext::getRuleIndex() const {
  return GQLParser::RulePathValueType;
}


std::any GQLParser::PathValueTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathValueType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathValueTypeContext* GQLParser::pathValueType() {
  PathValueTypeContext *_localctx = _tracker.createInstance<PathValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 864, GQLParser::RulePathValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3654);
    match(GQLParser::PATH);
    setState(3656);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 408, _ctx)) {
    case 1: {
      setState(3655);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NotNullContext ------------------------------------------------------------------

GQLParser::NotNullContext::NotNullContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NotNullContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

tree::TerminalNode* GQLParser::NotNullContext::NULL_() {
  return getToken(GQLParser::NULL_, 0);
}


size_t GQLParser::NotNullContext::getRuleIndex() const {
  return GQLParser::RuleNotNull;
}


std::any GQLParser::NotNullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNotNull(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NotNullContext* GQLParser::notNull() {
  NotNullContext *_localctx = _tracker.createInstance<NotNullContext>(_ctx, getState());
  enterRule(_localctx, 866, GQLParser::RuleNotNull);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3658);
    match(GQLParser::NOT);
    setState(3659);
    match(GQLParser::NULL_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldTypeContext ------------------------------------------------------------------

GQLParser::FieldTypeContext::FieldTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FieldNameContext* GQLParser::FieldTypeContext::fieldName() {
  return getRuleContext<GQLParser::FieldNameContext>(0);
}

GQLParser::ValueTypeContext* GQLParser::FieldTypeContext::valueType() {
  return getRuleContext<GQLParser::ValueTypeContext>(0);
}

GQLParser::TypedContext* GQLParser::FieldTypeContext::typed() {
  return getRuleContext<GQLParser::TypedContext>(0);
}


size_t GQLParser::FieldTypeContext::getRuleIndex() const {
  return GQLParser::RuleFieldType;
}


std::any GQLParser::FieldTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFieldType(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FieldTypeContext* GQLParser::fieldType() {
  FieldTypeContext *_localctx = _tracker.createInstance<FieldTypeContext>(_ctx, getState());
  enterRule(_localctx, 868, GQLParser::RuleFieldType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3661);
    fieldName();
    setState(3663);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::TYPED

    || _la == GQLParser::DOUBLE_COLON) {
      setState(3662);
      typed();
    }
    setState(3665);
    valueType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SchemaReferenceContext ------------------------------------------------------------------

GQLParser::SchemaReferenceContext::SchemaReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::AbsoluteCatalogSchemaReferenceContext* GQLParser::SchemaReferenceContext::absoluteCatalogSchemaReference() {
  return getRuleContext<GQLParser::AbsoluteCatalogSchemaReferenceContext>(0);
}

GQLParser::RelativeCatalogSchemaReferenceContext* GQLParser::SchemaReferenceContext::relativeCatalogSchemaReference() {
  return getRuleContext<GQLParser::RelativeCatalogSchemaReferenceContext>(0);
}

GQLParser::ReferenceParameterContext* GQLParser::SchemaReferenceContext::referenceParameter() {
  return getRuleContext<GQLParser::ReferenceParameterContext>(0);
}


size_t GQLParser::SchemaReferenceContext::getRuleIndex() const {
  return GQLParser::RuleSchemaReference;
}


std::any GQLParser::SchemaReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSchemaReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SchemaReferenceContext* GQLParser::schemaReference() {
  SchemaReferenceContext *_localctx = _tracker.createInstance<SchemaReferenceContext>(_ctx, getState());
  enterRule(_localctx, 870, GQLParser::RuleSchemaReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3670);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::SOLIDUS: {
        enterOuterAlt(_localctx, 1);
        setState(3667);
        absoluteCatalogSchemaReference();
        break;
      }

      case GQLParser::PERIOD:
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::DOUBLE_PERIOD: {
        enterOuterAlt(_localctx, 2);
        setState(3668);
        relativeCatalogSchemaReference();
        break;
      }

      case GQLParser::DOLLAR_SIGN: {
        enterOuterAlt(_localctx, 3);
        setState(3669);
        referenceParameter();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbsoluteCatalogSchemaReferenceContext ------------------------------------------------------------------

GQLParser::AbsoluteCatalogSchemaReferenceContext::AbsoluteCatalogSchemaReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AbsoluteCatalogSchemaReferenceContext::SOLIDUS() {
  return getToken(GQLParser::SOLIDUS, 0);
}

GQLParser::AbsoluteDirectoryPathContext* GQLParser::AbsoluteCatalogSchemaReferenceContext::absoluteDirectoryPath() {
  return getRuleContext<GQLParser::AbsoluteDirectoryPathContext>(0);
}

GQLParser::SchemaNameContext* GQLParser::AbsoluteCatalogSchemaReferenceContext::schemaName() {
  return getRuleContext<GQLParser::SchemaNameContext>(0);
}


size_t GQLParser::AbsoluteCatalogSchemaReferenceContext::getRuleIndex() const {
  return GQLParser::RuleAbsoluteCatalogSchemaReference;
}


std::any GQLParser::AbsoluteCatalogSchemaReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAbsoluteCatalogSchemaReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::AbsoluteCatalogSchemaReferenceContext* GQLParser::absoluteCatalogSchemaReference() {
  AbsoluteCatalogSchemaReferenceContext *_localctx = _tracker.createInstance<AbsoluteCatalogSchemaReferenceContext>(_ctx, getState());
  enterRule(_localctx, 872, GQLParser::RuleAbsoluteCatalogSchemaReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3676);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 411, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3672);
      match(GQLParser::SOLIDUS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3673);
      absoluteDirectoryPath();
      setState(3674);
      schemaName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatalogSchemaParentAndNameContext ------------------------------------------------------------------

GQLParser::CatalogSchemaParentAndNameContext::CatalogSchemaParentAndNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::AbsoluteDirectoryPathContext* GQLParser::CatalogSchemaParentAndNameContext::absoluteDirectoryPath() {
  return getRuleContext<GQLParser::AbsoluteDirectoryPathContext>(0);
}

GQLParser::SchemaNameContext* GQLParser::CatalogSchemaParentAndNameContext::schemaName() {
  return getRuleContext<GQLParser::SchemaNameContext>(0);
}


size_t GQLParser::CatalogSchemaParentAndNameContext::getRuleIndex() const {
  return GQLParser::RuleCatalogSchemaParentAndName;
}


std::any GQLParser::CatalogSchemaParentAndNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCatalogSchemaParentAndName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CatalogSchemaParentAndNameContext* GQLParser::catalogSchemaParentAndName() {
  CatalogSchemaParentAndNameContext *_localctx = _tracker.createInstance<CatalogSchemaParentAndNameContext>(_ctx, getState());
  enterRule(_localctx, 874, GQLParser::RuleCatalogSchemaParentAndName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3678);
    absoluteDirectoryPath();
    setState(3679);
    schemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelativeCatalogSchemaReferenceContext ------------------------------------------------------------------

GQLParser::RelativeCatalogSchemaReferenceContext::RelativeCatalogSchemaReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PredefinedSchemaReferenceContext* GQLParser::RelativeCatalogSchemaReferenceContext::predefinedSchemaReference() {
  return getRuleContext<GQLParser::PredefinedSchemaReferenceContext>(0);
}

GQLParser::RelativeDirectoryPathContext* GQLParser::RelativeCatalogSchemaReferenceContext::relativeDirectoryPath() {
  return getRuleContext<GQLParser::RelativeDirectoryPathContext>(0);
}

GQLParser::SchemaNameContext* GQLParser::RelativeCatalogSchemaReferenceContext::schemaName() {
  return getRuleContext<GQLParser::SchemaNameContext>(0);
}


size_t GQLParser::RelativeCatalogSchemaReferenceContext::getRuleIndex() const {
  return GQLParser::RuleRelativeCatalogSchemaReference;
}


std::any GQLParser::RelativeCatalogSchemaReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitRelativeCatalogSchemaReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::RelativeCatalogSchemaReferenceContext* GQLParser::relativeCatalogSchemaReference() {
  RelativeCatalogSchemaReferenceContext *_localctx = _tracker.createInstance<RelativeCatalogSchemaReferenceContext>(_ctx, getState());
  enterRule(_localctx, 876, GQLParser::RuleRelativeCatalogSchemaReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3685);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::PERIOD:
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::HOME_SCHEMA: {
        enterOuterAlt(_localctx, 1);
        setState(3681);
        predefinedSchemaReference();
        break;
      }

      case GQLParser::DOUBLE_PERIOD: {
        enterOuterAlt(_localctx, 2);
        setState(3682);
        relativeDirectoryPath();
        setState(3683);
        schemaName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredefinedSchemaReferenceContext ------------------------------------------------------------------

GQLParser::PredefinedSchemaReferenceContext::PredefinedSchemaReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::PredefinedSchemaReferenceContext::HOME_SCHEMA() {
  return getToken(GQLParser::HOME_SCHEMA, 0);
}

tree::TerminalNode* GQLParser::PredefinedSchemaReferenceContext::CURRENT_SCHEMA() {
  return getToken(GQLParser::CURRENT_SCHEMA, 0);
}

tree::TerminalNode* GQLParser::PredefinedSchemaReferenceContext::PERIOD() {
  return getToken(GQLParser::PERIOD, 0);
}


size_t GQLParser::PredefinedSchemaReferenceContext::getRuleIndex() const {
  return GQLParser::RulePredefinedSchemaReference;
}


std::any GQLParser::PredefinedSchemaReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPredefinedSchemaReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PredefinedSchemaReferenceContext* GQLParser::predefinedSchemaReference() {
  PredefinedSchemaReferenceContext *_localctx = _tracker.createInstance<PredefinedSchemaReferenceContext>(_ctx, getState());
  enterRule(_localctx, 878, GQLParser::RulePredefinedSchemaReference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3687);
    _la = _input->LA(1);
    if (!(_la == GQLParser::PERIOD || _la == GQLParser::CURRENT_SCHEMA

    || _la == GQLParser::HOME_SCHEMA)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbsoluteDirectoryPathContext ------------------------------------------------------------------

GQLParser::AbsoluteDirectoryPathContext::AbsoluteDirectoryPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AbsoluteDirectoryPathContext::SOLIDUS() {
  return getToken(GQLParser::SOLIDUS, 0);
}

GQLParser::SimpleDirectoryPathContext* GQLParser::AbsoluteDirectoryPathContext::simpleDirectoryPath() {
  return getRuleContext<GQLParser::SimpleDirectoryPathContext>(0);
}


size_t GQLParser::AbsoluteDirectoryPathContext::getRuleIndex() const {
  return GQLParser::RuleAbsoluteDirectoryPath;
}


std::any GQLParser::AbsoluteDirectoryPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitAbsoluteDirectoryPath(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::AbsoluteDirectoryPathContext* GQLParser::absoluteDirectoryPath() {
  AbsoluteDirectoryPathContext *_localctx = _tracker.createInstance<AbsoluteDirectoryPathContext>(_ctx, getState());
  enterRule(_localctx, 880, GQLParser::RuleAbsoluteDirectoryPath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3689);
    match(GQLParser::SOLIDUS);
    setState(3691);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 413, _ctx)) {
    case 1: {
      setState(3690);
      simpleDirectoryPath();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelativeDirectoryPathContext ------------------------------------------------------------------

GQLParser::RelativeDirectoryPathContext::RelativeDirectoryPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GQLParser::RelativeDirectoryPathContext::DOUBLE_PERIOD() {
  return getTokens(GQLParser::DOUBLE_PERIOD);
}

tree::TerminalNode* GQLParser::RelativeDirectoryPathContext::DOUBLE_PERIOD(size_t i) {
  return getToken(GQLParser::DOUBLE_PERIOD, i);
}

std::vector<tree::TerminalNode *> GQLParser::RelativeDirectoryPathContext::SOLIDUS() {
  return getTokens(GQLParser::SOLIDUS);
}

tree::TerminalNode* GQLParser::RelativeDirectoryPathContext::SOLIDUS(size_t i) {
  return getToken(GQLParser::SOLIDUS, i);
}

GQLParser::SimpleDirectoryPathContext* GQLParser::RelativeDirectoryPathContext::simpleDirectoryPath() {
  return getRuleContext<GQLParser::SimpleDirectoryPathContext>(0);
}


size_t GQLParser::RelativeDirectoryPathContext::getRuleIndex() const {
  return GQLParser::RuleRelativeDirectoryPath;
}


std::any GQLParser::RelativeDirectoryPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitRelativeDirectoryPath(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::RelativeDirectoryPathContext* GQLParser::relativeDirectoryPath() {
  RelativeDirectoryPathContext *_localctx = _tracker.createInstance<RelativeDirectoryPathContext>(_ctx, getState());
  enterRule(_localctx, 882, GQLParser::RuleRelativeDirectoryPath);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3693);
    match(GQLParser::DOUBLE_PERIOD);
    setState(3705);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::SOLIDUS) {
      setState(3698);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 414, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3694);
          match(GQLParser::SOLIDUS);
          setState(3695);
          match(GQLParser::DOUBLE_PERIOD); 
        }
        setState(3700);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 414, _ctx);
      }
      setState(3701);
      match(GQLParser::SOLIDUS);
      setState(3703);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 415, _ctx)) {
      case 1: {
        setState(3702);
        simpleDirectoryPath();
        break;
      }

      default:
        break;
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleDirectoryPathContext ------------------------------------------------------------------

GQLParser::SimpleDirectoryPathContext::SimpleDirectoryPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::DirectoryNameContext *> GQLParser::SimpleDirectoryPathContext::directoryName() {
  return getRuleContexts<GQLParser::DirectoryNameContext>();
}

GQLParser::DirectoryNameContext* GQLParser::SimpleDirectoryPathContext::directoryName(size_t i) {
  return getRuleContext<GQLParser::DirectoryNameContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SimpleDirectoryPathContext::SOLIDUS() {
  return getTokens(GQLParser::SOLIDUS);
}

tree::TerminalNode* GQLParser::SimpleDirectoryPathContext::SOLIDUS(size_t i) {
  return getToken(GQLParser::SOLIDUS, i);
}


size_t GQLParser::SimpleDirectoryPathContext::getRuleIndex() const {
  return GQLParser::RuleSimpleDirectoryPath;
}


std::any GQLParser::SimpleDirectoryPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleDirectoryPath(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimpleDirectoryPathContext* GQLParser::simpleDirectoryPath() {
  SimpleDirectoryPathContext *_localctx = _tracker.createInstance<SimpleDirectoryPathContext>(_ctx, getState());
  enterRule(_localctx, 884, GQLParser::RuleSimpleDirectoryPath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3710); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(3707);
              directoryName();
              setState(3708);
              match(GQLParser::SOLIDUS);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(3712); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 417, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphReferenceContext ------------------------------------------------------------------

GQLParser::GraphReferenceContext::GraphReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CatalogObjectParentReferenceContext* GQLParser::GraphReferenceContext::catalogObjectParentReference() {
  return getRuleContext<GQLParser::CatalogObjectParentReferenceContext>(0);
}

GQLParser::GraphNameContext* GQLParser::GraphReferenceContext::graphName() {
  return getRuleContext<GQLParser::GraphNameContext>(0);
}

GQLParser::DelimitedGraphNameContext* GQLParser::GraphReferenceContext::delimitedGraphName() {
  return getRuleContext<GQLParser::DelimitedGraphNameContext>(0);
}

GQLParser::HomeGraphContext* GQLParser::GraphReferenceContext::homeGraph() {
  return getRuleContext<GQLParser::HomeGraphContext>(0);
}

GQLParser::ReferenceParameterContext* GQLParser::GraphReferenceContext::referenceParameter() {
  return getRuleContext<GQLParser::ReferenceParameterContext>(0);
}


size_t GQLParser::GraphReferenceContext::getRuleIndex() const {
  return GQLParser::RuleGraphReference;
}


std::any GQLParser::GraphReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphReferenceContext* GQLParser::graphReference() {
  GraphReferenceContext *_localctx = _tracker.createInstance<GraphReferenceContext>(_ctx, getState());
  enterRule(_localctx, 886, GQLParser::RuleGraphReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3720);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 418, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3714);
      catalogObjectParentReference();
      setState(3715);
      graphName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3717);
      delimitedGraphName();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3718);
      homeGraph();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3719);
      referenceParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatalogGraphParentAndNameContext ------------------------------------------------------------------

GQLParser::CatalogGraphParentAndNameContext::CatalogGraphParentAndNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphNameContext* GQLParser::CatalogGraphParentAndNameContext::graphName() {
  return getRuleContext<GQLParser::GraphNameContext>(0);
}

GQLParser::CatalogObjectParentReferenceContext* GQLParser::CatalogGraphParentAndNameContext::catalogObjectParentReference() {
  return getRuleContext<GQLParser::CatalogObjectParentReferenceContext>(0);
}


size_t GQLParser::CatalogGraphParentAndNameContext::getRuleIndex() const {
  return GQLParser::RuleCatalogGraphParentAndName;
}


std::any GQLParser::CatalogGraphParentAndNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCatalogGraphParentAndName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CatalogGraphParentAndNameContext* GQLParser::catalogGraphParentAndName() {
  CatalogGraphParentAndNameContext *_localctx = _tracker.createInstance<CatalogGraphParentAndNameContext>(_ctx, getState());
  enterRule(_localctx, 888, GQLParser::RuleCatalogGraphParentAndName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3723);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 419, _ctx)) {
    case 1: {
      setState(3722);
      catalogObjectParentReference();
      break;
    }

    default:
      break;
    }
    setState(3725);
    graphName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HomeGraphContext ------------------------------------------------------------------

GQLParser::HomeGraphContext::HomeGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::HomeGraphContext::HOME_PROPERTY_GRAPH() {
  return getToken(GQLParser::HOME_PROPERTY_GRAPH, 0);
}

tree::TerminalNode* GQLParser::HomeGraphContext::HOME_GRAPH() {
  return getToken(GQLParser::HOME_GRAPH, 0);
}


size_t GQLParser::HomeGraphContext::getRuleIndex() const {
  return GQLParser::RuleHomeGraph;
}


std::any GQLParser::HomeGraphContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitHomeGraph(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::HomeGraphContext* GQLParser::homeGraph() {
  HomeGraphContext *_localctx = _tracker.createInstance<HomeGraphContext>(_ctx, getState());
  enterRule(_localctx, 890, GQLParser::RuleHomeGraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3727);
    _la = _input->LA(1);
    if (!(_la == GQLParser::HOME_GRAPH

    || _la == GQLParser::HOME_PROPERTY_GRAPH)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphTypeReferenceContext ------------------------------------------------------------------

GQLParser::GraphTypeReferenceContext::GraphTypeReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CatalogGraphTypeParentAndNameContext* GQLParser::GraphTypeReferenceContext::catalogGraphTypeParentAndName() {
  return getRuleContext<GQLParser::CatalogGraphTypeParentAndNameContext>(0);
}

GQLParser::ReferenceParameterContext* GQLParser::GraphTypeReferenceContext::referenceParameter() {
  return getRuleContext<GQLParser::ReferenceParameterContext>(0);
}


size_t GQLParser::GraphTypeReferenceContext::getRuleIndex() const {
  return GQLParser::RuleGraphTypeReference;
}


std::any GQLParser::GraphTypeReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGraphTypeReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GraphTypeReferenceContext* GQLParser::graphTypeReference() {
  GraphTypeReferenceContext *_localctx = _tracker.createInstance<GraphTypeReferenceContext>(_ctx, getState());
  enterRule(_localctx, 892, GQLParser::RuleGraphTypeReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3731);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 420, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3729);
      catalogGraphTypeParentAndName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3730);
      referenceParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatalogGraphTypeParentAndNameContext ------------------------------------------------------------------

GQLParser::CatalogGraphTypeParentAndNameContext::CatalogGraphTypeParentAndNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphTypeNameContext* GQLParser::CatalogGraphTypeParentAndNameContext::graphTypeName() {
  return getRuleContext<GQLParser::GraphTypeNameContext>(0);
}

GQLParser::CatalogObjectParentReferenceContext* GQLParser::CatalogGraphTypeParentAndNameContext::catalogObjectParentReference() {
  return getRuleContext<GQLParser::CatalogObjectParentReferenceContext>(0);
}


size_t GQLParser::CatalogGraphTypeParentAndNameContext::getRuleIndex() const {
  return GQLParser::RuleCatalogGraphTypeParentAndName;
}


std::any GQLParser::CatalogGraphTypeParentAndNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCatalogGraphTypeParentAndName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CatalogGraphTypeParentAndNameContext* GQLParser::catalogGraphTypeParentAndName() {
  CatalogGraphTypeParentAndNameContext *_localctx = _tracker.createInstance<CatalogGraphTypeParentAndNameContext>(_ctx, getState());
  enterRule(_localctx, 894, GQLParser::RuleCatalogGraphTypeParentAndName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3734);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 421, _ctx)) {
    case 1: {
      setState(3733);
      catalogObjectParentReference();
      break;
    }

    default:
      break;
    }
    setState(3736);
    graphTypeName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingTableReferenceContext ------------------------------------------------------------------

GQLParser::BindingTableReferenceContext::BindingTableReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CatalogObjectParentReferenceContext* GQLParser::BindingTableReferenceContext::catalogObjectParentReference() {
  return getRuleContext<GQLParser::CatalogObjectParentReferenceContext>(0);
}

GQLParser::BindingTableNameContext* GQLParser::BindingTableReferenceContext::bindingTableName() {
  return getRuleContext<GQLParser::BindingTableNameContext>(0);
}

GQLParser::DelimitedBindingTableNameContext* GQLParser::BindingTableReferenceContext::delimitedBindingTableName() {
  return getRuleContext<GQLParser::DelimitedBindingTableNameContext>(0);
}

GQLParser::ReferenceParameterContext* GQLParser::BindingTableReferenceContext::referenceParameter() {
  return getRuleContext<GQLParser::ReferenceParameterContext>(0);
}


size_t GQLParser::BindingTableReferenceContext::getRuleIndex() const {
  return GQLParser::RuleBindingTableReference;
}


std::any GQLParser::BindingTableReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitBindingTableReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::BindingTableReferenceContext* GQLParser::bindingTableReference() {
  BindingTableReferenceContext *_localctx = _tracker.createInstance<BindingTableReferenceContext>(_ctx, getState());
  enterRule(_localctx, 896, GQLParser::RuleBindingTableReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3743);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 422, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3738);
      catalogObjectParentReference();
      setState(3739);
      bindingTableName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3741);
      delimitedBindingTableName();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3742);
      referenceParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatalogBindingTableParentAndNameContext ------------------------------------------------------------------

GQLParser::CatalogBindingTableParentAndNameContext::CatalogBindingTableParentAndNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingTableNameContext* GQLParser::CatalogBindingTableParentAndNameContext::bindingTableName() {
  return getRuleContext<GQLParser::BindingTableNameContext>(0);
}

GQLParser::CatalogObjectParentReferenceContext* GQLParser::CatalogBindingTableParentAndNameContext::catalogObjectParentReference() {
  return getRuleContext<GQLParser::CatalogObjectParentReferenceContext>(0);
}


size_t GQLParser::CatalogBindingTableParentAndNameContext::getRuleIndex() const {
  return GQLParser::RuleCatalogBindingTableParentAndName;
}


std::any GQLParser::CatalogBindingTableParentAndNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCatalogBindingTableParentAndName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CatalogBindingTableParentAndNameContext* GQLParser::catalogBindingTableParentAndName() {
  CatalogBindingTableParentAndNameContext *_localctx = _tracker.createInstance<CatalogBindingTableParentAndNameContext>(_ctx, getState());
  enterRule(_localctx, 898, GQLParser::RuleCatalogBindingTableParentAndName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3746);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 423, _ctx)) {
    case 1: {
      setState(3745);
      catalogObjectParentReference();
      break;
    }

    default:
      break;
    }
    setState(3748);
    bindingTableName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureReferenceContext ------------------------------------------------------------------

GQLParser::ProcedureReferenceContext::ProcedureReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CatalogProcedureParentAndNameContext* GQLParser::ProcedureReferenceContext::catalogProcedureParentAndName() {
  return getRuleContext<GQLParser::CatalogProcedureParentAndNameContext>(0);
}

GQLParser::ReferenceParameterContext* GQLParser::ProcedureReferenceContext::referenceParameter() {
  return getRuleContext<GQLParser::ReferenceParameterContext>(0);
}


size_t GQLParser::ProcedureReferenceContext::getRuleIndex() const {
  return GQLParser::RuleProcedureReference;
}


std::any GQLParser::ProcedureReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitProcedureReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ProcedureReferenceContext* GQLParser::procedureReference() {
  ProcedureReferenceContext *_localctx = _tracker.createInstance<ProcedureReferenceContext>(_ctx, getState());
  enterRule(_localctx, 900, GQLParser::RuleProcedureReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3752);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 424, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3750);
      catalogProcedureParentAndName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3751);
      referenceParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatalogProcedureParentAndNameContext ------------------------------------------------------------------

GQLParser::CatalogProcedureParentAndNameContext::CatalogProcedureParentAndNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ProcedureNameContext* GQLParser::CatalogProcedureParentAndNameContext::procedureName() {
  return getRuleContext<GQLParser::ProcedureNameContext>(0);
}

GQLParser::CatalogObjectParentReferenceContext* GQLParser::CatalogProcedureParentAndNameContext::catalogObjectParentReference() {
  return getRuleContext<GQLParser::CatalogObjectParentReferenceContext>(0);
}


size_t GQLParser::CatalogProcedureParentAndNameContext::getRuleIndex() const {
  return GQLParser::RuleCatalogProcedureParentAndName;
}


std::any GQLParser::CatalogProcedureParentAndNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCatalogProcedureParentAndName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CatalogProcedureParentAndNameContext* GQLParser::catalogProcedureParentAndName() {
  CatalogProcedureParentAndNameContext *_localctx = _tracker.createInstance<CatalogProcedureParentAndNameContext>(_ctx, getState());
  enterRule(_localctx, 902, GQLParser::RuleCatalogProcedureParentAndName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3755);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 425, _ctx)) {
    case 1: {
      setState(3754);
      catalogObjectParentReference();
      break;
    }

    default:
      break;
    }
    setState(3757);
    procedureName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatalogObjectParentReferenceContext ------------------------------------------------------------------

GQLParser::CatalogObjectParentReferenceContext::CatalogObjectParentReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SchemaReferenceContext* GQLParser::CatalogObjectParentReferenceContext::schemaReference() {
  return getRuleContext<GQLParser::SchemaReferenceContext>(0);
}

tree::TerminalNode* GQLParser::CatalogObjectParentReferenceContext::SOLIDUS() {
  return getToken(GQLParser::SOLIDUS, 0);
}

std::vector<GQLParser::ObjectNameContext *> GQLParser::CatalogObjectParentReferenceContext::objectName() {
  return getRuleContexts<GQLParser::ObjectNameContext>();
}

GQLParser::ObjectNameContext* GQLParser::CatalogObjectParentReferenceContext::objectName(size_t i) {
  return getRuleContext<GQLParser::ObjectNameContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::CatalogObjectParentReferenceContext::PERIOD() {
  return getTokens(GQLParser::PERIOD);
}

tree::TerminalNode* GQLParser::CatalogObjectParentReferenceContext::PERIOD(size_t i) {
  return getToken(GQLParser::PERIOD, i);
}


size_t GQLParser::CatalogObjectParentReferenceContext::getRuleIndex() const {
  return GQLParser::RuleCatalogObjectParentReference;
}


std::any GQLParser::CatalogObjectParentReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCatalogObjectParentReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CatalogObjectParentReferenceContext* GQLParser::catalogObjectParentReference() {
  CatalogObjectParentReferenceContext *_localctx = _tracker.createInstance<CatalogObjectParentReferenceContext>(_ctx, getState());
  enterRule(_localctx, 904, GQLParser::RuleCatalogObjectParentReference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(3778);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 429, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3759);
      schemaReference();
      setState(3761);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::SOLIDUS) {
        setState(3760);
        match(GQLParser::SOLIDUS);
      }
      setState(3768);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 427, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3763);
          objectName();
          setState(3764);
          match(GQLParser::PERIOD); 
        }
        setState(3770);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 427, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3774); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(3771);
                objectName();
                setState(3772);
                match(GQLParser::PERIOD);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(3776); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 428, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceParameterContext ------------------------------------------------------------------

GQLParser::ReferenceParameterContext::ReferenceParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ParameterContext* GQLParser::ReferenceParameterContext::parameter() {
  return getRuleContext<GQLParser::ParameterContext>(0);
}


size_t GQLParser::ReferenceParameterContext::getRuleIndex() const {
  return GQLParser::RuleReferenceParameter;
}


std::any GQLParser::ReferenceParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitReferenceParameter(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ReferenceParameterContext* GQLParser::referenceParameter() {
  ReferenceParameterContext *_localctx = _tracker.createInstance<ReferenceParameterContext>(_ctx, getState());
  enterRule(_localctx, 906, GQLParser::RuleReferenceParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3780);
    parameter();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExternalObjectReferenceContext ------------------------------------------------------------------

GQLParser::ExternalObjectReferenceContext::ExternalObjectReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ExternalObjectReferenceContext::I_DONT_KNOW_3() {
  return getToken(GQLParser::I_DONT_KNOW_3, 0);
}


size_t GQLParser::ExternalObjectReferenceContext::getRuleIndex() const {
  return GQLParser::RuleExternalObjectReference;
}


std::any GQLParser::ExternalObjectReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitExternalObjectReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ExternalObjectReferenceContext* GQLParser::externalObjectReference() {
  ExternalObjectReferenceContext *_localctx = _tracker.createInstance<ExternalObjectReferenceContext>(_ctx, getState());
  enterRule(_localctx, 908, GQLParser::RuleExternalObjectReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3782);
    match(GQLParser::I_DONT_KNOW_3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonPredicateCondContext ------------------------------------------------------------------

GQLParser::ComparisonPredicateCondContext::ComparisonPredicateCondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CompOpContext* GQLParser::ComparisonPredicateCondContext::compOp() {
  return getRuleContext<GQLParser::CompOpContext>(0);
}

GQLParser::ExpressionContext* GQLParser::ComparisonPredicateCondContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}


size_t GQLParser::ComparisonPredicateCondContext::getRuleIndex() const {
  return GQLParser::RuleComparisonPredicateCond;
}


std::any GQLParser::ComparisonPredicateCondContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitComparisonPredicateCond(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ComparisonPredicateCondContext* GQLParser::comparisonPredicateCond() {
  ComparisonPredicateCondContext *_localctx = _tracker.createInstance<ComparisonPredicateCondContext>(_ctx, getState());
  enterRule(_localctx, 910, GQLParser::RuleComparisonPredicateCond);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3784);
    compOp();
    setState(3785);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompOpContext ------------------------------------------------------------------

GQLParser::CompOpContext::CompOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CompOpContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}

tree::TerminalNode* GQLParser::CompOpContext::NOT_EQUALS_OPERATOR() {
  return getToken(GQLParser::NOT_EQUALS_OPERATOR, 0);
}

tree::TerminalNode* GQLParser::CompOpContext::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

tree::TerminalNode* GQLParser::CompOpContext::RIGHT_ANGLE_BRACKET() {
  return getToken(GQLParser::RIGHT_ANGLE_BRACKET, 0);
}

tree::TerminalNode* GQLParser::CompOpContext::LESS_THAN_OR_EQUALS_OPERATOR() {
  return getToken(GQLParser::LESS_THAN_OR_EQUALS_OPERATOR, 0);
}

tree::TerminalNode* GQLParser::CompOpContext::GREATER_THAN_OR_EQUALS_OPERATOR() {
  return getToken(GQLParser::GREATER_THAN_OR_EQUALS_OPERATOR, 0);
}


size_t GQLParser::CompOpContext::getRuleIndex() const {
  return GQLParser::RuleCompOp;
}


std::any GQLParser::CompOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCompOp(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CompOpContext* GQLParser::compOp() {
  CompOpContext *_localctx = _tracker.createInstance<CompOpContext>(_ctx, getState());
  enterRule(_localctx, 912, GQLParser::RuleCompOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3787);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 8832) != 0) || ((((_la - 303) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 303)) & 81) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullPredicateCondContext ------------------------------------------------------------------

GQLParser::NullPredicateCondContext::NullPredicateCondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NullPredicateCondContext::IS() {
  return getToken(GQLParser::IS, 0);
}

tree::TerminalNode* GQLParser::NullPredicateCondContext::NULL_() {
  return getToken(GQLParser::NULL_, 0);
}

tree::TerminalNode* GQLParser::NullPredicateCondContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}


size_t GQLParser::NullPredicateCondContext::getRuleIndex() const {
  return GQLParser::RuleNullPredicateCond;
}


std::any GQLParser::NullPredicateCondContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNullPredicateCond(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NullPredicateCondContext* GQLParser::nullPredicateCond() {
  NullPredicateCondContext *_localctx = _tracker.createInstance<NullPredicateCondContext>(_ctx, getState());
  enterRule(_localctx, 914, GQLParser::RuleNullPredicateCond);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3789);
    match(GQLParser::IS);
    setState(3791);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::NOT) {
      setState(3790);
      match(GQLParser::NOT);
    }
    setState(3793);
    match(GQLParser::NULL_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalizedPredicateCondContext ------------------------------------------------------------------

GQLParser::NormalizedPredicateCondContext::NormalizedPredicateCondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NormalizedPredicateCondContext::IS() {
  return getToken(GQLParser::IS, 0);
}

tree::TerminalNode* GQLParser::NormalizedPredicateCondContext::NORMALIZED() {
  return getToken(GQLParser::NORMALIZED, 0);
}

tree::TerminalNode* GQLParser::NormalizedPredicateCondContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

GQLParser::NormalFormContext* GQLParser::NormalizedPredicateCondContext::normalForm() {
  return getRuleContext<GQLParser::NormalFormContext>(0);
}


size_t GQLParser::NormalizedPredicateCondContext::getRuleIndex() const {
  return GQLParser::RuleNormalizedPredicateCond;
}


std::any GQLParser::NormalizedPredicateCondContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNormalizedPredicateCond(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NormalizedPredicateCondContext* GQLParser::normalizedPredicateCond() {
  NormalizedPredicateCondContext *_localctx = _tracker.createInstance<NormalizedPredicateCondContext>(_ctx, getState());
  enterRule(_localctx, 916, GQLParser::RuleNormalizedPredicateCond);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3795);
    match(GQLParser::IS);
    setState(3797);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::NOT) {
      setState(3796);
      match(GQLParser::NOT);
    }
    setState(3800);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 175) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 175)) & 15) != 0)) {
      setState(3799);
      normalForm();
    }
    setState(3802);
    match(GQLParser::NORMALIZED);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectedPredicateCondContext ------------------------------------------------------------------

GQLParser::DirectedPredicateCondContext::DirectedPredicateCondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DirectedPredicateCondContext::IS() {
  return getToken(GQLParser::IS, 0);
}

tree::TerminalNode* GQLParser::DirectedPredicateCondContext::DIRECTED() {
  return getToken(GQLParser::DIRECTED, 0);
}

tree::TerminalNode* GQLParser::DirectedPredicateCondContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}


size_t GQLParser::DirectedPredicateCondContext::getRuleIndex() const {
  return GQLParser::RuleDirectedPredicateCond;
}


std::any GQLParser::DirectedPredicateCondContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDirectedPredicateCond(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DirectedPredicateCondContext* GQLParser::directedPredicateCond() {
  DirectedPredicateCondContext *_localctx = _tracker.createInstance<DirectedPredicateCondContext>(_ctx, getState());
  enterRule(_localctx, 918, GQLParser::RuleDirectedPredicateCond);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3804);
    match(GQLParser::IS);
    setState(3806);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::NOT) {
      setState(3805);
      match(GQLParser::NOT);
    }
    setState(3808);
    match(GQLParser::DIRECTED);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabeledPredicateCondContext ------------------------------------------------------------------

GQLParser::LabeledPredicateCondContext::LabeledPredicateCondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::LabelExpressionContext* GQLParser::LabeledPredicateCondContext::labelExpression() {
  return getRuleContext<GQLParser::LabelExpressionContext>(0);
}

tree::TerminalNode* GQLParser::LabeledPredicateCondContext::IS() {
  return getToken(GQLParser::IS, 0);
}

tree::TerminalNode* GQLParser::LabeledPredicateCondContext::LABELED() {
  return getToken(GQLParser::LABELED, 0);
}

tree::TerminalNode* GQLParser::LabeledPredicateCondContext::COLON() {
  return getToken(GQLParser::COLON, 0);
}

tree::TerminalNode* GQLParser::LabeledPredicateCondContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}


size_t GQLParser::LabeledPredicateCondContext::getRuleIndex() const {
  return GQLParser::RuleLabeledPredicateCond;
}


std::any GQLParser::LabeledPredicateCondContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLabeledPredicateCond(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LabeledPredicateCondContext* GQLParser::labeledPredicateCond() {
  LabeledPredicateCondContext *_localctx = _tracker.createInstance<LabeledPredicateCondContext>(_ctx, getState());
  enterRule(_localctx, 920, GQLParser::RuleLabeledPredicateCond);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3816);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::IS: {
        setState(3810);
        match(GQLParser::IS);
        setState(3812);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::NOT) {
          setState(3811);
          match(GQLParser::NOT);
        }
        setState(3814);
        match(GQLParser::LABELED);
        break;
      }

      case GQLParser::COLON: {
        setState(3815);
        match(GQLParser::COLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3818);
    labelExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourceDestinationPredicateCondContext ------------------------------------------------------------------

GQLParser::SourceDestinationPredicateCondContext::SourceDestinationPredicateCondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SourceDestinationPredicateCondContext::IS() {
  return getToken(GQLParser::IS, 0);
}

tree::TerminalNode* GQLParser::SourceDestinationPredicateCondContext::OF() {
  return getToken(GQLParser::OF, 0);
}

GQLParser::ElementVariableReferenceContext* GQLParser::SourceDestinationPredicateCondContext::elementVariableReference() {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(0);
}

tree::TerminalNode* GQLParser::SourceDestinationPredicateCondContext::SOURCE() {
  return getToken(GQLParser::SOURCE, 0);
}

tree::TerminalNode* GQLParser::SourceDestinationPredicateCondContext::DESTINATION() {
  return getToken(GQLParser::DESTINATION, 0);
}

tree::TerminalNode* GQLParser::SourceDestinationPredicateCondContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}


size_t GQLParser::SourceDestinationPredicateCondContext::getRuleIndex() const {
  return GQLParser::RuleSourceDestinationPredicateCond;
}


std::any GQLParser::SourceDestinationPredicateCondContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSourceDestinationPredicateCond(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SourceDestinationPredicateCondContext* GQLParser::sourceDestinationPredicateCond() {
  SourceDestinationPredicateCondContext *_localctx = _tracker.createInstance<SourceDestinationPredicateCondContext>(_ctx, getState());
  enterRule(_localctx, 922, GQLParser::RuleSourceDestinationPredicateCond);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3820);
    match(GQLParser::IS);
    setState(3822);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::NOT) {
      setState(3821);
      match(GQLParser::NOT);
    }
    setState(3824);
    _la = _input->LA(1);
    if (!(_la == GQLParser::DESTINATION || _la == GQLParser::SOURCE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3825);
    match(GQLParser::OF);
    setState(3826);
    elementVariableReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnsignedValueSpecificationContext ------------------------------------------------------------------

GQLParser::UnsignedValueSpecificationContext::UnsignedValueSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnsignedLiteralContext* GQLParser::UnsignedValueSpecificationContext::unsignedLiteral() {
  return getRuleContext<GQLParser::UnsignedLiteralContext>(0);
}

GQLParser::ParameterValueSpecificationContext* GQLParser::UnsignedValueSpecificationContext::parameterValueSpecification() {
  return getRuleContext<GQLParser::ParameterValueSpecificationContext>(0);
}


size_t GQLParser::UnsignedValueSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleUnsignedValueSpecification;
}


std::any GQLParser::UnsignedValueSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitUnsignedValueSpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::UnsignedValueSpecificationContext* GQLParser::unsignedValueSpecification() {
  UnsignedValueSpecificationContext *_localctx = _tracker.createInstance<UnsignedValueSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 924, GQLParser::RuleUnsignedValueSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3830);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LEFT_BRACE:
      case GQLParser::LEFT_BRACKET:
      case GQLParser::ARRAY:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DURATION:
      case GQLParser::K_FALSE:
      case GQLParser::GROUP:
      case GQLParser::LIST:
      case GQLParser::NULL_:
      case GQLParser::RECORD:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::K_TRUE:
      case GQLParser::UNKNOWN:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER:
      case GQLParser::UNSIGNED_HEXADECIMAL_INTEGER:
      case GQLParser::UNSIGNED_OCTAL_INTEGER:
      case GQLParser::UNSIGNED_BINARY_INTEGER:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION:
      case GQLParser::SINGLE_QUOTED_STRING_LITERAL:
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::BYTE_STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(3828);
        unsignedLiteral();
        break;
      }

      case GQLParser::DOLLAR_SIGN:
      case GQLParser::CURRENT_USER: {
        enterOuterAlt(_localctx, 2);
        setState(3829);
        parameterValueSpecification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnsignedIntegerSpecificationContext ------------------------------------------------------------------

GQLParser::UnsignedIntegerSpecificationContext::UnsignedIntegerSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IntegerLiteralContext* GQLParser::UnsignedIntegerSpecificationContext::integerLiteral() {
  return getRuleContext<GQLParser::IntegerLiteralContext>(0);
}

GQLParser::ParameterContext* GQLParser::UnsignedIntegerSpecificationContext::parameter() {
  return getRuleContext<GQLParser::ParameterContext>(0);
}


size_t GQLParser::UnsignedIntegerSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleUnsignedIntegerSpecification;
}


std::any GQLParser::UnsignedIntegerSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitUnsignedIntegerSpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::UnsignedIntegerSpecificationContext* GQLParser::unsignedIntegerSpecification() {
  UnsignedIntegerSpecificationContext *_localctx = _tracker.createInstance<UnsignedIntegerSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 926, GQLParser::RuleUnsignedIntegerSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3834);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::UNSIGNED_DECIMAL_INTEGER:
      case GQLParser::UNSIGNED_HEXADECIMAL_INTEGER:
      case GQLParser::UNSIGNED_OCTAL_INTEGER:
      case GQLParser::UNSIGNED_BINARY_INTEGER: {
        enterOuterAlt(_localctx, 1);
        setState(3832);
        integerLiteral();
        break;
      }

      case GQLParser::DOLLAR_SIGN: {
        enterOuterAlt(_localctx, 2);
        setState(3833);
        parameter();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterValueSpecificationContext ------------------------------------------------------------------

GQLParser::ParameterValueSpecificationContext::ParameterValueSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ParameterContext* GQLParser::ParameterValueSpecificationContext::parameter() {
  return getRuleContext<GQLParser::ParameterContext>(0);
}

GQLParser::PredefinedParameterContext* GQLParser::ParameterValueSpecificationContext::predefinedParameter() {
  return getRuleContext<GQLParser::PredefinedParameterContext>(0);
}


size_t GQLParser::ParameterValueSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleParameterValueSpecification;
}


std::any GQLParser::ParameterValueSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitParameterValueSpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ParameterValueSpecificationContext* GQLParser::parameterValueSpecification() {
  ParameterValueSpecificationContext *_localctx = _tracker.createInstance<ParameterValueSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 928, GQLParser::RuleParameterValueSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3838);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DOLLAR_SIGN: {
        enterOuterAlt(_localctx, 1);
        setState(3836);
        parameter();
        break;
      }

      case GQLParser::CURRENT_USER: {
        enterOuterAlt(_localctx, 2);
        setState(3837);
        predefinedParameter();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredefinedParameterContext ------------------------------------------------------------------

GQLParser::PredefinedParameterContext::PredefinedParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::PredefinedParameterContext::CURRENT_USER() {
  return getToken(GQLParser::CURRENT_USER, 0);
}


size_t GQLParser::PredefinedParameterContext::getRuleIndex() const {
  return GQLParser::RulePredefinedParameter;
}


std::any GQLParser::PredefinedParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPredefinedParameter(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PredefinedParameterContext* GQLParser::predefinedParameter() {
  PredefinedParameterContext *_localctx = _tracker.createInstance<PredefinedParameterContext>(_ctx, getState());
  enterRule(_localctx, 930, GQLParser::RulePredefinedParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3840);
    match(GQLParser::CURRENT_USER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

GQLParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::ExpressionContext::getRuleIndex() const {
  return GQLParser::RuleExpression;
}

void GQLParser::ExpressionContext::copyFrom(ExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- GqlPredicateExpressionContext ------------------------------------------------------------------

GQLParser::ExpressionPredicateContext* GQLParser::GqlPredicateExpressionContext::expressionPredicate() {
  return getRuleContext<GQLParser::ExpressionPredicateContext>(0);
}

GQLParser::GqlPredicateExpressionContext::GqlPredicateExpressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlPredicateExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlPredicateExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlNotExpressionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlNotExpressionContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

GQLParser::ExpressionContext* GQLParser::GqlNotExpressionContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}

GQLParser::GqlNotExpressionContext::GqlNotExpressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlNotExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlNotExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlLogicalXorExpressionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlLogicalXorExpressionContext::XOR() {
  return getToken(GQLParser::XOR, 0);
}

std::vector<GQLParser::ExpressionContext *> GQLParser::GqlLogicalXorExpressionContext::expression() {
  return getRuleContexts<GQLParser::ExpressionContext>();
}

GQLParser::ExpressionContext* GQLParser::GqlLogicalXorExpressionContext::expression(size_t i) {
  return getRuleContext<GQLParser::ExpressionContext>(i);
}

GQLParser::GqlLogicalXorExpressionContext::GqlLogicalXorExpressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlLogicalXorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlLogicalXorExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlLogicalOrExpressionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlLogicalOrExpressionContext::OR() {
  return getToken(GQLParser::OR, 0);
}

std::vector<GQLParser::ExpressionContext *> GQLParser::GqlLogicalOrExpressionContext::expression() {
  return getRuleContexts<GQLParser::ExpressionContext>();
}

GQLParser::ExpressionContext* GQLParser::GqlLogicalOrExpressionContext::expression(size_t i) {
  return getRuleContext<GQLParser::ExpressionContext>(i);
}

GQLParser::GqlLogicalOrExpressionContext::GqlLogicalOrExpressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlLogicalOrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlLogicalOrExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlLogicalAndExpressionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlLogicalAndExpressionContext::AND() {
  return getToken(GQLParser::AND, 0);
}

std::vector<GQLParser::ExpressionContext *> GQLParser::GqlLogicalAndExpressionContext::expression() {
  return getRuleContexts<GQLParser::ExpressionContext>();
}

GQLParser::ExpressionContext* GQLParser::GqlLogicalAndExpressionContext::expression(size_t i) {
  return getRuleContext<GQLParser::ExpressionContext>(i);
}

GQLParser::GqlLogicalAndExpressionContext::GqlLogicalAndExpressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlLogicalAndExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlLogicalAndExpression(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ExpressionContext* GQLParser::expression() {
   return expression(0);
}

GQLParser::ExpressionContext* GQLParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GQLParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  GQLParser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 932;
  enterRecursionRule(_localctx, 932, GQLParser::RuleExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3846);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 440, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<GqlNotExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(3843);
      match(GQLParser::NOT);
      setState(3844);
      expression(5);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<GqlPredicateExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3845);
      expressionPredicate(0);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(3859);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 442, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3857);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 441, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<GqlLogicalAndExpressionContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->lhs = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(3848);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(3849);
          match(GQLParser::AND);
          setState(3850);
          antlrcpp::downCast<GqlLogicalAndExpressionContext *>(_localctx)->rhs = expression(5);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<GqlLogicalXorExpressionContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->lhs = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(3851);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(3852);
          match(GQLParser::XOR);
          setState(3853);
          antlrcpp::downCast<GqlLogicalXorExpressionContext *>(_localctx)->rhs = expression(4);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<GqlLogicalOrExpressionContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->lhs = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(3854);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(3855);
          match(GQLParser::OR);
          setState(3856);
          antlrcpp::downCast<GqlLogicalOrExpressionContext *>(_localctx)->rhs = expression(3);
          break;
        }

        default:
          break;
        } 
      }
      setState(3861);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 442, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExpressionPredicateContext ------------------------------------------------------------------

GQLParser::ExpressionPredicateContext::ExpressionPredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::ExpressionPredicateContext::getRuleIndex() const {
  return GQLParser::RuleExpressionPredicate;
}

void GQLParser::ExpressionPredicateContext::copyFrom(ExpressionPredicateContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- GqlAtomExpressionContext ------------------------------------------------------------------

GQLParser::ExpressionAtomContext* GQLParser::GqlAtomExpressionContext::expressionAtom() {
  return getRuleContext<GQLParser::ExpressionAtomContext>(0);
}

GQLParser::GqlAtomExpressionContext::GqlAtomExpressionContext(ExpressionPredicateContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlAtomExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlAtomExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlNormalizedExpressionContext ------------------------------------------------------------------

GQLParser::ExpressionPredicateContext* GQLParser::GqlNormalizedExpressionContext::expressionPredicate() {
  return getRuleContext<GQLParser::ExpressionPredicateContext>(0);
}

GQLParser::NormalizedPredicateCondContext* GQLParser::GqlNormalizedExpressionContext::normalizedPredicateCond() {
  return getRuleContext<GQLParser::NormalizedPredicateCondContext>(0);
}

GQLParser::GqlNormalizedExpressionContext::GqlNormalizedExpressionContext(ExpressionPredicateContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlNormalizedExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlNormalizedExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlSameExpressionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlSameExpressionContext::SAME() {
  return getToken(GQLParser::SAME, 0);
}

tree::TerminalNode* GQLParser::GqlSameExpressionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

std::vector<GQLParser::ElementVariableReferenceContext *> GQLParser::GqlSameExpressionContext::elementVariableReference() {
  return getRuleContexts<GQLParser::ElementVariableReferenceContext>();
}

GQLParser::ElementVariableReferenceContext* GQLParser::GqlSameExpressionContext::elementVariableReference(size_t i) {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(i);
}

tree::TerminalNode* GQLParser::GqlSameExpressionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> GQLParser::GqlSameExpressionContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::GqlSameExpressionContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}

GQLParser::GqlSameExpressionContext::GqlSameExpressionContext(ExpressionPredicateContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlSameExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlSameExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlDirectedExpressionContext ------------------------------------------------------------------

GQLParser::ElementVariableReferenceContext* GQLParser::GqlDirectedExpressionContext::elementVariableReference() {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(0);
}

GQLParser::DirectedPredicateCondContext* GQLParser::GqlDirectedExpressionContext::directedPredicateCond() {
  return getRuleContext<GQLParser::DirectedPredicateCondContext>(0);
}

GQLParser::GqlDirectedExpressionContext::GqlDirectedExpressionContext(ExpressionPredicateContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlDirectedExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlDirectedExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlBooleanTestExpressionContext ------------------------------------------------------------------

GQLParser::ExpressionPredicateContext* GQLParser::GqlBooleanTestExpressionContext::expressionPredicate() {
  return getRuleContext<GQLParser::ExpressionPredicateContext>(0);
}

tree::TerminalNode* GQLParser::GqlBooleanTestExpressionContext::IS() {
  return getToken(GQLParser::IS, 0);
}

GQLParser::TruthValueContext* GQLParser::GqlBooleanTestExpressionContext::truthValue() {
  return getRuleContext<GQLParser::TruthValueContext>(0);
}

tree::TerminalNode* GQLParser::GqlBooleanTestExpressionContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

GQLParser::GqlBooleanTestExpressionContext::GqlBooleanTestExpressionContext(ExpressionPredicateContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlBooleanTestExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlBooleanTestExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlGraphRefValueExpressionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlGraphRefValueExpressionContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

GQLParser::GraphExpressionContext* GQLParser::GqlGraphRefValueExpressionContext::graphExpression() {
  return getRuleContext<GQLParser::GraphExpressionContext>(0);
}

tree::TerminalNode* GQLParser::GqlGraphRefValueExpressionContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

GQLParser::GqlGraphRefValueExpressionContext::GqlGraphRefValueExpressionContext(ExpressionPredicateContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlGraphRefValueExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlGraphRefValueExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlAllDifferentExpressionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlAllDifferentExpressionContext::ALL_DIFFERENT() {
  return getToken(GQLParser::ALL_DIFFERENT, 0);
}

tree::TerminalNode* GQLParser::GqlAllDifferentExpressionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

std::vector<GQLParser::ElementVariableReferenceContext *> GQLParser::GqlAllDifferentExpressionContext::elementVariableReference() {
  return getRuleContexts<GQLParser::ElementVariableReferenceContext>();
}

GQLParser::ElementVariableReferenceContext* GQLParser::GqlAllDifferentExpressionContext::elementVariableReference(size_t i) {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(i);
}

tree::TerminalNode* GQLParser::GqlAllDifferentExpressionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> GQLParser::GqlAllDifferentExpressionContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::GqlAllDifferentExpressionContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}

GQLParser::GqlAllDifferentExpressionContext::GqlAllDifferentExpressionContext(ExpressionPredicateContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlAllDifferentExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlAllDifferentExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlExistsExpressionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlExistsExpressionContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}

tree::TerminalNode* GQLParser::GqlExistsExpressionContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

GQLParser::GraphPatternContext* GQLParser::GqlExistsExpressionContext::graphPattern() {
  return getRuleContext<GQLParser::GraphPatternContext>(0);
}

tree::TerminalNode* GQLParser::GqlExistsExpressionContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}

tree::TerminalNode* GQLParser::GqlExistsExpressionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::GqlExistsExpressionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::MatchStatementBlockContext* GQLParser::GqlExistsExpressionContext::matchStatementBlock() {
  return getRuleContext<GQLParser::MatchStatementBlockContext>(0);
}

GQLParser::NestedQuerySpecificationContext* GQLParser::GqlExistsExpressionContext::nestedQuerySpecification() {
  return getRuleContext<GQLParser::NestedQuerySpecificationContext>(0);
}

GQLParser::GqlExistsExpressionContext::GqlExistsExpressionContext(ExpressionPredicateContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlExistsExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlExistsExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlLetExpressionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlLetExpressionContext::LET() {
  return getToken(GQLParser::LET, 0);
}

GQLParser::LetVariableDefinitionListContext* GQLParser::GqlLetExpressionContext::letVariableDefinitionList() {
  return getRuleContext<GQLParser::LetVariableDefinitionListContext>(0);
}

tree::TerminalNode* GQLParser::GqlLetExpressionContext::IN() {
  return getToken(GQLParser::IN, 0);
}

GQLParser::ExpressionContext* GQLParser::GqlLetExpressionContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}

tree::TerminalNode* GQLParser::GqlLetExpressionContext::END() {
  return getToken(GQLParser::END, 0);
}

GQLParser::GqlLetExpressionContext::GqlLetExpressionContext(ExpressionPredicateContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlLetExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlLetExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlComparisonExpressionContext ------------------------------------------------------------------

GQLParser::CompOpContext* GQLParser::GqlComparisonExpressionContext::compOp() {
  return getRuleContext<GQLParser::CompOpContext>(0);
}

std::vector<GQLParser::ExpressionPredicateContext *> GQLParser::GqlComparisonExpressionContext::expressionPredicate() {
  return getRuleContexts<GQLParser::ExpressionPredicateContext>();
}

GQLParser::ExpressionPredicateContext* GQLParser::GqlComparisonExpressionContext::expressionPredicate(size_t i) {
  return getRuleContext<GQLParser::ExpressionPredicateContext>(i);
}

GQLParser::GqlComparisonExpressionContext::GqlComparisonExpressionContext(ExpressionPredicateContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlComparisonExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlComparisonExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlLabeledExpressionContext ------------------------------------------------------------------

GQLParser::ElementVariableReferenceContext* GQLParser::GqlLabeledExpressionContext::elementVariableReference() {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(0);
}

GQLParser::LabeledPredicateCondContext* GQLParser::GqlLabeledExpressionContext::labeledPredicateCond() {
  return getRuleContext<GQLParser::LabeledPredicateCondContext>(0);
}

GQLParser::GqlLabeledExpressionContext::GqlLabeledExpressionContext(ExpressionPredicateContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlLabeledExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlLabeledExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlPropertyExistExpressionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlPropertyExistExpressionContext::PROPERTY_EXISTS() {
  return getToken(GQLParser::PROPERTY_EXISTS, 0);
}

tree::TerminalNode* GQLParser::GqlPropertyExistExpressionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ElementVariableReferenceContext* GQLParser::GqlPropertyExistExpressionContext::elementVariableReference() {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(0);
}

tree::TerminalNode* GQLParser::GqlPropertyExistExpressionContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::PropertyNameContext* GQLParser::GqlPropertyExistExpressionContext::propertyName() {
  return getRuleContext<GQLParser::PropertyNameContext>(0);
}

tree::TerminalNode* GQLParser::GqlPropertyExistExpressionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::GqlPropertyExistExpressionContext::GqlPropertyExistExpressionContext(ExpressionPredicateContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlPropertyExistExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlPropertyExistExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlNullExpressionContext ------------------------------------------------------------------

GQLParser::ExpressionPredicateContext* GQLParser::GqlNullExpressionContext::expressionPredicate() {
  return getRuleContext<GQLParser::ExpressionPredicateContext>(0);
}

GQLParser::NullPredicateCondContext* GQLParser::GqlNullExpressionContext::nullPredicateCond() {
  return getRuleContext<GQLParser::NullPredicateCondContext>(0);
}

GQLParser::GqlNullExpressionContext::GqlNullExpressionContext(ExpressionPredicateContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlNullExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlNullExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlSourceDestinationExpressionContext ------------------------------------------------------------------

GQLParser::ElementVariableReferenceContext* GQLParser::GqlSourceDestinationExpressionContext::elementVariableReference() {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(0);
}

GQLParser::SourceDestinationPredicateCondContext* GQLParser::GqlSourceDestinationExpressionContext::sourceDestinationPredicateCond() {
  return getRuleContext<GQLParser::SourceDestinationPredicateCondContext>(0);
}

GQLParser::GqlSourceDestinationExpressionContext::GqlSourceDestinationExpressionContext(ExpressionPredicateContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlSourceDestinationExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlSourceDestinationExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlBindingTableValueExpressionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlBindingTableValueExpressionContext::TABLE() {
  return getToken(GQLParser::TABLE, 0);
}

GQLParser::BindingTableExpressionContext* GQLParser::GqlBindingTableValueExpressionContext::bindingTableExpression() {
  return getRuleContext<GQLParser::BindingTableExpressionContext>(0);
}

tree::TerminalNode* GQLParser::GqlBindingTableValueExpressionContext::BINDING() {
  return getToken(GQLParser::BINDING, 0);
}

GQLParser::GqlBindingTableValueExpressionContext::GqlBindingTableValueExpressionContext(ExpressionPredicateContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlBindingTableValueExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlBindingTableValueExpression(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ExpressionPredicateContext* GQLParser::expressionPredicate() {
   return expressionPredicate(0);
}

GQLParser::ExpressionPredicateContext* GQLParser::expressionPredicate(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GQLParser::ExpressionPredicateContext *_localctx = _tracker.createInstance<ExpressionPredicateContext>(_ctx, parentState);
  GQLParser::ExpressionPredicateContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 934;
  enterRecursionRule(_localctx, 934, GQLParser::RuleExpressionPredicate, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3938);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 448, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<GqlExistsExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(3863);
      match(GQLParser::EXISTS);
      setState(3881);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 443, _ctx)) {
      case 1: {
        setState(3864);
        match(GQLParser::LEFT_BRACE);
        setState(3865);
        graphPattern();
        setState(3866);
        match(GQLParser::RIGHT_BRACE);
        break;
      }

      case 2: {
        setState(3868);
        match(GQLParser::LEFT_PAREN);
        setState(3869);
        graphPattern();
        setState(3870);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

      case 3: {
        setState(3872);
        match(GQLParser::LEFT_BRACE);
        setState(3873);
        matchStatementBlock();
        setState(3874);
        match(GQLParser::RIGHT_BRACE);
        break;
      }

      case 4: {
        setState(3876);
        match(GQLParser::LEFT_PAREN);
        setState(3877);
        matchStatementBlock();
        setState(3878);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

      case 5: {
        setState(3880);
        nestedQuerySpecification();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<GqlDirectedExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3883);
      elementVariableReference();
      setState(3884);
      directedPredicateCond();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<GqlLabeledExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3886);
      elementVariableReference();
      setState(3887);
      labeledPredicateCond();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<GqlSourceDestinationExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3889);
      elementVariableReference();
      setState(3890);
      sourceDestinationPredicateCond();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<GqlAllDifferentExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3892);
      match(GQLParser::ALL_DIFFERENT);
      setState(3893);
      match(GQLParser::LEFT_PAREN);
      setState(3894);
      elementVariableReference();
      setState(3897); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(3895);
        match(GQLParser::COMMA);
        setState(3896);
        elementVariableReference();
        setState(3899); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == GQLParser::COMMA);
      setState(3901);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<GqlSameExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3903);
      match(GQLParser::SAME);
      setState(3904);
      match(GQLParser::LEFT_PAREN);
      setState(3905);
      elementVariableReference();
      setState(3908); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(3906);
        match(GQLParser::COMMA);
        setState(3907);
        elementVariableReference();
        setState(3910); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == GQLParser::COMMA);
      setState(3912);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<GqlPropertyExistExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3914);
      match(GQLParser::PROPERTY_EXISTS);
      setState(3915);
      match(GQLParser::LEFT_PAREN);
      setState(3916);
      elementVariableReference();
      setState(3917);
      match(GQLParser::COMMA);
      setState(3918);
      propertyName();
      setState(3919);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<GqlGraphRefValueExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3922);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::PROPERTY) {
        setState(3921);
        match(GQLParser::PROPERTY);
      }
      setState(3924);
      match(GQLParser::GRAPH);
      setState(3925);
      graphExpression();
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<GqlBindingTableValueExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3927);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::BINDING) {
        setState(3926);
        match(GQLParser::BINDING);
      }
      setState(3929);
      match(GQLParser::TABLE);
      setState(3930);
      bindingTableExpression();
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<GqlLetExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3931);
      match(GQLParser::LET);
      setState(3932);
      letVariableDefinitionList();
      setState(3933);
      match(GQLParser::IN);
      setState(3934);
      expression(0);
      setState(3935);
      match(GQLParser::END);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<GqlAtomExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3937);
      expressionAtom(0);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(3956);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 451, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3954);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 450, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<GqlComparisonExpressionContext>(_tracker.createInstance<ExpressionPredicateContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->lhs = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpressionPredicate);
          setState(3940);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
          setState(3941);
          compOp();
          setState(3942);
          antlrcpp::downCast<GqlComparisonExpressionContext *>(_localctx)->rhs = expressionPredicate(15);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<GqlBooleanTestExpressionContext>(_tracker.createInstance<ExpressionPredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpressionPredicate);
          setState(3944);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
          setState(3945);
          match(GQLParser::IS);
          setState(3947);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == GQLParser::NOT) {
            setState(3946);
            match(GQLParser::NOT);
          }
          setState(3949);
          truthValue();
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<GqlNullExpressionContext>(_tracker.createInstance<ExpressionPredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpressionPredicate);
          setState(3950);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(3951);
          nullPredicateCond();
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<GqlNormalizedExpressionContext>(_tracker.createInstance<ExpressionPredicateContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpressionPredicate);
          setState(3952);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(3953);
          normalizedPredicateCond();
          break;
        }

        default:
          break;
        } 
      }
      setState(3958);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 451, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExpressionAtomContext ------------------------------------------------------------------

GQLParser::ExpressionAtomContext::ExpressionAtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::ExpressionAtomContext::getRuleIndex() const {
  return GQLParser::RuleExpressionAtom;
}

void GQLParser::ExpressionAtomContext::copyFrom(ExpressionAtomContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- GqlParameterExpressionContext ------------------------------------------------------------------

GQLParser::ParameterValueSpecificationContext* GQLParser::GqlParameterExpressionContext::parameterValueSpecification() {
  return getRuleContext<GQLParser::ParameterValueSpecificationContext>(0);
}

GQLParser::GqlParameterExpressionContext::GqlParameterExpressionContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlParameterExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlParameterExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlUnaryExpressionContext ------------------------------------------------------------------

GQLParser::UnaryOperatorContext* GQLParser::GqlUnaryExpressionContext::unaryOperator() {
  return getRuleContext<GQLParser::UnaryOperatorContext>(0);
}

GQLParser::ExpressionAtomContext* GQLParser::GqlUnaryExpressionContext::expressionAtom() {
  return getRuleContext<GQLParser::ExpressionAtomContext>(0);
}

GQLParser::GqlUnaryExpressionContext::GqlUnaryExpressionContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlUnaryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlUnaryExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlPropertyReferenceContext ------------------------------------------------------------------

GQLParser::ExpressionAtomContext* GQLParser::GqlPropertyReferenceContext::expressionAtom() {
  return getRuleContext<GQLParser::ExpressionAtomContext>(0);
}

tree::TerminalNode* GQLParser::GqlPropertyReferenceContext::PERIOD() {
  return getToken(GQLParser::PERIOD, 0);
}

GQLParser::PropertyNameContext* GQLParser::GqlPropertyReferenceContext::propertyName() {
  return getRuleContext<GQLParser::PropertyNameContext>(0);
}

GQLParser::GqlPropertyReferenceContext::GqlPropertyReferenceContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlPropertyReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlPropertyReference(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlHighArithmeticExpressionContext ------------------------------------------------------------------

std::vector<GQLParser::ExpressionAtomContext *> GQLParser::GqlHighArithmeticExpressionContext::expressionAtom() {
  return getRuleContexts<GQLParser::ExpressionAtomContext>();
}

GQLParser::ExpressionAtomContext* GQLParser::GqlHighArithmeticExpressionContext::expressionAtom(size_t i) {
  return getRuleContext<GQLParser::ExpressionAtomContext>(i);
}

tree::TerminalNode* GQLParser::GqlHighArithmeticExpressionContext::ASTERISK() {
  return getToken(GQLParser::ASTERISK, 0);
}

tree::TerminalNode* GQLParser::GqlHighArithmeticExpressionContext::SOLIDUS() {
  return getToken(GQLParser::SOLIDUS, 0);
}

GQLParser::GqlHighArithmeticExpressionContext::GqlHighArithmeticExpressionContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlHighArithmeticExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlHighArithmeticExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlValueQueryExpressionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlValueQueryExpressionContext::VALUE() {
  return getToken(GQLParser::VALUE, 0);
}

GQLParser::NestedQuerySpecificationContext* GQLParser::GqlValueQueryExpressionContext::nestedQuerySpecification() {
  return getRuleContext<GQLParser::NestedQuerySpecificationContext>(0);
}

GQLParser::GqlValueQueryExpressionContext::GqlValueQueryExpressionContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlValueQueryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlValueQueryExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlLiteralExpressionContext ------------------------------------------------------------------

GQLParser::UnsignedLiteralContext* GQLParser::GqlLiteralExpressionContext::unsignedLiteral() {
  return getRuleContext<GQLParser::UnsignedLiteralContext>(0);
}

GQLParser::GqlLiteralExpressionContext::GqlLiteralExpressionContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlLiteralExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlLiteralExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlCollectionExpressionContext ------------------------------------------------------------------

GQLParser::CollectionValueConstructorContext* GQLParser::GqlCollectionExpressionContext::collectionValueConstructor() {
  return getRuleContext<GQLParser::CollectionValueConstructorContext>(0);
}

GQLParser::GqlCollectionExpressionContext::GqlCollectionExpressionContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlCollectionExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlCollectionExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlConcatenationExpressionContext ------------------------------------------------------------------

std::vector<GQLParser::ExpressionAtomContext *> GQLParser::GqlConcatenationExpressionContext::expressionAtom() {
  return getRuleContexts<GQLParser::ExpressionAtomContext>();
}

GQLParser::ExpressionAtomContext* GQLParser::GqlConcatenationExpressionContext::expressionAtom(size_t i) {
  return getRuleContext<GQLParser::ExpressionAtomContext>(i);
}

tree::TerminalNode* GQLParser::GqlConcatenationExpressionContext::CONCATENATION_OPERATOR() {
  return getToken(GQLParser::CONCATENATION_OPERATOR, 0);
}

GQLParser::GqlConcatenationExpressionContext::GqlConcatenationExpressionContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlConcatenationExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlConcatenationExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlLowArithmeticExpressionContext ------------------------------------------------------------------

std::vector<GQLParser::ExpressionAtomContext *> GQLParser::GqlLowArithmeticExpressionContext::expressionAtom() {
  return getRuleContexts<GQLParser::ExpressionAtomContext>();
}

GQLParser::ExpressionAtomContext* GQLParser::GqlLowArithmeticExpressionContext::expressionAtom(size_t i) {
  return getRuleContext<GQLParser::ExpressionAtomContext>(i);
}

tree::TerminalNode* GQLParser::GqlLowArithmeticExpressionContext::PLUS_SIGN() {
  return getToken(GQLParser::PLUS_SIGN, 0);
}

tree::TerminalNode* GQLParser::GqlLowArithmeticExpressionContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}

GQLParser::GqlLowArithmeticExpressionContext::GqlLowArithmeticExpressionContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlLowArithmeticExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlLowArithmeticExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlParenthesizedExpressionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlParenthesizedExpressionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ExpressionContext* GQLParser::GqlParenthesizedExpressionContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}

tree::TerminalNode* GQLParser::GqlParenthesizedExpressionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::GqlParenthesizedExpressionContext::GqlParenthesizedExpressionContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlParenthesizedExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlParenthesizedExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlFunctionExpressionContext ------------------------------------------------------------------

GQLParser::FunctionCallContext* GQLParser::GqlFunctionExpressionContext::functionCall() {
  return getRuleContext<GQLParser::FunctionCallContext>(0);
}

GQLParser::GqlFunctionExpressionContext::GqlFunctionExpressionContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlFunctionExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlFunctionExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlVariableExpressionContext ------------------------------------------------------------------

GQLParser::VariableContext* GQLParser::GqlVariableExpressionContext::variable() {
  return getRuleContext<GQLParser::VariableContext>(0);
}

GQLParser::GqlVariableExpressionContext::GqlVariableExpressionContext(ExpressionAtomContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlVariableExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlVariableExpression(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ExpressionAtomContext* GQLParser::expressionAtom() {
   return expressionAtom(0);
}

GQLParser::ExpressionAtomContext* GQLParser::expressionAtom(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GQLParser::ExpressionAtomContext *_localctx = _tracker.createInstance<ExpressionAtomContext>(_ctx, parentState);
  GQLParser::ExpressionAtomContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 936;
  enterRecursionRule(_localctx, 936, GQLParser::RuleExpressionAtom, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3974);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 452, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<GqlParenthesizedExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(3960);
      match(GQLParser::LEFT_PAREN);
      setState(3961);
      expression(0);
      setState(3962);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<GqlLiteralExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3964);
      unsignedLiteral();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<GqlUnaryExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3965);
      unaryOperator();
      setState(3966);
      expressionAtom(8);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<GqlFunctionExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3968);
      functionCall();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<GqlCollectionExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3969);
      collectionValueConstructor();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<GqlValueQueryExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3970);
      match(GQLParser::VALUE);
      setState(3971);
      nestedQuerySpecification();
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<GqlParameterExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3972);
      parameterValueSpecification();
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<GqlVariableExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3973);
      variable();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(3990);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 454, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3988);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 453, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<GqlConcatenationExpressionContext>(_tracker.createInstance<ExpressionAtomContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpressionAtom);
          setState(3976);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(3977);
          match(GQLParser::CONCATENATION_OPERATOR);
          setState(3978);
          expressionAtom(11);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<GqlHighArithmeticExpressionContext>(_tracker.createInstance<ExpressionAtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->lhs = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpressionAtom);
          setState(3979);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(3980);
          antlrcpp::downCast<GqlHighArithmeticExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GQLParser::ASTERISK

          || _la == GQLParser::SOLIDUS)) {
            antlrcpp::downCast<GqlHighArithmeticExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(3981);
          antlrcpp::downCast<GqlHighArithmeticExpressionContext *>(_localctx)->rhs = expressionAtom(5);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<GqlLowArithmeticExpressionContext>(_tracker.createInstance<ExpressionAtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->lhs = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpressionAtom);
          setState(3982);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(3983);
          antlrcpp::downCast<GqlLowArithmeticExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GQLParser::MINUS_SIGN

          || _la == GQLParser::PLUS_SIGN)) {
            antlrcpp::downCast<GqlLowArithmeticExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(3984);
          antlrcpp::downCast<GqlLowArithmeticExpressionContext *>(_localctx)->rhs = expressionAtom(4);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<GqlPropertyReferenceContext>(_tracker.createInstance<ExpressionAtomContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpressionAtom);
          setState(3985);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(3986);
          match(GQLParser::PERIOD);
          setState(3987);
          propertyName();
          break;
        }

        default:
          break;
        } 
      }
      setState(3992);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 454, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TruthValueContext ------------------------------------------------------------------

GQLParser::TruthValueContext::TruthValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TruthValueContext::K_TRUE() {
  return getToken(GQLParser::K_TRUE, 0);
}

tree::TerminalNode* GQLParser::TruthValueContext::K_FALSE() {
  return getToken(GQLParser::K_FALSE, 0);
}

tree::TerminalNode* GQLParser::TruthValueContext::UNKNOWN() {
  return getToken(GQLParser::UNKNOWN, 0);
}


size_t GQLParser::TruthValueContext::getRuleIndex() const {
  return GQLParser::RuleTruthValue;
}


std::any GQLParser::TruthValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTruthValue(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TruthValueContext* GQLParser::truthValue() {
  TruthValueContext *_localctx = _tracker.createInstance<TruthValueContext>(_ctx, getState());
  enterRule(_localctx, 938, GQLParser::RuleTruthValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3993);
    _la = _input->LA(1);
    if (!(_la == GQLParser::K_FALSE || _la == GQLParser::K_TRUE

    || _la == GQLParser::UNKNOWN)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryOperatorContext ------------------------------------------------------------------

GQLParser::UnaryOperatorContext::UnaryOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::UnaryOperatorContext::EXCLAMATION_MARK() {
  return getToken(GQLParser::EXCLAMATION_MARK, 0);
}

tree::TerminalNode* GQLParser::UnaryOperatorContext::PLUS_SIGN() {
  return getToken(GQLParser::PLUS_SIGN, 0);
}

tree::TerminalNode* GQLParser::UnaryOperatorContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}


size_t GQLParser::UnaryOperatorContext::getRuleIndex() const {
  return GQLParser::RuleUnaryOperator;
}


std::any GQLParser::UnaryOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitUnaryOperator(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::UnaryOperatorContext* GQLParser::unaryOperator() {
  UnaryOperatorContext *_localctx = _tracker.createInstance<UnaryOperatorContext>(_ctx, getState());
  enterRule(_localctx, 940, GQLParser::RuleUnaryOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3995);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 147712) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionCallContext ------------------------------------------------------------------

GQLParser::FunctionCallContext::FunctionCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NumericFunctionContext* GQLParser::FunctionCallContext::numericFunction() {
  return getRuleContext<GQLParser::NumericFunctionContext>(0);
}

GQLParser::AggregateFunctionContext* GQLParser::FunctionCallContext::aggregateFunction() {
  return getRuleContext<GQLParser::AggregateFunctionContext>(0);
}

GQLParser::CaseFunctionContext* GQLParser::FunctionCallContext::caseFunction() {
  return getRuleContext<GQLParser::CaseFunctionContext>(0);
}

GQLParser::CastFunctionContext* GQLParser::FunctionCallContext::castFunction() {
  return getRuleContext<GQLParser::CastFunctionContext>(0);
}

GQLParser::ElementIdFunctionContext* GQLParser::FunctionCallContext::elementIdFunction() {
  return getRuleContext<GQLParser::ElementIdFunctionContext>(0);
}

GQLParser::DatetimeValueFunctionContext* GQLParser::FunctionCallContext::datetimeValueFunction() {
  return getRuleContext<GQLParser::DatetimeValueFunctionContext>(0);
}

GQLParser::DurationFunctionContext* GQLParser::FunctionCallContext::durationFunction() {
  return getRuleContext<GQLParser::DurationFunctionContext>(0);
}

GQLParser::ListFunctionContext* GQLParser::FunctionCallContext::listFunction() {
  return getRuleContext<GQLParser::ListFunctionContext>(0);
}

GQLParser::StringFunctionContext* GQLParser::FunctionCallContext::stringFunction() {
  return getRuleContext<GQLParser::StringFunctionContext>(0);
}


size_t GQLParser::FunctionCallContext::getRuleIndex() const {
  return GQLParser::RuleFunctionCall;
}


std::any GQLParser::FunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFunctionCall(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FunctionCallContext* GQLParser::functionCall() {
  FunctionCallContext *_localctx = _tracker.createInstance<FunctionCallContext>(_ctx, getState());
  enterRule(_localctx, 942, GQLParser::RuleFunctionCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4006);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 455, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3997);
      numericFunction();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3998);
      aggregateFunction();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3999);
      caseFunction();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4000);
      castFunction();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4001);
      elementIdFunction();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(4002);
      datetimeValueFunction();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(4003);
      durationFunction();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(4004);
      listFunction();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(4005);
      stringFunction();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericFunctionContext ------------------------------------------------------------------

GQLParser::NumericFunctionContext::NumericFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::NumericFunctionContext::getRuleIndex() const {
  return GQLParser::RuleNumericFunction;
}

void GQLParser::NumericFunctionContext::copyFrom(NumericFunctionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- GqlTwoArgScalarFunctionContext ------------------------------------------------------------------

GQLParser::TwoArgNumericFunctionNameContext* GQLParser::GqlTwoArgScalarFunctionContext::twoArgNumericFunctionName() {
  return getRuleContext<GQLParser::TwoArgNumericFunctionNameContext>(0);
}

tree::TerminalNode* GQLParser::GqlTwoArgScalarFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

std::vector<GQLParser::FunctionParameterContext *> GQLParser::GqlTwoArgScalarFunctionContext::functionParameter() {
  return getRuleContexts<GQLParser::FunctionParameterContext>();
}

GQLParser::FunctionParameterContext* GQLParser::GqlTwoArgScalarFunctionContext::functionParameter(size_t i) {
  return getRuleContext<GQLParser::FunctionParameterContext>(i);
}

tree::TerminalNode* GQLParser::GqlTwoArgScalarFunctionContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

tree::TerminalNode* GQLParser::GqlTwoArgScalarFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::GqlTwoArgScalarFunctionContext::GqlTwoArgScalarFunctionContext(NumericFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlTwoArgScalarFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlTwoArgScalarFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlOneArgScalarFunctionContext ------------------------------------------------------------------

GQLParser::OneArgNumericFunctionNameContext* GQLParser::GqlOneArgScalarFunctionContext::oneArgNumericFunctionName() {
  return getRuleContext<GQLParser::OneArgNumericFunctionNameContext>(0);
}

tree::TerminalNode* GQLParser::GqlOneArgScalarFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::FunctionParameterContext* GQLParser::GqlOneArgScalarFunctionContext::functionParameter() {
  return getRuleContext<GQLParser::FunctionParameterContext>(0);
}

tree::TerminalNode* GQLParser::GqlOneArgScalarFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::GqlOneArgScalarFunctionContext::GqlOneArgScalarFunctionContext(NumericFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlOneArgScalarFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlOneArgScalarFunction(this);
  else
    return visitor->visitChildren(this);
}
GQLParser::NumericFunctionContext* GQLParser::numericFunction() {
  NumericFunctionContext *_localctx = _tracker.createInstance<NumericFunctionContext>(_ctx, getState());
  enterRule(_localctx, 944, GQLParser::RuleNumericFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4020);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ASIN:
      case GQLParser::ATAN:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::DEGREES:
      case GQLParser::EXP:
      case GQLParser::FLOOR:
      case GQLParser::LN:
      case GQLParser::LOG10:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::RADIANS:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SQRT:
      case GQLParser::TAN:
      case GQLParser::TANH: {
        _localctx = _tracker.createInstance<GQLParser::GqlOneArgScalarFunctionContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(4008);
        oneArgNumericFunctionName();
        setState(4009);
        match(GQLParser::LEFT_PAREN);
        setState(4010);
        functionParameter();
        setState(4011);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

      case GQLParser::LOG:
      case GQLParser::MOD:
      case GQLParser::POWER: {
        _localctx = _tracker.createInstance<GQLParser::GqlTwoArgScalarFunctionContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(4013);
        twoArgNumericFunctionName();
        setState(4014);
        match(GQLParser::LEFT_PAREN);
        setState(4015);
        functionParameter();
        setState(4016);
        match(GQLParser::COMMA);
        setState(4017);
        functionParameter();
        setState(4018);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionParameterContext ------------------------------------------------------------------

GQLParser::FunctionParameterContext::FunctionParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnsignedLiteralContext* GQLParser::FunctionParameterContext::unsignedLiteral() {
  return getRuleContext<GQLParser::UnsignedLiteralContext>(0);
}

GQLParser::VariableContext* GQLParser::FunctionParameterContext::variable() {
  return getRuleContext<GQLParser::VariableContext>(0);
}

GQLParser::PropertyReferenceContext* GQLParser::FunctionParameterContext::propertyReference() {
  return getRuleContext<GQLParser::PropertyReferenceContext>(0);
}

GQLParser::FunctionCallContext* GQLParser::FunctionParameterContext::functionCall() {
  return getRuleContext<GQLParser::FunctionCallContext>(0);
}

GQLParser::ExpressionContext* GQLParser::FunctionParameterContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}


size_t GQLParser::FunctionParameterContext::getRuleIndex() const {
  return GQLParser::RuleFunctionParameter;
}


std::any GQLParser::FunctionParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitFunctionParameter(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FunctionParameterContext* GQLParser::functionParameter() {
  FunctionParameterContext *_localctx = _tracker.createInstance<FunctionParameterContext>(_ctx, getState());
  enterRule(_localctx, 946, GQLParser::RuleFunctionParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4027);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 457, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4022);
      unsignedLiteral();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4023);
      variable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4024);
      propertyReference();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4025);
      functionCall();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4026);
      expression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyReferenceContext ------------------------------------------------------------------

GQLParser::PropertyReferenceContext::PropertyReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::VariableContext* GQLParser::PropertyReferenceContext::variable() {
  return getRuleContext<GQLParser::VariableContext>(0);
}

tree::TerminalNode* GQLParser::PropertyReferenceContext::PERIOD() {
  return getToken(GQLParser::PERIOD, 0);
}

GQLParser::PropertyNameContext* GQLParser::PropertyReferenceContext::propertyName() {
  return getRuleContext<GQLParser::PropertyNameContext>(0);
}


size_t GQLParser::PropertyReferenceContext::getRuleIndex() const {
  return GQLParser::RulePropertyReference;
}


std::any GQLParser::PropertyReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPropertyReference(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PropertyReferenceContext* GQLParser::propertyReference() {
  PropertyReferenceContext *_localctx = _tracker.createInstance<PropertyReferenceContext>(_ctx, getState());
  enterRule(_localctx, 948, GQLParser::RulePropertyReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4029);
    variable();
    setState(4030);
    match(GQLParser::PERIOD);
    setState(4031);
    propertyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OneArgNumericFunctionNameContext ------------------------------------------------------------------

GQLParser::OneArgNumericFunctionNameContext::OneArgNumericFunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::CHAR_LENGTH() {
  return getToken(GQLParser::CHAR_LENGTH, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::CHARACTER_LENGTH() {
  return getToken(GQLParser::CHARACTER_LENGTH, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::BYTE_LENGTH() {
  return getToken(GQLParser::BYTE_LENGTH, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::OCTET_LENGTH() {
  return getToken(GQLParser::OCTET_LENGTH, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::PATH_LENGTH() {
  return getToken(GQLParser::PATH_LENGTH, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::ABS() {
  return getToken(GQLParser::ABS, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::SIN() {
  return getToken(GQLParser::SIN, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::COS() {
  return getToken(GQLParser::COS, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::TAN() {
  return getToken(GQLParser::TAN, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::COT() {
  return getToken(GQLParser::COT, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::SINH() {
  return getToken(GQLParser::SINH, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::COSH() {
  return getToken(GQLParser::COSH, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::TANH() {
  return getToken(GQLParser::TANH, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::ASIN() {
  return getToken(GQLParser::ASIN, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::ACOS() {
  return getToken(GQLParser::ACOS, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::ATAN() {
  return getToken(GQLParser::ATAN, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::DEGREES() {
  return getToken(GQLParser::DEGREES, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::RADIANS() {
  return getToken(GQLParser::RADIANS, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::LOG10() {
  return getToken(GQLParser::LOG10, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::LN() {
  return getToken(GQLParser::LN, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::EXP() {
  return getToken(GQLParser::EXP, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::SQRT() {
  return getToken(GQLParser::SQRT, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::FLOOR() {
  return getToken(GQLParser::FLOOR, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::CEIL() {
  return getToken(GQLParser::CEIL, 0);
}

tree::TerminalNode* GQLParser::OneArgNumericFunctionNameContext::CEILING() {
  return getToken(GQLParser::CEILING, 0);
}


size_t GQLParser::OneArgNumericFunctionNameContext::getRuleIndex() const {
  return GQLParser::RuleOneArgNumericFunctionName;
}


std::any GQLParser::OneArgNumericFunctionNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitOneArgNumericFunctionName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::OneArgNumericFunctionNameContext* GQLParser::oneArgNumericFunctionName() {
  OneArgNumericFunctionNameContext *_localctx = _tracker.createInstance<OneArgNumericFunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 950, GQLParser::RuleOneArgNumericFunctionName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4033);
    _la = _input->LA(1);
    if (!(((((_la - 28) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 28)) & 144130597378336771) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & 4683743612465317889) != 0) || ((((_la - 187) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 187)) & 108394254321074177) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TwoArgNumericFunctionNameContext ------------------------------------------------------------------

GQLParser::TwoArgNumericFunctionNameContext::TwoArgNumericFunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TwoArgNumericFunctionNameContext::MOD() {
  return getToken(GQLParser::MOD, 0);
}

tree::TerminalNode* GQLParser::TwoArgNumericFunctionNameContext::LOG() {
  return getToken(GQLParser::LOG, 0);
}

tree::TerminalNode* GQLParser::TwoArgNumericFunctionNameContext::POWER() {
  return getToken(GQLParser::POWER, 0);
}


size_t GQLParser::TwoArgNumericFunctionNameContext::getRuleIndex() const {
  return GQLParser::RuleTwoArgNumericFunctionName;
}


std::any GQLParser::TwoArgNumericFunctionNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTwoArgNumericFunctionName(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TwoArgNumericFunctionNameContext* GQLParser::twoArgNumericFunctionName() {
  TwoArgNumericFunctionNameContext *_localctx = _tracker.createInstance<TwoArgNumericFunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 952, GQLParser::RuleTwoArgNumericFunctionName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4035);
    _la = _input->LA(1);
    if (!(((((_la - 166) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 166)) & 549755814017) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringFunctionContext ------------------------------------------------------------------

GQLParser::StringFunctionContext::StringFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::StringFunctionContext::getRuleIndex() const {
  return GQLParser::RuleStringFunction;
}

void GQLParser::StringFunctionContext::copyFrom(StringFunctionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- GqlSubstringFunctionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlSubstringFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::GqlSubstringFunctionContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

tree::TerminalNode* GQLParser::GqlSubstringFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

std::vector<GQLParser::ExpressionAtomContext *> GQLParser::GqlSubstringFunctionContext::expressionAtom() {
  return getRuleContexts<GQLParser::ExpressionAtomContext>();
}

GQLParser::ExpressionAtomContext* GQLParser::GqlSubstringFunctionContext::expressionAtom(size_t i) {
  return getRuleContext<GQLParser::ExpressionAtomContext>(i);
}

tree::TerminalNode* GQLParser::GqlSubstringFunctionContext::LEFT() {
  return getToken(GQLParser::LEFT, 0);
}

tree::TerminalNode* GQLParser::GqlSubstringFunctionContext::RIGHT() {
  return getToken(GQLParser::RIGHT, 0);
}

GQLParser::GqlSubstringFunctionContext::GqlSubstringFunctionContext(StringFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlSubstringFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlSubstringFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlMultiTrimStringFunctionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlMultiTrimStringFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::GqlMultiTrimStringFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

std::vector<GQLParser::ExpressionAtomContext *> GQLParser::GqlMultiTrimStringFunctionContext::expressionAtom() {
  return getRuleContexts<GQLParser::ExpressionAtomContext>();
}

GQLParser::ExpressionAtomContext* GQLParser::GqlMultiTrimStringFunctionContext::expressionAtom(size_t i) {
  return getRuleContext<GQLParser::ExpressionAtomContext>(i);
}

tree::TerminalNode* GQLParser::GqlMultiTrimStringFunctionContext::BTRIM() {
  return getToken(GQLParser::BTRIM, 0);
}

tree::TerminalNode* GQLParser::GqlMultiTrimStringFunctionContext::LTRIM() {
  return getToken(GQLParser::LTRIM, 0);
}

tree::TerminalNode* GQLParser::GqlMultiTrimStringFunctionContext::RTRIM() {
  return getToken(GQLParser::RTRIM, 0);
}

tree::TerminalNode* GQLParser::GqlMultiTrimStringFunctionContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::GqlMultiTrimStringFunctionContext::GqlMultiTrimStringFunctionContext(StringFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlMultiTrimStringFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlMultiTrimStringFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlFoldStringFunctionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlFoldStringFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ExpressionAtomContext* GQLParser::GqlFoldStringFunctionContext::expressionAtom() {
  return getRuleContext<GQLParser::ExpressionAtomContext>(0);
}

tree::TerminalNode* GQLParser::GqlFoldStringFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::GqlFoldStringFunctionContext::UPPER() {
  return getToken(GQLParser::UPPER, 0);
}

tree::TerminalNode* GQLParser::GqlFoldStringFunctionContext::LOWER() {
  return getToken(GQLParser::LOWER, 0);
}

GQLParser::GqlFoldStringFunctionContext::GqlFoldStringFunctionContext(StringFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlFoldStringFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlFoldStringFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlSingleTrimStringFunctionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlSingleTrimStringFunctionContext::TRIM() {
  return getToken(GQLParser::TRIM, 0);
}

tree::TerminalNode* GQLParser::GqlSingleTrimStringFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::GqlSingleTrimStringFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

std::vector<GQLParser::ExpressionAtomContext *> GQLParser::GqlSingleTrimStringFunctionContext::expressionAtom() {
  return getRuleContexts<GQLParser::ExpressionAtomContext>();
}

GQLParser::ExpressionAtomContext* GQLParser::GqlSingleTrimStringFunctionContext::expressionAtom(size_t i) {
  return getRuleContext<GQLParser::ExpressionAtomContext>(i);
}

tree::TerminalNode* GQLParser::GqlSingleTrimStringFunctionContext::FROM() {
  return getToken(GQLParser::FROM, 0);
}

GQLParser::TrimSpecificationContext* GQLParser::GqlSingleTrimStringFunctionContext::trimSpecification() {
  return getRuleContext<GQLParser::TrimSpecificationContext>(0);
}

GQLParser::GqlSingleTrimStringFunctionContext::GqlSingleTrimStringFunctionContext(StringFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlSingleTrimStringFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlSingleTrimStringFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlNormStringFunctionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlNormStringFunctionContext::NORMALIZE() {
  return getToken(GQLParser::NORMALIZE, 0);
}

tree::TerminalNode* GQLParser::GqlNormStringFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ExpressionAtomContext* GQLParser::GqlNormStringFunctionContext::expressionAtom() {
  return getRuleContext<GQLParser::ExpressionAtomContext>(0);
}

tree::TerminalNode* GQLParser::GqlNormStringFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::GqlNormStringFunctionContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::NormalFormContext* GQLParser::GqlNormStringFunctionContext::normalForm() {
  return getRuleContext<GQLParser::NormalFormContext>(0);
}

GQLParser::GqlNormStringFunctionContext::GqlNormStringFunctionContext(StringFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlNormStringFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlNormStringFunction(this);
  else
    return visitor->visitChildren(this);
}
GQLParser::StringFunctionContext* GQLParser::stringFunction() {
  StringFunctionContext *_localctx = _tracker.createInstance<StringFunctionContext>(_ctx, getState());
  enterRule(_localctx, 954, GQLParser::RuleStringFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4081);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LEFT:
      case GQLParser::RIGHT: {
        _localctx = _tracker.createInstance<GQLParser::GqlSubstringFunctionContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(4037);
        antlrcpp::downCast<GqlSubstringFunctionContext *>(_localctx)->dir = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == GQLParser::LEFT || _la == GQLParser::RIGHT)) {
          antlrcpp::downCast<GqlSubstringFunctionContext *>(_localctx)->dir = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4038);
        match(GQLParser::LEFT_PAREN);
        setState(4039);
        antlrcpp::downCast<GqlSubstringFunctionContext *>(_localctx)->str = expressionAtom(0);
        setState(4040);
        match(GQLParser::COMMA);
        setState(4041);
        antlrcpp::downCast<GqlSubstringFunctionContext *>(_localctx)->strLen = expressionAtom(0);
        setState(4042);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

      case GQLParser::LOWER:
      case GQLParser::UPPER: {
        _localctx = _tracker.createInstance<GQLParser::GqlFoldStringFunctionContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(4044);
        antlrcpp::downCast<GqlFoldStringFunctionContext *>(_localctx)->dir = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == GQLParser::LOWER || _la == GQLParser::UPPER)) {
          antlrcpp::downCast<GqlFoldStringFunctionContext *>(_localctx)->dir = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4045);
        match(GQLParser::LEFT_PAREN);
        setState(4046);
        expressionAtom(0);
        setState(4047);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

      case GQLParser::TRIM: {
        _localctx = _tracker.createInstance<GQLParser::GqlSingleTrimStringFunctionContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(4049);
        match(GQLParser::TRIM);
        setState(4050);
        match(GQLParser::LEFT_PAREN);
        setState(4058);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 460, _ctx)) {
        case 1: {
          setState(4052);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 458, _ctx)) {
          case 1: {
            setState(4051);
            trimSpecification();
            break;
          }

          default:
            break;
          }
          setState(4055);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 459, _ctx)) {
          case 1: {
            setState(4054);
            expressionAtom(0);
            break;
          }

          default:
            break;
          }
          setState(4057);
          match(GQLParser::FROM);
          break;
        }

        default:
          break;
        }
        setState(4060);
        antlrcpp::downCast<GqlSingleTrimStringFunctionContext *>(_localctx)->trimSrc = expressionAtom(0);
        setState(4061);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

      case GQLParser::BTRIM:
      case GQLParser::LTRIM:
      case GQLParser::RTRIM: {
        _localctx = _tracker.createInstance<GQLParser::GqlMultiTrimStringFunctionContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(4063);
        antlrcpp::downCast<GqlMultiTrimStringFunctionContext *>(_localctx)->dir = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == GQLParser::BTRIM || _la == GQLParser::LTRIM

        || _la == GQLParser::RTRIM)) {
          antlrcpp::downCast<GqlMultiTrimStringFunctionContext *>(_localctx)->dir = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4064);
        match(GQLParser::LEFT_PAREN);
        setState(4065);
        antlrcpp::downCast<GqlMultiTrimStringFunctionContext *>(_localctx)->trimSrc = expressionAtom(0);
        setState(4068);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::COMMA) {
          setState(4066);
          match(GQLParser::COMMA);
          setState(4067);
          antlrcpp::downCast<GqlMultiTrimStringFunctionContext *>(_localctx)->delChar = expressionAtom(0);
        }
        setState(4070);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

      case GQLParser::NORMALIZE: {
        _localctx = _tracker.createInstance<GQLParser::GqlNormStringFunctionContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(4072);
        match(GQLParser::NORMALIZE);
        setState(4073);
        match(GQLParser::LEFT_PAREN);
        setState(4074);
        expressionAtom(0);
        setState(4077);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::COMMA) {
          setState(4075);
          match(GQLParser::COMMA);
          setState(4076);
          normalForm();
        }
        setState(4079);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListFunctionContext ------------------------------------------------------------------

GQLParser::ListFunctionContext::ListFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::ListFunctionContext::getRuleIndex() const {
  return GQLParser::RuleListFunction;
}

void GQLParser::ListFunctionContext::copyFrom(ListFunctionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- GqlElementsOfPathFunctionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlElementsOfPathFunctionContext::ELEMENTS() {
  return getToken(GQLParser::ELEMENTS, 0);
}

tree::TerminalNode* GQLParser::GqlElementsOfPathFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ExpressionAtomContext* GQLParser::GqlElementsOfPathFunctionContext::expressionAtom() {
  return getRuleContext<GQLParser::ExpressionAtomContext>(0);
}

tree::TerminalNode* GQLParser::GqlElementsOfPathFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::GqlElementsOfPathFunctionContext::GqlElementsOfPathFunctionContext(ListFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlElementsOfPathFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlElementsOfPathFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlListTrimFunctionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlListTrimFunctionContext::TRIM() {
  return getToken(GQLParser::TRIM, 0);
}

tree::TerminalNode* GQLParser::GqlListTrimFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::GqlListTrimFunctionContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

tree::TerminalNode* GQLParser::GqlListTrimFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

std::vector<GQLParser::ExpressionAtomContext *> GQLParser::GqlListTrimFunctionContext::expressionAtom() {
  return getRuleContexts<GQLParser::ExpressionAtomContext>();
}

GQLParser::ExpressionAtomContext* GQLParser::GqlListTrimFunctionContext::expressionAtom(size_t i) {
  return getRuleContext<GQLParser::ExpressionAtomContext>(i);
}

GQLParser::GqlListTrimFunctionContext::GqlListTrimFunctionContext(ListFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlListTrimFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlListTrimFunction(this);
  else
    return visitor->visitChildren(this);
}
GQLParser::ListFunctionContext* GQLParser::listFunction() {
  ListFunctionContext *_localctx = _tracker.createInstance<ListFunctionContext>(_ctx, getState());
  enterRule(_localctx, 956, GQLParser::RuleListFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4095);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::TRIM: {
        _localctx = _tracker.createInstance<GQLParser::GqlListTrimFunctionContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(4083);
        match(GQLParser::TRIM);
        setState(4084);
        match(GQLParser::LEFT_PAREN);
        setState(4085);
        antlrcpp::downCast<GqlListTrimFunctionContext *>(_localctx)->list = expressionAtom(0);
        setState(4086);
        match(GQLParser::COMMA);
        setState(4087);
        antlrcpp::downCast<GqlListTrimFunctionContext *>(_localctx)->trim = expressionAtom(0);
        setState(4088);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

      case GQLParser::ELEMENTS: {
        _localctx = _tracker.createInstance<GQLParser::GqlElementsOfPathFunctionContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(4090);
        match(GQLParser::ELEMENTS);
        setState(4091);
        match(GQLParser::LEFT_PAREN);
        setState(4092);
        expressionAtom(0);
        setState(4093);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseFunctionContext ------------------------------------------------------------------

GQLParser::CaseFunctionContext::CaseFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::CaseFunctionContext::getRuleIndex() const {
  return GQLParser::RuleCaseFunction;
}

void GQLParser::CaseFunctionContext::copyFrom(CaseFunctionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- GqlCoalesceCaseFunctionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlCoalesceCaseFunctionContext::COALESCE() {
  return getToken(GQLParser::COALESCE, 0);
}

tree::TerminalNode* GQLParser::GqlCoalesceCaseFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

std::vector<GQLParser::ExpressionContext *> GQLParser::GqlCoalesceCaseFunctionContext::expression() {
  return getRuleContexts<GQLParser::ExpressionContext>();
}

GQLParser::ExpressionContext* GQLParser::GqlCoalesceCaseFunctionContext::expression(size_t i) {
  return getRuleContext<GQLParser::ExpressionContext>(i);
}

tree::TerminalNode* GQLParser::GqlCoalesceCaseFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> GQLParser::GqlCoalesceCaseFunctionContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::GqlCoalesceCaseFunctionContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}

GQLParser::GqlCoalesceCaseFunctionContext::GqlCoalesceCaseFunctionContext(CaseFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlCoalesceCaseFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlCoalesceCaseFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlSimpleCaseFunctionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlSimpleCaseFunctionContext::CASE() {
  return getToken(GQLParser::CASE, 0);
}

GQLParser::ExpressionAtomContext* GQLParser::GqlSimpleCaseFunctionContext::expressionAtom() {
  return getRuleContext<GQLParser::ExpressionAtomContext>(0);
}

tree::TerminalNode* GQLParser::GqlSimpleCaseFunctionContext::END() {
  return getToken(GQLParser::END, 0);
}

std::vector<GQLParser::SimpleWhenClauseContext *> GQLParser::GqlSimpleCaseFunctionContext::simpleWhenClause() {
  return getRuleContexts<GQLParser::SimpleWhenClauseContext>();
}

GQLParser::SimpleWhenClauseContext* GQLParser::GqlSimpleCaseFunctionContext::simpleWhenClause(size_t i) {
  return getRuleContext<GQLParser::SimpleWhenClauseContext>(i);
}

GQLParser::ElseClauseContext* GQLParser::GqlSimpleCaseFunctionContext::elseClause() {
  return getRuleContext<GQLParser::ElseClauseContext>(0);
}

GQLParser::GqlSimpleCaseFunctionContext::GqlSimpleCaseFunctionContext(CaseFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlSimpleCaseFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlSimpleCaseFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlNullIfCaseFunctionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlNullIfCaseFunctionContext::NULLIF() {
  return getToken(GQLParser::NULLIF, 0);
}

tree::TerminalNode* GQLParser::GqlNullIfCaseFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::GqlNullIfCaseFunctionContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

tree::TerminalNode* GQLParser::GqlNullIfCaseFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

std::vector<GQLParser::ExpressionContext *> GQLParser::GqlNullIfCaseFunctionContext::expression() {
  return getRuleContexts<GQLParser::ExpressionContext>();
}

GQLParser::ExpressionContext* GQLParser::GqlNullIfCaseFunctionContext::expression(size_t i) {
  return getRuleContext<GQLParser::ExpressionContext>(i);
}

GQLParser::GqlNullIfCaseFunctionContext::GqlNullIfCaseFunctionContext(CaseFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlNullIfCaseFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlNullIfCaseFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlSearchedCaseFunctionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlSearchedCaseFunctionContext::CASE() {
  return getToken(GQLParser::CASE, 0);
}

tree::TerminalNode* GQLParser::GqlSearchedCaseFunctionContext::END() {
  return getToken(GQLParser::END, 0);
}

std::vector<GQLParser::SearchedWhenClauseContext *> GQLParser::GqlSearchedCaseFunctionContext::searchedWhenClause() {
  return getRuleContexts<GQLParser::SearchedWhenClauseContext>();
}

GQLParser::SearchedWhenClauseContext* GQLParser::GqlSearchedCaseFunctionContext::searchedWhenClause(size_t i) {
  return getRuleContext<GQLParser::SearchedWhenClauseContext>(i);
}

GQLParser::ElseClauseContext* GQLParser::GqlSearchedCaseFunctionContext::elseClause() {
  return getRuleContext<GQLParser::ElseClauseContext>(0);
}

GQLParser::GqlSearchedCaseFunctionContext::GqlSearchedCaseFunctionContext(CaseFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlSearchedCaseFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlSearchedCaseFunction(this);
  else
    return visitor->visitChildren(this);
}
GQLParser::CaseFunctionContext* GQLParser::caseFunction() {
  CaseFunctionContext *_localctx = _tracker.createInstance<CaseFunctionContext>(_ctx, getState());
  enterRule(_localctx, 958, GQLParser::RuleCaseFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4138);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 470, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<GQLParser::GqlNullIfCaseFunctionContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(4097);
      match(GQLParser::NULLIF);
      setState(4098);
      match(GQLParser::LEFT_PAREN);
      setState(4099);
      antlrcpp::downCast<GqlNullIfCaseFunctionContext *>(_localctx)->lhs = expression(0);
      setState(4100);
      match(GQLParser::COMMA);
      setState(4101);
      antlrcpp::downCast<GqlNullIfCaseFunctionContext *>(_localctx)->rhs = expression(0);
      setState(4102);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<GQLParser::GqlCoalesceCaseFunctionContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(4104);
      match(GQLParser::COALESCE);
      setState(4105);
      match(GQLParser::LEFT_PAREN);
      setState(4106);
      expression(0);
      setState(4109); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(4107);
        match(GQLParser::COMMA);
        setState(4108);
        expression(0);
        setState(4111); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == GQLParser::COMMA);
      setState(4113);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<GQLParser::GqlSimpleCaseFunctionContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(4115);
      match(GQLParser::CASE);
      setState(4116);
      expressionAtom(0);
      setState(4118); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(4117);
        simpleWhenClause();
        setState(4120); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == GQLParser::WHEN);
      setState(4123);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::ELSE) {
        setState(4122);
        elseClause();
      }
      setState(4125);
      match(GQLParser::END);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<GQLParser::GqlSearchedCaseFunctionContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(4127);
      match(GQLParser::CASE);
      setState(4129); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(4128);
        searchedWhenClause();
        setState(4131); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == GQLParser::WHEN);
      setState(4134);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::ELSE) {
        setState(4133);
        elseClause();
      }
      setState(4136);
      match(GQLParser::END);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleWhenClauseContext ------------------------------------------------------------------

GQLParser::SimpleWhenClauseContext::SimpleWhenClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimpleWhenClauseContext::WHEN() {
  return getToken(GQLParser::WHEN, 0);
}

std::vector<GQLParser::WhenOperandContext *> GQLParser::SimpleWhenClauseContext::whenOperand() {
  return getRuleContexts<GQLParser::WhenOperandContext>();
}

GQLParser::WhenOperandContext* GQLParser::SimpleWhenClauseContext::whenOperand(size_t i) {
  return getRuleContext<GQLParser::WhenOperandContext>(i);
}

tree::TerminalNode* GQLParser::SimpleWhenClauseContext::THEN() {
  return getToken(GQLParser::THEN, 0);
}

GQLParser::ExpressionContext* GQLParser::SimpleWhenClauseContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> GQLParser::SimpleWhenClauseContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::SimpleWhenClauseContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::SimpleWhenClauseContext::getRuleIndex() const {
  return GQLParser::RuleSimpleWhenClause;
}


std::any GQLParser::SimpleWhenClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSimpleWhenClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SimpleWhenClauseContext* GQLParser::simpleWhenClause() {
  SimpleWhenClauseContext *_localctx = _tracker.createInstance<SimpleWhenClauseContext>(_ctx, getState());
  enterRule(_localctx, 960, GQLParser::RuleSimpleWhenClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4140);
    match(GQLParser::WHEN);
    setState(4141);
    whenOperand();
    setState(4146);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(4142);
      match(GQLParser::COMMA);
      setState(4143);
      whenOperand();
      setState(4148);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4149);
    match(GQLParser::THEN);
    setState(4150);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SearchedWhenClauseContext ------------------------------------------------------------------

GQLParser::SearchedWhenClauseContext::SearchedWhenClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SearchedWhenClauseContext::WHEN() {
  return getToken(GQLParser::WHEN, 0);
}

std::vector<GQLParser::ExpressionContext *> GQLParser::SearchedWhenClauseContext::expression() {
  return getRuleContexts<GQLParser::ExpressionContext>();
}

GQLParser::ExpressionContext* GQLParser::SearchedWhenClauseContext::expression(size_t i) {
  return getRuleContext<GQLParser::ExpressionContext>(i);
}

tree::TerminalNode* GQLParser::SearchedWhenClauseContext::THEN() {
  return getToken(GQLParser::THEN, 0);
}


size_t GQLParser::SearchedWhenClauseContext::getRuleIndex() const {
  return GQLParser::RuleSearchedWhenClause;
}


std::any GQLParser::SearchedWhenClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitSearchedWhenClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::SearchedWhenClauseContext* GQLParser::searchedWhenClause() {
  SearchedWhenClauseContext *_localctx = _tracker.createInstance<SearchedWhenClauseContext>(_ctx, getState());
  enterRule(_localctx, 962, GQLParser::RuleSearchedWhenClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4152);
    match(GQLParser::WHEN);
    setState(4153);
    expression(0);
    setState(4154);
    match(GQLParser::THEN);
    setState(4155);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElseClauseContext ------------------------------------------------------------------

GQLParser::ElseClauseContext::ElseClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ElseClauseContext::ELSE() {
  return getToken(GQLParser::ELSE, 0);
}

GQLParser::ExpressionContext* GQLParser::ElseClauseContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}


size_t GQLParser::ElseClauseContext::getRuleIndex() const {
  return GQLParser::RuleElseClause;
}


std::any GQLParser::ElseClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitElseClause(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ElseClauseContext* GQLParser::elseClause() {
  ElseClauseContext *_localctx = _tracker.createInstance<ElseClauseContext>(_ctx, getState());
  enterRule(_localctx, 964, GQLParser::RuleElseClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4157);
    match(GQLParser::ELSE);
    setState(4158);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhenOperandContext ------------------------------------------------------------------

GQLParser::WhenOperandContext::WhenOperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ExpressionAtomContext* GQLParser::WhenOperandContext::expressionAtom() {
  return getRuleContext<GQLParser::ExpressionAtomContext>(0);
}

GQLParser::ComparisonPredicateCondContext* GQLParser::WhenOperandContext::comparisonPredicateCond() {
  return getRuleContext<GQLParser::ComparisonPredicateCondContext>(0);
}

GQLParser::NullPredicateCondContext* GQLParser::WhenOperandContext::nullPredicateCond() {
  return getRuleContext<GQLParser::NullPredicateCondContext>(0);
}

GQLParser::DirectedPredicateCondContext* GQLParser::WhenOperandContext::directedPredicateCond() {
  return getRuleContext<GQLParser::DirectedPredicateCondContext>(0);
}

GQLParser::LabeledPredicateCondContext* GQLParser::WhenOperandContext::labeledPredicateCond() {
  return getRuleContext<GQLParser::LabeledPredicateCondContext>(0);
}

GQLParser::SourceDestinationPredicateCondContext* GQLParser::WhenOperandContext::sourceDestinationPredicateCond() {
  return getRuleContext<GQLParser::SourceDestinationPredicateCondContext>(0);
}


size_t GQLParser::WhenOperandContext::getRuleIndex() const {
  return GQLParser::RuleWhenOperand;
}


std::any GQLParser::WhenOperandContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitWhenOperand(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::WhenOperandContext* GQLParser::whenOperand() {
  WhenOperandContext *_localctx = _tracker.createInstance<WhenOperandContext>(_ctx, getState());
  enterRule(_localctx, 966, GQLParser::RuleWhenOperand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4166);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 472, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4160);
      expressionAtom(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4161);
      comparisonPredicateCond();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4162);
      nullPredicateCond();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4163);
      directedPredicateCond();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4164);
      labeledPredicateCond();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(4165);
      sourceDestinationPredicateCond();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CastFunctionContext ------------------------------------------------------------------

GQLParser::CastFunctionContext::CastFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CastFunctionContext::CAST() {
  return getToken(GQLParser::CAST, 0);
}

tree::TerminalNode* GQLParser::CastFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ExpressionContext* GQLParser::CastFunctionContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}

tree::TerminalNode* GQLParser::CastFunctionContext::AS() {
  return getToken(GQLParser::AS, 0);
}

GQLParser::ValueTypeContext* GQLParser::CastFunctionContext::valueType() {
  return getRuleContext<GQLParser::ValueTypeContext>(0);
}

tree::TerminalNode* GQLParser::CastFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::CastFunctionContext::getRuleIndex() const {
  return GQLParser::RuleCastFunction;
}


std::any GQLParser::CastFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCastFunction(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CastFunctionContext* GQLParser::castFunction() {
  CastFunctionContext *_localctx = _tracker.createInstance<CastFunctionContext>(_ctx, getState());
  enterRule(_localctx, 968, GQLParser::RuleCastFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4168);
    match(GQLParser::CAST);
    setState(4169);
    match(GQLParser::LEFT_PAREN);
    setState(4170);
    expression(0);
    setState(4171);
    match(GQLParser::AS);
    setState(4172);
    valueType(0);
    setState(4173);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementIdFunctionContext ------------------------------------------------------------------

GQLParser::ElementIdFunctionContext::ElementIdFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ElementIdFunctionContext::ELEMENT_ID() {
  return getToken(GQLParser::ELEMENT_ID, 0);
}

tree::TerminalNode* GQLParser::ElementIdFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::VariableContext* GQLParser::ElementIdFunctionContext::variable() {
  return getRuleContext<GQLParser::VariableContext>(0);
}

tree::TerminalNode* GQLParser::ElementIdFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::ElementIdFunctionContext::getRuleIndex() const {
  return GQLParser::RuleElementIdFunction;
}


std::any GQLParser::ElementIdFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitElementIdFunction(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ElementIdFunctionContext* GQLParser::elementIdFunction() {
  ElementIdFunctionContext *_localctx = _tracker.createInstance<ElementIdFunctionContext>(_ctx, getState());
  enterRule(_localctx, 970, GQLParser::RuleElementIdFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4175);
    match(GQLParser::ELEMENT_ID);
    setState(4176);
    match(GQLParser::LEFT_PAREN);
    setState(4177);
    variable();
    setState(4178);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeValueFunctionContext ------------------------------------------------------------------

GQLParser::DatetimeValueFunctionContext::DatetimeValueFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DateFunctionContext* GQLParser::DatetimeValueFunctionContext::dateFunction() {
  return getRuleContext<GQLParser::DateFunctionContext>(0);
}

GQLParser::TimeFunctionContext* GQLParser::DatetimeValueFunctionContext::timeFunction() {
  return getRuleContext<GQLParser::TimeFunctionContext>(0);
}

GQLParser::DatetimeFunctionContext* GQLParser::DatetimeValueFunctionContext::datetimeFunction() {
  return getRuleContext<GQLParser::DatetimeFunctionContext>(0);
}

GQLParser::LocalTimeFunctionContext* GQLParser::DatetimeValueFunctionContext::localTimeFunction() {
  return getRuleContext<GQLParser::LocalTimeFunctionContext>(0);
}

GQLParser::LocalDatetimeFunctionContext* GQLParser::DatetimeValueFunctionContext::localDatetimeFunction() {
  return getRuleContext<GQLParser::LocalDatetimeFunctionContext>(0);
}


size_t GQLParser::DatetimeValueFunctionContext::getRuleIndex() const {
  return GQLParser::RuleDatetimeValueFunction;
}


std::any GQLParser::DatetimeValueFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDatetimeValueFunction(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DatetimeValueFunctionContext* GQLParser::datetimeValueFunction() {
  DatetimeValueFunctionContext *_localctx = _tracker.createInstance<DatetimeValueFunctionContext>(_ctx, getState());
  enterRule(_localctx, 972, GQLParser::RuleDatetimeValueFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4185);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CURRENT_DATE:
      case GQLParser::DATE: {
        enterOuterAlt(_localctx, 1);
        setState(4180);
        dateFunction();
        break;
      }

      case GQLParser::CURRENT_TIME:
      case GQLParser::ZONED_TIME: {
        enterOuterAlt(_localctx, 2);
        setState(4181);
        timeFunction();
        break;
      }

      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::ZONED_DATETIME: {
        enterOuterAlt(_localctx, 3);
        setState(4182);
        datetimeFunction();
        break;
      }

      case GQLParser::LOCAL_TIME: {
        enterOuterAlt(_localctx, 4);
        setState(4183);
        localTimeFunction();
        break;
      }

      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIMESTAMP: {
        enterOuterAlt(_localctx, 5);
        setState(4184);
        localDatetimeFunction();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DateFunctionContext ------------------------------------------------------------------

GQLParser::DateFunctionContext::DateFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DateFunctionContext::CURRENT_DATE() {
  return getToken(GQLParser::CURRENT_DATE, 0);
}

tree::TerminalNode* GQLParser::DateFunctionContext::DATE() {
  return getToken(GQLParser::DATE, 0);
}

tree::TerminalNode* GQLParser::DateFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::DateFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::DateFunctionParametersContext* GQLParser::DateFunctionContext::dateFunctionParameters() {
  return getRuleContext<GQLParser::DateFunctionParametersContext>(0);
}


size_t GQLParser::DateFunctionContext::getRuleIndex() const {
  return GQLParser::RuleDateFunction;
}


std::any GQLParser::DateFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDateFunction(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DateFunctionContext* GQLParser::dateFunction() {
  DateFunctionContext *_localctx = _tracker.createInstance<DateFunctionContext>(_ctx, getState());
  enterRule(_localctx, 974, GQLParser::RuleDateFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4194);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CURRENT_DATE: {
        enterOuterAlt(_localctx, 1);
        setState(4187);
        match(GQLParser::CURRENT_DATE);
        break;
      }

      case GQLParser::DATE: {
        enterOuterAlt(_localctx, 2);
        setState(4188);
        match(GQLParser::DATE);
        setState(4189);
        match(GQLParser::LEFT_PAREN);
        setState(4191);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::LEFT_BRACE || _la == GQLParser::RECORD || _la == GQLParser::SINGLE_QUOTED_STRING_LITERAL

        || _la == GQLParser::DOUBLE_QUOTED_STRING_LITERAL) {
          setState(4190);
          dateFunctionParameters();
        }
        setState(4193);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimeFunctionContext ------------------------------------------------------------------

GQLParser::TimeFunctionContext::TimeFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TimeFunctionContext::CURRENT_TIME() {
  return getToken(GQLParser::CURRENT_TIME, 0);
}

tree::TerminalNode* GQLParser::TimeFunctionContext::ZONED_TIME() {
  return getToken(GQLParser::ZONED_TIME, 0);
}

tree::TerminalNode* GQLParser::TimeFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::TimeFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::TimeFunctionParametersContext* GQLParser::TimeFunctionContext::timeFunctionParameters() {
  return getRuleContext<GQLParser::TimeFunctionParametersContext>(0);
}


size_t GQLParser::TimeFunctionContext::getRuleIndex() const {
  return GQLParser::RuleTimeFunction;
}


std::any GQLParser::TimeFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTimeFunction(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TimeFunctionContext* GQLParser::timeFunction() {
  TimeFunctionContext *_localctx = _tracker.createInstance<TimeFunctionContext>(_ctx, getState());
  enterRule(_localctx, 976, GQLParser::RuleTimeFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4203);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CURRENT_TIME: {
        enterOuterAlt(_localctx, 1);
        setState(4196);
        match(GQLParser::CURRENT_TIME);
        break;
      }

      case GQLParser::ZONED_TIME: {
        enterOuterAlt(_localctx, 2);
        setState(4197);
        match(GQLParser::ZONED_TIME);
        setState(4198);
        match(GQLParser::LEFT_PAREN);
        setState(4200);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::LEFT_BRACE || _la == GQLParser::RECORD || _la == GQLParser::SINGLE_QUOTED_STRING_LITERAL

        || _la == GQLParser::DOUBLE_QUOTED_STRING_LITERAL) {
          setState(4199);
          timeFunctionParameters();
        }
        setState(4202);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalTimeFunctionContext ------------------------------------------------------------------

GQLParser::LocalTimeFunctionContext::LocalTimeFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::LocalTimeFunctionContext::LOCAL_TIME() {
  return getToken(GQLParser::LOCAL_TIME, 0);
}

tree::TerminalNode* GQLParser::LocalTimeFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::LocalTimeFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::TimeFunctionParametersContext* GQLParser::LocalTimeFunctionContext::timeFunctionParameters() {
  return getRuleContext<GQLParser::TimeFunctionParametersContext>(0);
}


size_t GQLParser::LocalTimeFunctionContext::getRuleIndex() const {
  return GQLParser::RuleLocalTimeFunction;
}


std::any GQLParser::LocalTimeFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLocalTimeFunction(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LocalTimeFunctionContext* GQLParser::localTimeFunction() {
  LocalTimeFunctionContext *_localctx = _tracker.createInstance<LocalTimeFunctionContext>(_ctx, getState());
  enterRule(_localctx, 978, GQLParser::RuleLocalTimeFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4205);
    match(GQLParser::LOCAL_TIME);
    setState(4211);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 479, _ctx)) {
    case 1: {
      setState(4206);
      match(GQLParser::LEFT_PAREN);
      setState(4208);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::LEFT_BRACE || _la == GQLParser::RECORD || _la == GQLParser::SINGLE_QUOTED_STRING_LITERAL

      || _la == GQLParser::DOUBLE_QUOTED_STRING_LITERAL) {
        setState(4207);
        timeFunctionParameters();
      }
      setState(4210);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeFunctionContext ------------------------------------------------------------------

GQLParser::DatetimeFunctionContext::DatetimeFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DatetimeFunctionContext::CURRENT_TIMESTAMP() {
  return getToken(GQLParser::CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* GQLParser::DatetimeFunctionContext::ZONED_DATETIME() {
  return getToken(GQLParser::ZONED_DATETIME, 0);
}

tree::TerminalNode* GQLParser::DatetimeFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::DatetimeFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::DatetimeFunctionParametersContext* GQLParser::DatetimeFunctionContext::datetimeFunctionParameters() {
  return getRuleContext<GQLParser::DatetimeFunctionParametersContext>(0);
}


size_t GQLParser::DatetimeFunctionContext::getRuleIndex() const {
  return GQLParser::RuleDatetimeFunction;
}


std::any GQLParser::DatetimeFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDatetimeFunction(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DatetimeFunctionContext* GQLParser::datetimeFunction() {
  DatetimeFunctionContext *_localctx = _tracker.createInstance<DatetimeFunctionContext>(_ctx, getState());
  enterRule(_localctx, 980, GQLParser::RuleDatetimeFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4220);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CURRENT_TIMESTAMP: {
        enterOuterAlt(_localctx, 1);
        setState(4213);
        match(GQLParser::CURRENT_TIMESTAMP);
        break;
      }

      case GQLParser::ZONED_DATETIME: {
        enterOuterAlt(_localctx, 2);
        setState(4214);
        match(GQLParser::ZONED_DATETIME);
        setState(4215);
        match(GQLParser::LEFT_PAREN);
        setState(4217);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::LEFT_BRACE || _la == GQLParser::RECORD || _la == GQLParser::SINGLE_QUOTED_STRING_LITERAL

        || _la == GQLParser::DOUBLE_QUOTED_STRING_LITERAL) {
          setState(4216);
          datetimeFunctionParameters();
        }
        setState(4219);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalDatetimeFunctionContext ------------------------------------------------------------------

GQLParser::LocalDatetimeFunctionContext::LocalDatetimeFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::LocalDatetimeFunctionContext::LOCAL_TIMESTAMP() {
  return getToken(GQLParser::LOCAL_TIMESTAMP, 0);
}

tree::TerminalNode* GQLParser::LocalDatetimeFunctionContext::LOCAL_DATETIME() {
  return getToken(GQLParser::LOCAL_DATETIME, 0);
}

tree::TerminalNode* GQLParser::LocalDatetimeFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::LocalDatetimeFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::DatetimeFunctionParametersContext* GQLParser::LocalDatetimeFunctionContext::datetimeFunctionParameters() {
  return getRuleContext<GQLParser::DatetimeFunctionParametersContext>(0);
}


size_t GQLParser::LocalDatetimeFunctionContext::getRuleIndex() const {
  return GQLParser::RuleLocalDatetimeFunction;
}


std::any GQLParser::LocalDatetimeFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitLocalDatetimeFunction(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::LocalDatetimeFunctionContext* GQLParser::localDatetimeFunction() {
  LocalDatetimeFunctionContext *_localctx = _tracker.createInstance<LocalDatetimeFunctionContext>(_ctx, getState());
  enterRule(_localctx, 982, GQLParser::RuleLocalDatetimeFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4229);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LOCAL_TIMESTAMP: {
        enterOuterAlt(_localctx, 1);
        setState(4222);
        match(GQLParser::LOCAL_TIMESTAMP);
        break;
      }

      case GQLParser::LOCAL_DATETIME: {
        enterOuterAlt(_localctx, 2);
        setState(4223);
        match(GQLParser::LOCAL_DATETIME);
        setState(4224);
        match(GQLParser::LEFT_PAREN);
        setState(4226);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::LEFT_BRACE || _la == GQLParser::RECORD || _la == GQLParser::SINGLE_QUOTED_STRING_LITERAL

        || _la == GQLParser::DOUBLE_QUOTED_STRING_LITERAL) {
          setState(4225);
          datetimeFunctionParameters();
        }
        setState(4228);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DateFunctionParametersContext ------------------------------------------------------------------

GQLParser::DateFunctionParametersContext::DateFunctionParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DateStringContext* GQLParser::DateFunctionParametersContext::dateString() {
  return getRuleContext<GQLParser::DateStringContext>(0);
}

GQLParser::RecordValueConstructorContext* GQLParser::DateFunctionParametersContext::recordValueConstructor() {
  return getRuleContext<GQLParser::RecordValueConstructorContext>(0);
}


size_t GQLParser::DateFunctionParametersContext::getRuleIndex() const {
  return GQLParser::RuleDateFunctionParameters;
}


std::any GQLParser::DateFunctionParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDateFunctionParameters(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DateFunctionParametersContext* GQLParser::dateFunctionParameters() {
  DateFunctionParametersContext *_localctx = _tracker.createInstance<DateFunctionParametersContext>(_ctx, getState());
  enterRule(_localctx, 984, GQLParser::RuleDateFunctionParameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4233);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::SINGLE_QUOTED_STRING_LITERAL:
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(4231);
        dateString();
        break;
      }

      case GQLParser::LEFT_BRACE:
      case GQLParser::RECORD: {
        enterOuterAlt(_localctx, 2);
        setState(4232);
        recordValueConstructor();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimeFunctionParametersContext ------------------------------------------------------------------

GQLParser::TimeFunctionParametersContext::TimeFunctionParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::TimeStringContext* GQLParser::TimeFunctionParametersContext::timeString() {
  return getRuleContext<GQLParser::TimeStringContext>(0);
}

GQLParser::RecordValueConstructorContext* GQLParser::TimeFunctionParametersContext::recordValueConstructor() {
  return getRuleContext<GQLParser::RecordValueConstructorContext>(0);
}


size_t GQLParser::TimeFunctionParametersContext::getRuleIndex() const {
  return GQLParser::RuleTimeFunctionParameters;
}


std::any GQLParser::TimeFunctionParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTimeFunctionParameters(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TimeFunctionParametersContext* GQLParser::timeFunctionParameters() {
  TimeFunctionParametersContext *_localctx = _tracker.createInstance<TimeFunctionParametersContext>(_ctx, getState());
  enterRule(_localctx, 986, GQLParser::RuleTimeFunctionParameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4237);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::SINGLE_QUOTED_STRING_LITERAL:
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(4235);
        timeString();
        break;
      }

      case GQLParser::LEFT_BRACE:
      case GQLParser::RECORD: {
        enterOuterAlt(_localctx, 2);
        setState(4236);
        recordValueConstructor();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeFunctionParametersContext ------------------------------------------------------------------

GQLParser::DatetimeFunctionParametersContext::DatetimeFunctionParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DatetimeStringContext* GQLParser::DatetimeFunctionParametersContext::datetimeString() {
  return getRuleContext<GQLParser::DatetimeStringContext>(0);
}

GQLParser::RecordValueConstructorContext* GQLParser::DatetimeFunctionParametersContext::recordValueConstructor() {
  return getRuleContext<GQLParser::RecordValueConstructorContext>(0);
}


size_t GQLParser::DatetimeFunctionParametersContext::getRuleIndex() const {
  return GQLParser::RuleDatetimeFunctionParameters;
}


std::any GQLParser::DatetimeFunctionParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDatetimeFunctionParameters(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DatetimeFunctionParametersContext* GQLParser::datetimeFunctionParameters() {
  DatetimeFunctionParametersContext *_localctx = _tracker.createInstance<DatetimeFunctionParametersContext>(_ctx, getState());
  enterRule(_localctx, 988, GQLParser::RuleDatetimeFunctionParameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4241);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::SINGLE_QUOTED_STRING_LITERAL:
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(4239);
        datetimeString();
        break;
      }

      case GQLParser::LEFT_BRACE:
      case GQLParser::RECORD: {
        enterOuterAlt(_localctx, 2);
        setState(4240);
        recordValueConstructor();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DateStringContext ------------------------------------------------------------------

GQLParser::DateStringContext::DateStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnbrokenCharacterStringLiteralContext* GQLParser::DateStringContext::unbrokenCharacterStringLiteral() {
  return getRuleContext<GQLParser::UnbrokenCharacterStringLiteralContext>(0);
}


size_t GQLParser::DateStringContext::getRuleIndex() const {
  return GQLParser::RuleDateString;
}


std::any GQLParser::DateStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDateString(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DateStringContext* GQLParser::dateString() {
  DateStringContext *_localctx = _tracker.createInstance<DateStringContext>(_ctx, getState());
  enterRule(_localctx, 990, GQLParser::RuleDateString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4243);
    unbrokenCharacterStringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimeStringContext ------------------------------------------------------------------

GQLParser::TimeStringContext::TimeStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnbrokenCharacterStringLiteralContext* GQLParser::TimeStringContext::unbrokenCharacterStringLiteral() {
  return getRuleContext<GQLParser::UnbrokenCharacterStringLiteralContext>(0);
}


size_t GQLParser::TimeStringContext::getRuleIndex() const {
  return GQLParser::RuleTimeString;
}


std::any GQLParser::TimeStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTimeString(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TimeStringContext* GQLParser::timeString() {
  TimeStringContext *_localctx = _tracker.createInstance<TimeStringContext>(_ctx, getState());
  enterRule(_localctx, 992, GQLParser::RuleTimeString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4245);
    unbrokenCharacterStringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeStringContext ------------------------------------------------------------------

GQLParser::DatetimeStringContext::DatetimeStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnbrokenCharacterStringLiteralContext* GQLParser::DatetimeStringContext::unbrokenCharacterStringLiteral() {
  return getRuleContext<GQLParser::UnbrokenCharacterStringLiteralContext>(0);
}


size_t GQLParser::DatetimeStringContext::getRuleIndex() const {
  return GQLParser::RuleDatetimeString;
}


std::any GQLParser::DatetimeStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDatetimeString(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DatetimeStringContext* GQLParser::datetimeString() {
  DatetimeStringContext *_localctx = _tracker.createInstance<DatetimeStringContext>(_ctx, getState());
  enterRule(_localctx, 994, GQLParser::RuleDatetimeString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4247);
    unbrokenCharacterStringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DurationFunctionContext ------------------------------------------------------------------

GQLParser::DurationFunctionContext::DurationFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::DurationFunctionContext::getRuleIndex() const {
  return GQLParser::RuleDurationFunction;
}

void GQLParser::DurationFunctionContext::copyFrom(DurationFunctionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- GqlDatetimeSubtractionFunctionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlDatetimeSubtractionFunctionContext::DURATION_BETWEEN() {
  return getToken(GQLParser::DURATION_BETWEEN, 0);
}

tree::TerminalNode* GQLParser::GqlDatetimeSubtractionFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

std::vector<GQLParser::ExpressionAtomContext *> GQLParser::GqlDatetimeSubtractionFunctionContext::expressionAtom() {
  return getRuleContexts<GQLParser::ExpressionAtomContext>();
}

GQLParser::ExpressionAtomContext* GQLParser::GqlDatetimeSubtractionFunctionContext::expressionAtom(size_t i) {
  return getRuleContext<GQLParser::ExpressionAtomContext>(i);
}

tree::TerminalNode* GQLParser::GqlDatetimeSubtractionFunctionContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

tree::TerminalNode* GQLParser::GqlDatetimeSubtractionFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::GqlDatetimeSubtractionFunctionContext::GqlDatetimeSubtractionFunctionContext(DurationFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlDatetimeSubtractionFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlDatetimeSubtractionFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GqlDurationFunctionContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::GqlDurationFunctionContext::DURATION() {
  return getToken(GQLParser::DURATION, 0);
}

tree::TerminalNode* GQLParser::GqlDurationFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::DurationFunctionParametersContext* GQLParser::GqlDurationFunctionContext::durationFunctionParameters() {
  return getRuleContext<GQLParser::DurationFunctionParametersContext>(0);
}

tree::TerminalNode* GQLParser::GqlDurationFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::GqlDurationFunctionContext::GqlDurationFunctionContext(DurationFunctionContext *ctx) { copyFrom(ctx); }


std::any GQLParser::GqlDurationFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGqlDurationFunction(this);
  else
    return visitor->visitChildren(this);
}
GQLParser::DurationFunctionContext* GQLParser::durationFunction() {
  DurationFunctionContext *_localctx = _tracker.createInstance<DurationFunctionContext>(_ctx, getState());
  enterRule(_localctx, 996, GQLParser::RuleDurationFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4261);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DURATION_BETWEEN: {
        _localctx = _tracker.createInstance<GQLParser::GqlDatetimeSubtractionFunctionContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(4249);
        match(GQLParser::DURATION_BETWEEN);
        setState(4250);
        match(GQLParser::LEFT_PAREN);
        setState(4251);
        expressionAtom(0);
        setState(4252);
        match(GQLParser::COMMA);
        setState(4253);
        expressionAtom(0);
        setState(4254);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

      case GQLParser::DURATION: {
        _localctx = _tracker.createInstance<GQLParser::GqlDurationFunctionContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(4256);
        match(GQLParser::DURATION);
        setState(4257);
        match(GQLParser::LEFT_PAREN);
        setState(4258);
        durationFunctionParameters();
        setState(4259);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DurationFunctionParametersContext ------------------------------------------------------------------

GQLParser::DurationFunctionParametersContext::DurationFunctionParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DurationStringContext* GQLParser::DurationFunctionParametersContext::durationString() {
  return getRuleContext<GQLParser::DurationStringContext>(0);
}

GQLParser::RecordValueConstructorContext* GQLParser::DurationFunctionParametersContext::recordValueConstructor() {
  return getRuleContext<GQLParser::RecordValueConstructorContext>(0);
}


size_t GQLParser::DurationFunctionParametersContext::getRuleIndex() const {
  return GQLParser::RuleDurationFunctionParameters;
}


std::any GQLParser::DurationFunctionParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDurationFunctionParameters(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DurationFunctionParametersContext* GQLParser::durationFunctionParameters() {
  DurationFunctionParametersContext *_localctx = _tracker.createInstance<DurationFunctionParametersContext>(_ctx, getState());
  enterRule(_localctx, 998, GQLParser::RuleDurationFunctionParameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4265);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::SINGLE_QUOTED_STRING_LITERAL:
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(4263);
        durationString();
        break;
      }

      case GQLParser::LEFT_BRACE:
      case GQLParser::RECORD: {
        enterOuterAlt(_localctx, 2);
        setState(4264);
        recordValueConstructor();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DurationStringContext ------------------------------------------------------------------

GQLParser::DurationStringContext::DurationStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnbrokenCharacterStringLiteralContext* GQLParser::DurationStringContext::unbrokenCharacterStringLiteral() {
  return getRuleContext<GQLParser::UnbrokenCharacterStringLiteralContext>(0);
}


size_t GQLParser::DurationStringContext::getRuleIndex() const {
  return GQLParser::RuleDurationString;
}


std::any GQLParser::DurationStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitDurationString(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::DurationStringContext* GQLParser::durationString() {
  DurationStringContext *_localctx = _tracker.createInstance<DurationStringContext>(_ctx, getState());
  enterRule(_localctx, 1000, GQLParser::RuleDurationString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4267);
    unbrokenCharacterStringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneralFunctionContext ------------------------------------------------------------------

GQLParser::GeneralFunctionContext::GeneralFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FunctionNameContext* GQLParser::GeneralFunctionContext::functionName() {
  return getRuleContext<GQLParser::FunctionNameContext>(0);
}

tree::TerminalNode* GQLParser::GeneralFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::GeneralFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::ProcedureArgumentListContext* GQLParser::GeneralFunctionContext::procedureArgumentList() {
  return getRuleContext<GQLParser::ProcedureArgumentListContext>(0);
}


size_t GQLParser::GeneralFunctionContext::getRuleIndex() const {
  return GQLParser::RuleGeneralFunction;
}


std::any GQLParser::GeneralFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGeneralFunction(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GeneralFunctionContext* GQLParser::generalFunction() {
  GeneralFunctionContext *_localctx = _tracker.createInstance<GeneralFunctionContext>(_ctx, getState());
  enterRule(_localctx, 1002, GQLParser::RuleGeneralFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4269);
    functionName();
    setState(4270);
    match(GQLParser::LEFT_PAREN);
    setState(4272);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -268280512) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & -1) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & 3298534883327) != 0) || ((((_la - 329) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 329)) & 36671) != 0)) {
      setState(4271);
      procedureArgumentList();
    }
    setState(4274);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollectionValueConstructorContext ------------------------------------------------------------------

GQLParser::CollectionValueConstructorContext::CollectionValueConstructorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ListValueConstructorContext* GQLParser::CollectionValueConstructorContext::listValueConstructor() {
  return getRuleContext<GQLParser::ListValueConstructorContext>(0);
}

GQLParser::RecordValueConstructorContext* GQLParser::CollectionValueConstructorContext::recordValueConstructor() {
  return getRuleContext<GQLParser::RecordValueConstructorContext>(0);
}

GQLParser::PathValueConstructorContext* GQLParser::CollectionValueConstructorContext::pathValueConstructor() {
  return getRuleContext<GQLParser::PathValueConstructorContext>(0);
}


size_t GQLParser::CollectionValueConstructorContext::getRuleIndex() const {
  return GQLParser::RuleCollectionValueConstructor;
}


std::any GQLParser::CollectionValueConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitCollectionValueConstructor(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::CollectionValueConstructorContext* GQLParser::collectionValueConstructor() {
  CollectionValueConstructorContext *_localctx = _tracker.createInstance<CollectionValueConstructorContext>(_ctx, getState());
  enterRule(_localctx, 1004, GQLParser::RuleCollectionValueConstructor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4279);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LEFT_BRACKET:
      case GQLParser::ARRAY:
      case GQLParser::GROUP:
      case GQLParser::LIST: {
        enterOuterAlt(_localctx, 1);
        setState(4276);
        listValueConstructor();
        break;
      }

      case GQLParser::LEFT_BRACE:
      case GQLParser::RECORD: {
        enterOuterAlt(_localctx, 2);
        setState(4277);
        recordValueConstructor();
        break;
      }

      case GQLParser::PATH: {
        enterOuterAlt(_localctx, 3);
        setState(4278);
        pathValueConstructor();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrimSpecificationContext ------------------------------------------------------------------

GQLParser::TrimSpecificationContext::TrimSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TrimSpecificationContext::LEADING() {
  return getToken(GQLParser::LEADING, 0);
}

tree::TerminalNode* GQLParser::TrimSpecificationContext::TRAILING() {
  return getToken(GQLParser::TRAILING, 0);
}

tree::TerminalNode* GQLParser::TrimSpecificationContext::BOTH() {
  return getToken(GQLParser::BOTH, 0);
}


size_t GQLParser::TrimSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleTrimSpecification;
}


std::any GQLParser::TrimSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitTrimSpecification(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::TrimSpecificationContext* GQLParser::trimSpecification() {
  TrimSpecificationContext *_localctx = _tracker.createInstance<TrimSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 1006, GQLParser::RuleTrimSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4281);
    _la = _input->LA(1);
    if (!(_la == GQLParser::BOTH || _la == GQLParser::LEADING || _la == GQLParser::TRAILING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalFormContext ------------------------------------------------------------------

GQLParser::NormalFormContext::NormalFormContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NormalFormContext::NFC() {
  return getToken(GQLParser::NFC, 0);
}

tree::TerminalNode* GQLParser::NormalFormContext::NFD() {
  return getToken(GQLParser::NFD, 0);
}

tree::TerminalNode* GQLParser::NormalFormContext::NFKC() {
  return getToken(GQLParser::NFKC, 0);
}

tree::TerminalNode* GQLParser::NormalFormContext::NFKD() {
  return getToken(GQLParser::NFKD, 0);
}


size_t GQLParser::NormalFormContext::getRuleIndex() const {
  return GQLParser::RuleNormalForm;
}


std::any GQLParser::NormalFormContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitNormalForm(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::NormalFormContext* GQLParser::normalForm() {
  NormalFormContext *_localctx = _tracker.createInstance<NormalFormContext>(_ctx, getState());
  enterRule(_localctx, 1008, GQLParser::RuleNormalForm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4283);
    _la = _input->LA(1);
    if (!(((((_la - 175) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 175)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListValueConstructorContext ------------------------------------------------------------------

GQLParser::ListValueConstructorContext::ListValueConstructorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ListValueConstructorContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

tree::TerminalNode* GQLParser::ListValueConstructorContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}

GQLParser::ListValueTypeNameContext* GQLParser::ListValueConstructorContext::listValueTypeName() {
  return getRuleContext<GQLParser::ListValueTypeNameContext>(0);
}

std::vector<GQLParser::ExpressionContext *> GQLParser::ListValueConstructorContext::expression() {
  return getRuleContexts<GQLParser::ExpressionContext>();
}

GQLParser::ExpressionContext* GQLParser::ListValueConstructorContext::expression(size_t i) {
  return getRuleContext<GQLParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::ListValueConstructorContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::ListValueConstructorContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::ListValueConstructorContext::getRuleIndex() const {
  return GQLParser::RuleListValueConstructor;
}


std::any GQLParser::ListValueConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitListValueConstructor(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ListValueConstructorContext* GQLParser::listValueConstructor() {
  ListValueConstructorContext *_localctx = _tracker.createInstance<ListValueConstructorContext>(_ctx, getState());
  enterRule(_localctx, 1010, GQLParser::RuleListValueConstructor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4286);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ARRAY || _la == GQLParser::GROUP

    || _la == GQLParser::LIST) {
      setState(4285);
      listValueTypeName();
    }
    setState(4288);
    match(GQLParser::LEFT_BRACKET);
    setState(4297);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -268280512) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & -1) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & 3298534883327) != 0) || ((((_la - 329) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 329)) & 36671) != 0)) {
      setState(4289);
      expression(0);
      setState(4294);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GQLParser::COMMA) {
        setState(4290);
        match(GQLParser::COMMA);
        setState(4291);
        expression(0);
        setState(4296);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(4299);
    match(GQLParser::RIGHT_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordValueConstructorContext ------------------------------------------------------------------

GQLParser::RecordValueConstructorContext::RecordValueConstructorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::RecordValueConstructorContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

tree::TerminalNode* GQLParser::RecordValueConstructorContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}

tree::TerminalNode* GQLParser::RecordValueConstructorContext::RECORD() {
  return getToken(GQLParser::RECORD, 0);
}

std::vector<GQLParser::FieldContext *> GQLParser::RecordValueConstructorContext::field() {
  return getRuleContexts<GQLParser::FieldContext>();
}

GQLParser::FieldContext* GQLParser::RecordValueConstructorContext::field(size_t i) {
  return getRuleContext<GQLParser::FieldContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::RecordValueConstructorContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::RecordValueConstructorContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::RecordValueConstructorContext::getRuleIndex() const {
  return GQLParser::RuleRecordValueConstructor;
}


std::any GQLParser::RecordValueConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitRecordValueConstructor(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::RecordValueConstructorContext* GQLParser::recordValueConstructor() {
  RecordValueConstructorContext *_localctx = _tracker.createInstance<RecordValueConstructorContext>(_ctx, getState());
  enterRule(_localctx, 1012, GQLParser::RuleRecordValueConstructor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4302);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::RECORD) {
      setState(4301);
      match(GQLParser::RECORD);
    }
    setState(4304);
    match(GQLParser::LEFT_BRACE);
    setState(4313);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 28) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 28)) & -1) != 0) || ((((_la - 92) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 92)) & -1) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 156)) & -1) != 0) || ((((_la - 220) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 220)) & -1) != 0) || ((((_la - 284) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 284)) & 1206964700135305215) != 0)) {
      setState(4305);
      field();
      setState(4310);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GQLParser::COMMA) {
        setState(4306);
        match(GQLParser::COMMA);
        setState(4307);
        field();
        setState(4312);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(4315);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldContext ------------------------------------------------------------------

GQLParser::FieldContext::FieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FieldContext::COLON() {
  return getToken(GQLParser::COLON, 0);
}

GQLParser::FieldNameContext* GQLParser::FieldContext::fieldName() {
  return getRuleContext<GQLParser::FieldNameContext>(0);
}

GQLParser::ExpressionContext* GQLParser::FieldContext::expression() {
  return getRuleContext<GQLParser::ExpressionContext>(0);
}


size_t GQLParser::FieldContext::getRuleIndex() const {
  return GQLParser::RuleField;
}


std::any GQLParser::FieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitField(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::FieldContext* GQLParser::field() {
  FieldContext *_localctx = _tracker.createInstance<FieldContext>(_ctx, getState());
  enterRule(_localctx, 1014, GQLParser::RuleField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4317);
    antlrcpp::downCast<FieldContext *>(_localctx)->key = fieldName();
    setState(4318);
    match(GQLParser::COLON);
    setState(4319);
    antlrcpp::downCast<FieldContext *>(_localctx)->value = expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathValueConstructorContext ------------------------------------------------------------------

GQLParser::PathValueConstructorContext::PathValueConstructorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::PathValueConstructorContext::PATH() {
  return getToken(GQLParser::PATH, 0);
}

tree::TerminalNode* GQLParser::PathValueConstructorContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

std::vector<GQLParser::ExpressionAtomContext *> GQLParser::PathValueConstructorContext::expressionAtom() {
  return getRuleContexts<GQLParser::ExpressionAtomContext>();
}

GQLParser::ExpressionAtomContext* GQLParser::PathValueConstructorContext::expressionAtom(size_t i) {
  return getRuleContext<GQLParser::ExpressionAtomContext>(i);
}

tree::TerminalNode* GQLParser::PathValueConstructorContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}

std::vector<tree::TerminalNode *> GQLParser::PathValueConstructorContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::PathValueConstructorContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::PathValueConstructorContext::getRuleIndex() const {
  return GQLParser::RulePathValueConstructor;
}


std::any GQLParser::PathValueConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitPathValueConstructor(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::PathValueConstructorContext* GQLParser::pathValueConstructor() {
  PathValueConstructorContext *_localctx = _tracker.createInstance<PathValueConstructorContext>(_ctx, getState());
  enterRule(_localctx, 1016, GQLParser::RulePathValueConstructor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4321);
    match(GQLParser::PATH);
    setState(4322);
    match(GQLParser::LEFT_BRACKET);
    setState(4323);
    expressionAtom(0);
    setState(4331);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(4324);
      match(GQLParser::COMMA);
      setState(4325);
      expressionAtom(0);
      setState(4326);
      match(GQLParser::COMMA);
      setState(4327);
      expressionAtom(0);
      setState(4333);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4334);
    match(GQLParser::RIGHT_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnsignedLiteralContext ------------------------------------------------------------------

GQLParser::UnsignedLiteralContext::UnsignedLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnsignedNumericLiteralContext* GQLParser::UnsignedLiteralContext::unsignedNumericLiteral() {
  return getRuleContext<GQLParser::UnsignedNumericLiteralContext>(0);
}

GQLParser::GeneralLiteralContext* GQLParser::UnsignedLiteralContext::generalLiteral() {
  return getRuleContext<GQLParser::GeneralLiteralContext>(0);
}


size_t GQLParser::UnsignedLiteralContext::getRuleIndex() const {
  return GQLParser::RuleUnsignedLiteral;
}


std::any GQLParser::UnsignedLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitUnsignedLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::UnsignedLiteralContext* GQLParser::unsignedLiteral() {
  UnsignedLiteralContext *_localctx = _tracker.createInstance<UnsignedLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1018, GQLParser::RuleUnsignedLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4338);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 498, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4336);
      unsignedNumericLiteral();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4337);
      generalLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneralLiteralContext ------------------------------------------------------------------

GQLParser::GeneralLiteralContext::GeneralLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PredefinedTypeLiteralContext* GQLParser::GeneralLiteralContext::predefinedTypeLiteral() {
  return getRuleContext<GQLParser::PredefinedTypeLiteralContext>(0);
}

GQLParser::ListLiteralContext* GQLParser::GeneralLiteralContext::listLiteral() {
  return getRuleContext<GQLParser::ListLiteralContext>(0);
}

GQLParser::RecordLiteralContext* GQLParser::GeneralLiteralContext::recordLiteral() {
  return getRuleContext<GQLParser::RecordLiteralContext>(0);
}


size_t GQLParser::GeneralLiteralContext::getRuleIndex() const {
  return GQLParser::RuleGeneralLiteral;
}


std::any GQLParser::GeneralLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitGeneralLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::GeneralLiteralContext* GQLParser::generalLiteral() {
  GeneralLiteralContext *_localctx = _tracker.createInstance<GeneralLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1020, GQLParser::RuleGeneralLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4343);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DURATION:
      case GQLParser::K_FALSE:
      case GQLParser::NULL_:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::K_TRUE:
      case GQLParser::UNKNOWN:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER:
      case GQLParser::SINGLE_QUOTED_STRING_LITERAL:
      case GQLParser::DOUBLE_QUOTED_STRING_LITERAL:
      case GQLParser::BYTE_STRING_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(4340);
        predefinedTypeLiteral();
        break;
      }

      case GQLParser::LEFT_BRACKET:
      case GQLParser::ARRAY:
      case GQLParser::GROUP:
      case GQLParser::LIST: {
        enterOuterAlt(_localctx, 2);
        setState(4341);
        listLiteral();
        break;
      }

      case GQLParser::LEFT_BRACE:
      case GQLParser::RECORD: {
        enterOuterAlt(_localctx, 3);
        setState(4342);
        recordLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListLiteralContext ------------------------------------------------------------------

GQLParser::ListLiteralContext::ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ListLiteralContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

tree::TerminalNode* GQLParser::ListLiteralContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}

GQLParser::ListValueTypeNameContext* GQLParser::ListLiteralContext::listValueTypeName() {
  return getRuleContext<GQLParser::ListValueTypeNameContext>(0);
}

std::vector<GQLParser::GeneralLiteralContext *> GQLParser::ListLiteralContext::generalLiteral() {
  return getRuleContexts<GQLParser::GeneralLiteralContext>();
}

GQLParser::GeneralLiteralContext* GQLParser::ListLiteralContext::generalLiteral(size_t i) {
  return getRuleContext<GQLParser::GeneralLiteralContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::ListLiteralContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::ListLiteralContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::ListLiteralContext::getRuleIndex() const {
  return GQLParser::RuleListLiteral;
}


std::any GQLParser::ListLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitListLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::ListLiteralContext* GQLParser::listLiteral() {
  ListLiteralContext *_localctx = _tracker.createInstance<ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1022, GQLParser::RuleListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4346);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ARRAY || _la == GQLParser::GROUP

    || _la == GQLParser::LIST) {
      setState(4345);
      listValueTypeName();
    }
    setState(4348);
    match(GQLParser::LEFT_BRACKET);
    setState(4357);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 34359741440) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 549789401091) != 0) || ((((_la - 160) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 160)) & 9007199271518209) != 0) || ((((_la - 246) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 246)) & 2097411) != 0) || ((((_la - 329) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 329)) & 2817) != 0)) {
      setState(4349);
      generalLiteral();
      setState(4354);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GQLParser::COMMA) {
        setState(4350);
        match(GQLParser::COMMA);
        setState(4351);
        generalLiteral();
        setState(4356);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(4359);
    match(GQLParser::RIGHT_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordLiteralContext ------------------------------------------------------------------

GQLParser::RecordLiteralContext::RecordLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::RecordLiteralContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

tree::TerminalNode* GQLParser::RecordLiteralContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}

tree::TerminalNode* GQLParser::RecordLiteralContext::RECORD() {
  return getToken(GQLParser::RECORD, 0);
}

std::vector<GQLParser::RecordFieldLiteralContext *> GQLParser::RecordLiteralContext::recordFieldLiteral() {
  return getRuleContexts<GQLParser::RecordFieldLiteralContext>();
}

GQLParser::RecordFieldLiteralContext* GQLParser::RecordLiteralContext::recordFieldLiteral(size_t i) {
  return getRuleContext<GQLParser::RecordFieldLiteralContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::RecordLiteralContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::RecordLiteralContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::RecordLiteralContext::getRuleIndex() const {
  return GQLParser::RuleRecordLiteral;
}


std::any GQLParser::RecordLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitRecordLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::RecordLiteralContext* GQLParser::recordLiteral() {
  RecordLiteralContext *_localctx = _tracker.createInstance<RecordLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1024, GQLParser::RuleRecordLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4362);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::RECORD) {
      setState(4361);
      match(GQLParser::RECORD);
    }
    setState(4364);
    match(GQLParser::LEFT_BRACE);
    setState(4373);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 28) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 28)) & -1) != 0) || ((((_la - 92) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 92)) & -1) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 156)) & -1) != 0) || ((((_la - 220) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 220)) & -1) != 0) || ((((_la - 284) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 284)) & 1206964700135305215) != 0)) {
      setState(4365);
      recordFieldLiteral();
      setState(4370);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GQLParser::COMMA) {
        setState(4366);
        match(GQLParser::COMMA);
        setState(4367);
        recordFieldLiteral();
        setState(4372);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(4375);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordFieldLiteralContext ------------------------------------------------------------------

GQLParser::RecordFieldLiteralContext::RecordFieldLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::RecordFieldLiteralContext::COLON() {
  return getToken(GQLParser::COLON, 0);
}

GQLParser::VariableContext* GQLParser::RecordFieldLiteralContext::variable() {
  return getRuleContext<GQLParser::VariableContext>(0);
}

GQLParser::GeneralLiteralContext* GQLParser::RecordFieldLiteralContext::generalLiteral() {
  return getRuleContext<GQLParser::GeneralLiteralContext>(0);
}


size_t GQLParser::RecordFieldLiteralContext::getRuleIndex() const {
  return GQLParser::RuleRecordFieldLiteral;
}


std::any GQLParser::RecordFieldLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitRecordFieldLiteral(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::RecordFieldLiteralContext* GQLParser::recordFieldLiteral() {
  RecordFieldLiteralContext *_localctx = _tracker.createInstance<RecordFieldLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1026, GQLParser::RuleRecordFieldLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4377);
    antlrcpp::downCast<RecordFieldLiteralContext *>(_localctx)->key = variable();
    setState(4378);
    match(GQLParser::COLON);
    setState(4379);
    antlrcpp::downCast<RecordFieldLiteralContext *>(_localctx)->value = generalLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordContext ------------------------------------------------------------------

GQLParser::KeywordContext::KeywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::KeywordContext::ABS() {
  return getToken(GQLParser::ABS, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ACOS() {
  return getToken(GQLParser::ACOS, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ACYCLIC() {
  return getToken(GQLParser::ACYCLIC, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ALL() {
  return getToken(GQLParser::ALL, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ALL_DIFFERENT() {
  return getToken(GQLParser::ALL_DIFFERENT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::AND() {
  return getToken(GQLParser::AND, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ARRAY() {
  return getToken(GQLParser::ARRAY, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::AS() {
  return getToken(GQLParser::AS, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ASC() {
  return getToken(GQLParser::ASC, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ASCENDING() {
  return getToken(GQLParser::ASCENDING, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ASIN() {
  return getToken(GQLParser::ASIN, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::AT() {
  return getToken(GQLParser::AT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ATAN() {
  return getToken(GQLParser::ATAN, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::AVG() {
  return getToken(GQLParser::AVG, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::BIG() {
  return getToken(GQLParser::BIG, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::BIGINT() {
  return getToken(GQLParser::BIGINT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::BINARY() {
  return getToken(GQLParser::BINARY, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::BINDING() {
  return getToken(GQLParser::BINDING, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::BINDINGS() {
  return getToken(GQLParser::BINDINGS, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::BOOL() {
  return getToken(GQLParser::BOOL, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::BOOLEAN() {
  return getToken(GQLParser::BOOLEAN, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::BOTH() {
  return getToken(GQLParser::BOTH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::BTRIM() {
  return getToken(GQLParser::BTRIM, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::BY() {
  return getToken(GQLParser::BY, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::BYTE_LENGTH() {
  return getToken(GQLParser::BYTE_LENGTH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::BYTES() {
  return getToken(GQLParser::BYTES, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CALL() {
  return getToken(GQLParser::CALL, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CASE() {
  return getToken(GQLParser::CASE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CAST() {
  return getToken(GQLParser::CAST, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CEIL() {
  return getToken(GQLParser::CEIL, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CEILING() {
  return getToken(GQLParser::CEILING, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CHAR_LENGTH() {
  return getToken(GQLParser::CHAR_LENGTH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CHARACTER_LENGTH() {
  return getToken(GQLParser::CHARACTER_LENGTH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CHARACTERISTICS() {
  return getToken(GQLParser::CHARACTERISTICS, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CLOSE() {
  return getToken(GQLParser::CLOSE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::COALESCE() {
  return getToken(GQLParser::COALESCE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::COLLECT() {
  return getToken(GQLParser::COLLECT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::COMMIT() {
  return getToken(GQLParser::COMMIT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CONNECTING() {
  return getToken(GQLParser::CONNECTING, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::COPY() {
  return getToken(GQLParser::COPY, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::COS() {
  return getToken(GQLParser::COS, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::COSH() {
  return getToken(GQLParser::COSH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::COT() {
  return getToken(GQLParser::COT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::COUNT() {
  return getToken(GQLParser::COUNT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CREATE() {
  return getToken(GQLParser::CREATE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CURRENT_DATE() {
  return getToken(GQLParser::CURRENT_DATE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CURRENT_GRAPH() {
  return getToken(GQLParser::CURRENT_GRAPH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CURRENT_PROPERTY_GRAPH() {
  return getToken(GQLParser::CURRENT_PROPERTY_GRAPH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CURRENT_SCHEMA() {
  return getToken(GQLParser::CURRENT_SCHEMA, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CURRENT_TIME() {
  return getToken(GQLParser::CURRENT_TIME, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CURRENT_TIMESTAMP() {
  return getToken(GQLParser::CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::CURRENT_USER() {
  return getToken(GQLParser::CURRENT_USER, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DATE() {
  return getToken(GQLParser::DATE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DATETIME() {
  return getToken(GQLParser::DATETIME, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DEC() {
  return getToken(GQLParser::DEC, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DECIMAL() {
  return getToken(GQLParser::DECIMAL, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DEGREES() {
  return getToken(GQLParser::DEGREES, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DELETE() {
  return getToken(GQLParser::DELETE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DESC() {
  return getToken(GQLParser::DESC, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DESCENDING() {
  return getToken(GQLParser::DESCENDING, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DESTINATION() {
  return getToken(GQLParser::DESTINATION, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DETACH() {
  return getToken(GQLParser::DETACH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DIFFERENT() {
  return getToken(GQLParser::DIFFERENT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DIRECTED() {
  return getToken(GQLParser::DIRECTED, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DISTINCT() {
  return getToken(GQLParser::DISTINCT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DOUBLE() {
  return getToken(GQLParser::DOUBLE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DROP() {
  return getToken(GQLParser::DROP, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DURATION() {
  return getToken(GQLParser::DURATION, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::DURATION_BETWEEN() {
  return getToken(GQLParser::DURATION_BETWEEN, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ELEMENT() {
  return getToken(GQLParser::ELEMENT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ELEMENT_ID() {
  return getToken(GQLParser::ELEMENT_ID, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ELEMENTS() {
  return getToken(GQLParser::ELEMENTS, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ELSE() {
  return getToken(GQLParser::ELSE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::END() {
  return getToken(GQLParser::END, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::EXCEPT() {
  return getToken(GQLParser::EXCEPT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::EXP() {
  return getToken(GQLParser::EXP, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::K_FALSE() {
  return getToken(GQLParser::K_FALSE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::FILTER() {
  return getToken(GQLParser::FILTER, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::FINISH() {
  return getToken(GQLParser::FINISH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::FIRST() {
  return getToken(GQLParser::FIRST, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::FLOAT() {
  return getToken(GQLParser::FLOAT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::FLOAT128() {
  return getToken(GQLParser::FLOAT128, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::FLOAT16() {
  return getToken(GQLParser::FLOAT16, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::FLOAT256() {
  return getToken(GQLParser::FLOAT256, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::FLOAT32() {
  return getToken(GQLParser::FLOAT32, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::FLOAT64() {
  return getToken(GQLParser::FLOAT64, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::FLOOR() {
  return getToken(GQLParser::FLOOR, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::FOR() {
  return getToken(GQLParser::FOR, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::FROM() {
  return getToken(GQLParser::FROM, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::GROUP() {
  return getToken(GQLParser::GROUP, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::GROUPS() {
  return getToken(GQLParser::GROUPS, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::HAVING() {
  return getToken(GQLParser::HAVING, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::HOME_GRAPH() {
  return getToken(GQLParser::HOME_GRAPH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::HOME_PROPERTY_GRAPH() {
  return getToken(GQLParser::HOME_PROPERTY_GRAPH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::HOME_SCHEMA() {
  return getToken(GQLParser::HOME_SCHEMA, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::I_DONT_KNOW_1() {
  return getToken(GQLParser::I_DONT_KNOW_1, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::I_DONT_KNOW_2() {
  return getToken(GQLParser::I_DONT_KNOW_2, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::I_DONT_KNOW_3() {
  return getToken(GQLParser::I_DONT_KNOW_3, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::I_DONT_KNOW_4() {
  return getToken(GQLParser::I_DONT_KNOW_4, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::I_DONT_KNOW_5() {
  return getToken(GQLParser::I_DONT_KNOW_5, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::IF() {
  return getToken(GQLParser::IF, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::IN() {
  return getToken(GQLParser::IN, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INSERT() {
  return getToken(GQLParser::INSERT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INT() {
  return getToken(GQLParser::INT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INT8() {
  return getToken(GQLParser::INT8, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INT16() {
  return getToken(GQLParser::INT16, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INT32() {
  return getToken(GQLParser::INT32, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INT64() {
  return getToken(GQLParser::INT64, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INT128() {
  return getToken(GQLParser::INT128, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INT256() {
  return getToken(GQLParser::INT256, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INTEGER() {
  return getToken(GQLParser::INTEGER, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INTEGER8() {
  return getToken(GQLParser::INTEGER8, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INTEGER16() {
  return getToken(GQLParser::INTEGER16, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INTEGER32() {
  return getToken(GQLParser::INTEGER32, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INTEGER64() {
  return getToken(GQLParser::INTEGER64, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INTEGER128() {
  return getToken(GQLParser::INTEGER128, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INTEGER256() {
  return getToken(GQLParser::INTEGER256, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INTERSECT() {
  return getToken(GQLParser::INTERSECT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::IS() {
  return getToken(GQLParser::IS, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::KEEP() {
  return getToken(GQLParser::KEEP, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LABEL() {
  return getToken(GQLParser::LABEL, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LABELED() {
  return getToken(GQLParser::LABELED, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LABELS() {
  return getToken(GQLParser::LABELS, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LAST() {
  return getToken(GQLParser::LAST, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LEADING() {
  return getToken(GQLParser::LEADING, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LEFT() {
  return getToken(GQLParser::LEFT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LET() {
  return getToken(GQLParser::LET, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LIKE() {
  return getToken(GQLParser::LIKE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LIMIT() {
  return getToken(GQLParser::LIMIT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LIST() {
  return getToken(GQLParser::LIST, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LN() {
  return getToken(GQLParser::LN, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LOCAL() {
  return getToken(GQLParser::LOCAL, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LOCAL_DATETIME() {
  return getToken(GQLParser::LOCAL_DATETIME, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LOCAL_TIME() {
  return getToken(GQLParser::LOCAL_TIME, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LOCAL_TIMESTAMP() {
  return getToken(GQLParser::LOCAL_TIMESTAMP, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LOG() {
  return getToken(GQLParser::LOG, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LOG10() {
  return getToken(GQLParser::LOG10, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LOWER() {
  return getToken(GQLParser::LOWER, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::LTRIM() {
  return getToken(GQLParser::LTRIM, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::MATCH() {
  return getToken(GQLParser::MATCH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::MAX() {
  return getToken(GQLParser::MAX, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::MIN() {
  return getToken(GQLParser::MIN, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::MOD() {
  return getToken(GQLParser::MOD, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::NEXT() {
  return getToken(GQLParser::NEXT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::NFC() {
  return getToken(GQLParser::NFC, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::NFD() {
  return getToken(GQLParser::NFD, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::NFKC() {
  return getToken(GQLParser::NFKC, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::NFKD() {
  return getToken(GQLParser::NFKD, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::NO() {
  return getToken(GQLParser::NO, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::NODETACH() {
  return getToken(GQLParser::NODETACH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::NORMALIZE() {
  return getToken(GQLParser::NORMALIZE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::NORMALIZED() {
  return getToken(GQLParser::NORMALIZED, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::NULL_() {
  return getToken(GQLParser::NULL_, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::NULLIF() {
  return getToken(GQLParser::NULLIF, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::NULLS() {
  return getToken(GQLParser::NULLS, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::OCTET_LENGTH() {
  return getToken(GQLParser::OCTET_LENGTH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::OF() {
  return getToken(GQLParser::OF, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::OFFSET() {
  return getToken(GQLParser::OFFSET, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::SKIP_() {
  return getToken(GQLParser::SKIP_, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ONLY() {
  return getToken(GQLParser::ONLY, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::OPEN() {
  return getToken(GQLParser::OPEN, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::OPTIONAL() {
  return getToken(GQLParser::OPTIONAL, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::OR() {
  return getToken(GQLParser::OR, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ORDER() {
  return getToken(GQLParser::ORDER, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ORDINALITY() {
  return getToken(GQLParser::ORDINALITY, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::OTHERWISE() {
  return getToken(GQLParser::OTHERWISE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::PARAMETER() {
  return getToken(GQLParser::PARAMETER, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::PARAMETERS() {
  return getToken(GQLParser::PARAMETERS, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::PATH() {
  return getToken(GQLParser::PATH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::PATH_LENGTH() {
  return getToken(GQLParser::PATH_LENGTH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::PATHS() {
  return getToken(GQLParser::PATHS, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::PERCENTILE_CONT() {
  return getToken(GQLParser::PERCENTILE_CONT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::PERCENTILE_DISC() {
  return getToken(GQLParser::PERCENTILE_DISC, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::POWER() {
  return getToken(GQLParser::POWER, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::PRECISION() {
  return getToken(GQLParser::PRECISION, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::PROJECT() {
  return getToken(GQLParser::PROJECT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::PROPERTY_EXISTS() {
  return getToken(GQLParser::PROPERTY_EXISTS, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::RADIANS() {
  return getToken(GQLParser::RADIANS, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::READ() {
  return getToken(GQLParser::READ, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::REAL() {
  return getToken(GQLParser::REAL, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::RECORD() {
  return getToken(GQLParser::RECORD, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::REMOVE() {
  return getToken(GQLParser::REMOVE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::REPEATABLE() {
  return getToken(GQLParser::REPEATABLE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::REPLACE() {
  return getToken(GQLParser::REPLACE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::RESET() {
  return getToken(GQLParser::RESET, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::RETURN() {
  return getToken(GQLParser::RETURN, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ROLLBACK() {
  return getToken(GQLParser::ROLLBACK, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::RTRIM() {
  return getToken(GQLParser::RTRIM, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::RIGHT() {
  return getToken(GQLParser::RIGHT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::SAME() {
  return getToken(GQLParser::SAME, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::SCHEMA() {
  return getToken(GQLParser::SCHEMA, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::SELECT() {
  return getToken(GQLParser::SELECT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::SESSION() {
  return getToken(GQLParser::SESSION, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::SET() {
  return getToken(GQLParser::SET, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::SHORTEST() {
  return getToken(GQLParser::SHORTEST, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::SIGNED() {
  return getToken(GQLParser::SIGNED, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::SIMPLE() {
  return getToken(GQLParser::SIMPLE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::SIN() {
  return getToken(GQLParser::SIN, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::SINH() {
  return getToken(GQLParser::SINH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::SMALL() {
  return getToken(GQLParser::SMALL, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::SMALLINT() {
  return getToken(GQLParser::SMALLINT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::SOURCE() {
  return getToken(GQLParser::SOURCE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::SQRT() {
  return getToken(GQLParser::SQRT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::START() {
  return getToken(GQLParser::START, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::STDDEV_POP() {
  return getToken(GQLParser::STDDEV_POP, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::STDDEV_SAMP() {
  return getToken(GQLParser::STDDEV_SAMP, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::STRING() {
  return getToken(GQLParser::STRING, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::SUM() {
  return getToken(GQLParser::SUM, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::TABLE() {
  return getToken(GQLParser::TABLE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::TAN() {
  return getToken(GQLParser::TAN, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::TANH() {
  return getToken(GQLParser::TANH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::TEMP() {
  return getToken(GQLParser::TEMP, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::THEN() {
  return getToken(GQLParser::THEN, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::TIME() {
  return getToken(GQLParser::TIME, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::TIMESTAMP() {
  return getToken(GQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::TIMEZONE() {
  return getToken(GQLParser::TIMEZONE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::TO() {
  return getToken(GQLParser::TO, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::TRAIL() {
  return getToken(GQLParser::TRAIL, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::TRAILING() {
  return getToken(GQLParser::TRAILING, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::TRANSACTION() {
  return getToken(GQLParser::TRANSACTION, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::TRIM() {
  return getToken(GQLParser::TRIM, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::K_TRUE() {
  return getToken(GQLParser::K_TRUE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::TYPE() {
  return getToken(GQLParser::TYPE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::TYPED() {
  return getToken(GQLParser::TYPED, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::UBIGINT() {
  return getToken(GQLParser::UBIGINT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::UINT() {
  return getToken(GQLParser::UINT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::UINT128() {
  return getToken(GQLParser::UINT128, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::UINT16() {
  return getToken(GQLParser::UINT16, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::UINT256() {
  return getToken(GQLParser::UINT256, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::UINT32() {
  return getToken(GQLParser::UINT32, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::UINT64() {
  return getToken(GQLParser::UINT64, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::UINT8() {
  return getToken(GQLParser::UINT8, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::UNDIRECTED() {
  return getToken(GQLParser::UNDIRECTED, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::UNION() {
  return getToken(GQLParser::UNION, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::UNKNOWN() {
  return getToken(GQLParser::UNKNOWN, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::UNSIGNED() {
  return getToken(GQLParser::UNSIGNED, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::UPPER() {
  return getToken(GQLParser::UPPER, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::USE() {
  return getToken(GQLParser::USE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::USMALLINT() {
  return getToken(GQLParser::USMALLINT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::VALUE() {
  return getToken(GQLParser::VALUE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::VARBINARY() {
  return getToken(GQLParser::VARBINARY, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::VARCHAR() {
  return getToken(GQLParser::VARCHAR, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::VARIABLE() {
  return getToken(GQLParser::VARIABLE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::WALK() {
  return getToken(GQLParser::WALK, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::WHEN() {
  return getToken(GQLParser::WHEN, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::WHERE() {
  return getToken(GQLParser::WHERE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::WITH() {
  return getToken(GQLParser::WITH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::WITHOUT() {
  return getToken(GQLParser::WITHOUT, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::WRITE() {
  return getToken(GQLParser::WRITE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::XOR() {
  return getToken(GQLParser::XOR, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::YIELD() {
  return getToken(GQLParser::YIELD, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ZONE() {
  return getToken(GQLParser::ZONE, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ZONED() {
  return getToken(GQLParser::ZONED, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ZONED_DATETIME() {
  return getToken(GQLParser::ZONED_DATETIME, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::ZONED_TIME() {
  return getToken(GQLParser::ZONED_TIME, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INTERVAL_DAY() {
  return getToken(GQLParser::INTERVAL_DAY, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INTERVAL_WEEK() {
  return getToken(GQLParser::INTERVAL_WEEK, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INTERVAL_MONTH() {
  return getToken(GQLParser::INTERVAL_MONTH, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::INTERVAL_YEAR() {
  return getToken(GQLParser::INTERVAL_YEAR, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::EDGE_SYNONYM() {
  return getToken(GQLParser::EDGE_SYNONYM, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::EDGES_SYNONYM() {
  return getToken(GQLParser::EDGES_SYNONYM, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::NODE_SYNONYM() {
  return getToken(GQLParser::NODE_SYNONYM, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::KEY_WORD() {
  return getToken(GQLParser::KEY_WORD, 0);
}

tree::TerminalNode* GQLParser::KeywordContext::PRE_RESERVED_WORD() {
  return getToken(GQLParser::PRE_RESERVED_WORD, 0);
}


size_t GQLParser::KeywordContext::getRuleIndex() const {
  return GQLParser::RuleKeyword;
}


std::any GQLParser::KeywordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<GQLParserVisitor*>(visitor))
    return parserVisitor->visitKeyword(this);
  else
    return visitor->visitChildren(this);
}

GQLParser::KeywordContext* GQLParser::keyword() {
  KeywordContext *_localctx = _tracker.createInstance<KeywordContext>(_ctx, getState());
  enterRule(_localctx, 1028, GQLParser::RuleKeyword);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4381);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -268435456) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -1) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & -1) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & 3298534883327) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool GQLParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 149: return compositeQueryExpressionSempred(antlrcpp::downCast<CompositeQueryExpressionContext *>(context), predicateIndex);
    case 389: return valueTypeSempred(antlrcpp::downCast<ValueTypeContext *>(context), predicateIndex);
    case 466: return expressionSempred(antlrcpp::downCast<ExpressionContext *>(context), predicateIndex);
    case 467: return expressionPredicateSempred(antlrcpp::downCast<ExpressionPredicateContext *>(context), predicateIndex);
    case 468: return expressionAtomSempred(antlrcpp::downCast<ExpressionAtomContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool GQLParser::compositeQueryExpressionSempred(CompositeQueryExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool GQLParser::valueTypeSempred(ValueTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 7);
    case 2: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool GQLParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 3: return precpred(_ctx, 4);
    case 4: return precpred(_ctx, 3);
    case 5: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool GQLParser::expressionPredicateSempred(ExpressionPredicateContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 14);
    case 7: return precpred(_ctx, 15);
    case 8: return precpred(_ctx, 12);
    case 9: return precpred(_ctx, 11);

  default:
    break;
  }
  return true;
}

bool GQLParser::expressionAtomSempred(ExpressionAtomContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 10: return precpred(_ctx, 10);
    case 11: return precpred(_ctx, 4);
    case 12: return precpred(_ctx, 3);
    case 13: return precpred(_ctx, 11);

  default:
    break;
  }
  return true;
}

void GQLParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  gqlparserParserInitialize();
#else
  ::antlr4::internal::call_once(gqlparserParserOnceFlag, gqlparserParserInitialize);
#endif
}
